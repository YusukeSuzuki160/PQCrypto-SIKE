// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_EphemeralKeyGeneration_A_1_Pipeline_VITIS_LOOP_40_1257 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY,
        m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY,
        m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST,
        m_axi_gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID,
        m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP,
        m_axi_gmem0_0_BID,
        m_axi_gmem0_0_BUSER,
        PublicKeyA,
        t_i398_address0,
        t_i398_ce0,
        t_i398_q0,
        t_i398_address1,
        t_i398_ce1,
        t_i398_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_0_AWVALID;
input   m_axi_gmem0_0_AWREADY;
output  [31:0] m_axi_gmem0_0_AWADDR;
output  [0:0] m_axi_gmem0_0_AWID;
output  [31:0] m_axi_gmem0_0_AWLEN;
output  [2:0] m_axi_gmem0_0_AWSIZE;
output  [1:0] m_axi_gmem0_0_AWBURST;
output  [1:0] m_axi_gmem0_0_AWLOCK;
output  [3:0] m_axi_gmem0_0_AWCACHE;
output  [2:0] m_axi_gmem0_0_AWPROT;
output  [3:0] m_axi_gmem0_0_AWQOS;
output  [3:0] m_axi_gmem0_0_AWREGION;
output  [0:0] m_axi_gmem0_0_AWUSER;
output   m_axi_gmem0_0_WVALID;
input   m_axi_gmem0_0_WREADY;
output  [7:0] m_axi_gmem0_0_WDATA;
output  [0:0] m_axi_gmem0_0_WSTRB;
output   m_axi_gmem0_0_WLAST;
output  [0:0] m_axi_gmem0_0_WID;
output  [0:0] m_axi_gmem0_0_WUSER;
output   m_axi_gmem0_0_ARVALID;
input   m_axi_gmem0_0_ARREADY;
output  [31:0] m_axi_gmem0_0_ARADDR;
output  [0:0] m_axi_gmem0_0_ARID;
output  [31:0] m_axi_gmem0_0_ARLEN;
output  [2:0] m_axi_gmem0_0_ARSIZE;
output  [1:0] m_axi_gmem0_0_ARBURST;
output  [1:0] m_axi_gmem0_0_ARLOCK;
output  [3:0] m_axi_gmem0_0_ARCACHE;
output  [2:0] m_axi_gmem0_0_ARPROT;
output  [3:0] m_axi_gmem0_0_ARQOS;
output  [3:0] m_axi_gmem0_0_ARREGION;
output  [0:0] m_axi_gmem0_0_ARUSER;
input   m_axi_gmem0_0_RVALID;
output   m_axi_gmem0_0_RREADY;
input  [7:0] m_axi_gmem0_0_RDATA;
input   m_axi_gmem0_0_RLAST;
input  [0:0] m_axi_gmem0_0_RID;
input  [10:0] m_axi_gmem0_0_RFIFONUM;
input  [0:0] m_axi_gmem0_0_RUSER;
input  [1:0] m_axi_gmem0_0_RRESP;
input   m_axi_gmem0_0_BVALID;
output   m_axi_gmem0_0_BREADY;
input  [1:0] m_axi_gmem0_0_BRESP;
input  [0:0] m_axi_gmem0_0_BID;
input  [0:0] m_axi_gmem0_0_BUSER;
input  [31:0] PublicKeyA;
output  [3:0] t_i398_address0;
output   t_i398_ce0;
input  [63:0] t_i398_q0;
output  [3:0] t_i398_address1;
output   t_i398_ce1;
input  [63:0] t_i398_q1;

reg ap_idle;
reg m_axi_gmem0_0_AWVALID;
reg[31:0] m_axi_gmem0_0_AWADDR;
reg m_axi_gmem0_0_WVALID;
reg[7:0] m_axi_gmem0_0_WDATA;
reg m_axi_gmem0_0_BREADY;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_block_state4_io_grp2;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln40_reg_274;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem0_blk_n_AW;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_subdone_grp1_done_reg;
reg    ap_block_pp0_stage0_subdone_grp1;
reg    ap_block_pp0_stage0_subdone;
reg    gmem0_blk_n_W;
wire    ap_block_pp0_stage1_grp2;
reg    gmem0_blk_n_B;
wire    ap_block_pp0_stage0_grp4;
reg    ap_block_pp0_stage0_subdone_grp4_done_reg;
reg    ap_block_pp0_stage0_subdone_grp4;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg   [5:0] i_293_reg_267;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln40_fu_139_p2;
reg   [63:0] t_i398_load_reg_288;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg   [31:0] gmem0_addr_reg_293;
reg    ap_block_pp0_stage1_11001_grp2;
reg   [63:0] t_i398_load_1_reg_299;
reg   [31:0] gmem0_addr_3_reg_304;
wire   [63:0] zext_ln42_fu_233_p1;
reg   [63:0] zext_ln42_reg_310;
wire   [7:0] trunc_ln42_fu_242_p1;
reg   [7:0] trunc_ln42_reg_315;
wire   [7:0] trunc_ln43_fu_250_p1;
reg   [7:0] trunc_ln43_reg_320;
wire   [31:0] zext_ln42_4_fu_155_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln43_fu_168_p1;
wire   [31:0] add_ln42_1_fu_191_p2;
wire   [31:0] add_ln43_2_fu_212_p2;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage1_01001_grp2;
reg    ap_block_pp0_stage0_11001_grp4;
wire    ap_block_pp0_stage0_01001_grp4;
reg   [5:0] i_fu_64;
wire   [5:0] add_ln40_fu_173_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_293;
reg    t_i398_ce1_local;
reg    t_i398_ce0_local;
wire   [2:0] lshr_ln42_3_fu_145_p4;
wire   [3:0] zext_ln43_3_fu_160_p3;
wire    ap_block_pp0_stage1_grp0;
wire   [7:0] zext_ln36_fu_178_p1;
wire   [7:0] add_ln42_fu_181_p2;
wire   [31:0] zext_ln42_5_fu_187_p1;
wire   [7:0] add_ln43_fu_202_p2;
wire   [31:0] zext_ln43_4_fu_208_p1;
wire    ap_block_pp0_stage0_grp0;
wire   [5:0] shl_ln42_fu_228_p2;
wire   [63:0] lshr_ln42_fu_237_p2;
wire   [63:0] lshr_ln43_fu_246_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage1_11001;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_452;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp4_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 i_fu_64 = 6'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp1)) begin
                ap_block_pp0_stage0_subdone_grp1_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp4_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp4_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp4)) begin
                ap_block_pp0_stage0_subdone_grp4_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_64 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln40_reg_274 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        i_fu_64 <= add_ln40_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp2))) begin
        gmem0_addr_3_reg_304 <= add_ln43_2_fu_212_p2;
        gmem0_addr_reg_293 <= add_ln42_1_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_293_reg_267 <= ap_sig_allocacmp_i_293;
        icmp_ln40_reg_274 <= icmp_ln40_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        t_i398_load_1_reg_299 <= t_i398_q0;
        t_i398_load_reg_288 <= t_i398_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        trunc_ln42_reg_315 <= trunc_ln42_fu_242_p1;
        zext_ln42_reg_310[5 : 0] <= zext_ln42_fu_233_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        trunc_ln43_reg_320 <= trunc_ln43_fu_250_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln40_reg_274 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_293 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_293 = i_fu_64;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1)))) begin
        gmem0_blk_n_AW = m_axi_gmem0_0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp2)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage0_grp1)))) begin
        gmem0_blk_n_B = m_axi_gmem0_0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg) & (1'b0 == ap_block_pp0_stage0_grp4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp2)))) begin
        gmem0_blk_n_W = m_axi_gmem0_0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp2))) begin
            m_axi_gmem0_0_AWADDR = gmem0_addr_3_reg_304;
        end else if ((1'b1 == ap_condition_452)) begin
            m_axi_gmem0_0_AWADDR = gmem0_addr_reg_293;
        end else begin
            m_axi_gmem0_0_AWADDR = 'bx;
        end
    end else begin
        m_axi_gmem0_0_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)))) begin
        m_axi_gmem0_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp2)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)))) begin
        m_axi_gmem0_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem0_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001_grp4) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg))) begin
        m_axi_gmem0_0_WDATA = trunc_ln43_reg_320;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001_grp2))) begin
        m_axi_gmem0_0_WDATA = trunc_ln42_reg_315;
    end else begin
        m_axi_gmem0_0_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp4) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp2)))) begin
        m_axi_gmem0_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem0_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_i398_ce0_local = 1'b1;
    end else begin
        t_i398_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_i398_ce1_local = 1'b1;
    end else begin
        t_i398_ce1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_fu_173_p2 = (i_293_reg_267 + 6'd1);

assign add_ln42_1_fu_191_p2 = (zext_ln42_5_fu_187_p1 + PublicKeyA);

assign add_ln42_fu_181_p2 = (zext_ln36_fu_178_p1 + 8'd126);

assign add_ln43_2_fu_212_p2 = (zext_ln43_4_fu_208_p1 + PublicKeyA);

assign add_ln43_fu_202_p2 = ($signed(zext_ln36_fu_178_p1) + $signed(8'd189));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem0_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg)) | ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((m_axi_gmem0_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)) | ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp4 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem0_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)) | ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg)) | ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp1 = (((m_axi_gmem0_0_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)) | ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp4 = ((m_axi_gmem0_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage1_01001_grp2 = ((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io_grp2)));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp2 = (((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io_grp2)));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem0_0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io_grp2)));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io_grp2 = ((m_axi_gmem0_0_WREADY == 1'b0) | (m_axi_gmem0_0_AWREADY == 1'b0));
end

always @ (*) begin
    ap_condition_452 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b0 == ap_block_pp0_stage0_subdone_grp1_done_reg));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln40_fu_139_p2 = ((ap_sig_allocacmp_i_293 == 6'd63) ? 1'b1 : 1'b0);

assign lshr_ln42_3_fu_145_p4 = {{ap_sig_allocacmp_i_293[5:3]}};

assign lshr_ln42_fu_237_p2 = t_i398_load_reg_288 >> zext_ln42_fu_233_p1;

assign lshr_ln43_fu_246_p2 = t_i398_load_1_reg_299 >> zext_ln42_reg_310;

assign m_axi_gmem0_0_ARADDR = 32'd0;

assign m_axi_gmem0_0_ARBURST = 2'd0;

assign m_axi_gmem0_0_ARCACHE = 4'd0;

assign m_axi_gmem0_0_ARID = 1'd0;

assign m_axi_gmem0_0_ARLEN = 32'd0;

assign m_axi_gmem0_0_ARLOCK = 2'd0;

assign m_axi_gmem0_0_ARPROT = 3'd0;

assign m_axi_gmem0_0_ARQOS = 4'd0;

assign m_axi_gmem0_0_ARREGION = 4'd0;

assign m_axi_gmem0_0_ARSIZE = 3'd0;

assign m_axi_gmem0_0_ARUSER = 1'd0;

assign m_axi_gmem0_0_ARVALID = 1'b0;

assign m_axi_gmem0_0_AWBURST = 2'd0;

assign m_axi_gmem0_0_AWCACHE = 4'd0;

assign m_axi_gmem0_0_AWID = 1'd0;

assign m_axi_gmem0_0_AWLEN = 32'd1;

assign m_axi_gmem0_0_AWLOCK = 2'd0;

assign m_axi_gmem0_0_AWPROT = 3'd0;

assign m_axi_gmem0_0_AWQOS = 4'd0;

assign m_axi_gmem0_0_AWREGION = 4'd0;

assign m_axi_gmem0_0_AWSIZE = 3'd0;

assign m_axi_gmem0_0_AWUSER = 1'd0;

assign m_axi_gmem0_0_RREADY = 1'b0;

assign m_axi_gmem0_0_WID = 1'd0;

assign m_axi_gmem0_0_WLAST = 1'b0;

assign m_axi_gmem0_0_WSTRB = 1'd1;

assign m_axi_gmem0_0_WUSER = 1'd0;

assign shl_ln42_fu_228_p2 = i_293_reg_267 << 6'd3;

assign t_i398_address0 = zext_ln43_fu_168_p1;

assign t_i398_address1 = zext_ln42_4_fu_155_p1;

assign t_i398_ce0 = t_i398_ce0_local;

assign t_i398_ce1 = t_i398_ce1_local;

assign trunc_ln42_fu_242_p1 = lshr_ln42_fu_237_p2[7:0];

assign trunc_ln43_fu_250_p1 = lshr_ln43_fu_246_p2[7:0];

assign zext_ln36_fu_178_p1 = i_293_reg_267;

assign zext_ln42_4_fu_155_p1 = lshr_ln42_3_fu_145_p4;

assign zext_ln42_5_fu_187_p1 = add_ln42_fu_181_p2;

assign zext_ln42_fu_233_p1 = shl_ln42_fu_228_p2;

assign zext_ln43_3_fu_160_p3 = {{1'd1}, {lshr_ln42_3_fu_145_p4}};

assign zext_ln43_4_fu_208_p1 = add_ln43_fu_202_p2;

assign zext_ln43_fu_168_p1 = zext_ln43_3_fu_160_p3;

always @ (posedge ap_clk) begin
    zext_ln42_reg_310[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //sikep503_kem_enc_hw_EphemeralKeyGeneration_A_1_Pipeline_VITIS_LOOP_40_1257
