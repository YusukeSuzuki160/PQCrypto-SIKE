// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_mp_mul_6_Pipeline_VITIS_LOOP_144_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        v_017,
        zext_ln143,
        indvars_iv31,
        PKB_address0,
        PKB_ce0,
        PKB_q0,
        empty,
        v_101_out,
        v_101_out_ap_vld,
        u_74_out_i,
        u_74_out_o,
        u_74_out_o_ap_vld,
        t_out_i,
        t_out_o,
        t_out_o_ap_vld,
        grp_fu_433_p_din0,
        grp_fu_433_p_din1,
        grp_fu_433_p_dout0,
        grp_fu_433_p_ce,
        grp_fu_437_p_din0,
        grp_fu_437_p_din1,
        grp_fu_437_p_dout0,
        grp_fu_437_p_ce,
        grp_fu_441_p_din0,
        grp_fu_441_p_din1,
        grp_fu_441_p_dout0,
        grp_fu_441_p_ce,
        grp_fu_445_p_din0,
        grp_fu_445_p_din1,
        grp_fu_445_p_dout0,
        grp_fu_445_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] v_017;
input  [3:0] zext_ln143;
input  [3:0] indvars_iv31;
output  [5:0] PKB_address0;
output   PKB_ce0;
input  [63:0] PKB_q0;
input  [2:0] empty;
output  [63:0] v_101_out;
output   v_101_out_ap_vld;
input  [63:0] u_74_out_i;
output  [63:0] u_74_out_o;
output   u_74_out_o_ap_vld;
input  [3:0] t_out_i;
output  [3:0] t_out_o;
output   t_out_o_ap_vld;
output  [31:0] grp_fu_433_p_din0;
output  [31:0] grp_fu_433_p_din1;
input  [63:0] grp_fu_433_p_dout0;
output   grp_fu_433_p_ce;
output  [31:0] grp_fu_437_p_din0;
output  [31:0] grp_fu_437_p_din1;
input  [63:0] grp_fu_437_p_dout0;
output   grp_fu_437_p_ce;
output  [31:0] grp_fu_441_p_din0;
output  [31:0] grp_fu_441_p_din1;
input  [63:0] grp_fu_441_p_dout0;
output   grp_fu_441_p_ce;
output  [31:0] grp_fu_445_p_din0;
output  [31:0] grp_fu_445_p_din1;
input  [63:0] grp_fu_445_p_dout0;
output   grp_fu_445_p_ce;

reg ap_idle;
reg v_101_out_ap_vld;
reg[63:0] u_74_out_o;
reg u_74_out_o_ap_vld;
reg[3:0] t_out_o;
reg t_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln144_fu_188_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] Montgomery_R2_1_address0;
wire   [63:0] Montgomery_R2_1_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln144_reg_641;
reg   [0:0] icmp_ln144_reg_641_pp0_iter1_reg;
reg   [0:0] icmp_ln144_reg_641_pp0_iter2_reg;
reg   [0:0] icmp_ln144_reg_641_pp0_iter3_reg;
reg   [0:0] icmp_ln144_reg_641_pp0_iter4_reg;
reg   [0:0] icmp_ln144_reg_641_pp0_iter5_reg;
reg   [0:0] icmp_ln144_reg_641_pp0_iter6_reg;
wire   [31:0] al_fu_225_p1;
reg   [31:0] al_reg_655;
wire   [31:0] bl_fu_229_p1;
reg   [31:0] bl_reg_660;
reg   [31:0] ah_reg_665;
reg   [31:0] bh_reg_670;
wire   [63:0] zext_ln105_fu_253_p1;
wire   [63:0] zext_ln110_fu_258_p1;
wire   [63:0] zext_ln105_75_fu_263_p1;
wire   [63:0] zext_ln112_fu_268_p1;
wire   [31:0] trunc_ln106_fu_273_p1;
reg   [31:0] trunc_ln106_reg_699;
reg   [31:0] trunc_ln106_reg_699_pp0_iter4_reg;
reg   [31:0] trunc_ln106_reg_699_pp0_iter5_reg;
wire   [31:0] trunc_ln106_111_fu_277_p1;
reg   [31:0] trunc_ln106_111_reg_704;
wire   [31:0] trunc_ln106_112_fu_281_p1;
reg   [31:0] trunc_ln106_112_reg_709;
wire   [31:0] trunc_ln106_113_fu_285_p1;
reg   [31:0] trunc_ln106_113_reg_714;
reg   [31:0] tmp_183_reg_719;
reg   [31:0] tmp_185_reg_724;
reg   [31:0] trunc_ln106_s_reg_729;
reg   [31:0] trunc_ln106_s_reg_729_pp0_iter4_reg;
reg   [31:0] tmp_186_reg_734;
reg   [31:0] tmp_186_reg_734_pp0_iter4_reg;
reg   [31:0] tmp_186_reg_734_pp0_iter5_reg;
reg   [1:0] tmp_184_reg_739;
wire   [31:0] trunc_ln125_fu_364_p1;
reg   [31:0] trunc_ln125_reg_744;
reg   [31:0] trunc_ln125_reg_744_pp0_iter5_reg;
wire   [32:0] add_ln130_fu_374_p2;
reg   [32:0] add_ln130_reg_750;
wire   [33:0] temp_36_fu_395_p2;
reg   [33:0] temp_36_reg_755;
reg   [1:0] tmp_187_reg_760;
wire   [63:0] add_ln133_fu_442_p2;
reg   [63:0] add_ln133_reg_765;
reg   [63:0] add_ln133_reg_765_pp0_iter7_reg;
wire   [63:0] tempReg_fu_514_p2;
reg   [63:0] tempReg_reg_770;
reg   [63:0] tempReg_reg_770_pp0_iter7_reg;
reg   [63:0] u_74_out_load_reg_779;
wire   [63:0] v_fu_529_p2;
reg   [63:0] v_reg_784;
wire   [31:0] zext_ln145_fu_204_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln145_9_fu_215_p1;
wire   [63:0] zext_ln143_cast_fu_159_p1;
wire    ap_loop_init;
wire   [3:0] u_fu_610_p2;
reg   [63:0] v_101_fu_78;
wire   [63:0] v_126_fu_454_p2;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [3:0] j_fu_82;
wire   [3:0] add_ln144_fu_194_p2;
reg   [3:0] ap_sig_allocacmp_j_20;
wire    ap_block_pp0_stage0_01001;
reg    PKB_ce0_local;
reg    Montgomery_R2_1_ce0_local;
wire   [2:0] trunc_ln144_fu_200_p1;
wire   [2:0] sub_ln145_fu_209_p2;
wire   [32:0] zext_ln123_fu_332_p1;
wire   [32:0] zext_ln123_65_fu_335_p1;
wire   [32:0] add_ln123_fu_338_p2;
wire   [33:0] zext_ln123_66_fu_344_p1;
wire   [33:0] zext_ln106_fu_329_p1;
wire   [33:0] temp_fu_348_p2;
wire   [32:0] zext_ln130_fu_371_p1;
wire   [32:0] zext_ln106_78_fu_368_p1;
wire   [31:0] zext_ln106_77_fu_380_p1;
wire   [31:0] add_ln130_77_fu_386_p2;
wire   [33:0] zext_ln130_66_fu_391_p1;
wire   [33:0] zext_ln130_65_fu_383_p1;
wire   [33:0] and_ln133_s_fu_431_p3;
wire   [63:0] zext_ln133_fu_438_p1;
wire   [63:0] and_ln_fu_424_p3;
wire   [63:0] or_ln_fu_448_p3;
wire   [63:0] shl_ln_fu_414_p3;
wire   [63:0] xor_ln105_fu_460_p2;
wire   [63:0] xor_ln105_26_fu_466_p2;
wire   [63:0] or_ln105_fu_472_p2;
wire   [63:0] xor_ln105_27_fu_478_p2;
wire   [0:0] carry_fu_484_p3;
wire   [31:0] tmp_s_fu_496_p4;
wire   [31:0] trunc_ln105_fu_421_p1;
wire   [63:0] or_ln4_fu_506_p3;
wire   [63:0] zext_ln105_76_fu_492_p1;
wire   [63:0] xor_ln147_fu_544_p2;
wire   [63:0] xor_ln147_13_fu_548_p2;
wire   [0:0] bit_sel_fu_558_p3;
wire   [0:0] xor_ln147_14_fu_565_p2;
wire   [62:0] trunc_ln147_fu_571_p1;
wire   [63:0] xor_ln147_s_fu_574_p3;
wire   [63:0] or_ln147_fu_552_p2;
wire   [63:0] xor_ln147_15_fu_587_p2;
wire   [63:0] and_ln147_fu_582_p2;
wire   [63:0] or_ln147_5_fu_592_p2;
wire   [0:0] tmp_132_fu_598_p3;
wire   [3:0] zext_ln148_fu_606_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 v_101_fu_78 = 64'd0;
#0 j_fu_82 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_mp_mul_6_Pipeline_VITIS_LOOP_144_2_Montgomery_R2_1_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Montgomery_R2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Montgomery_R2_1_address0),
    .ce0(Montgomery_R2_1_ce0_local),
    .q0(Montgomery_R2_1_q0)
);

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln144_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_82 <= add_ln144_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            v_101_fu_78 <= v_017;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            v_101_fu_78 <= v_126_fu_454_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln130_reg_750 <= add_ln130_fu_374_p2;
        add_ln133_reg_765[63 : 32] <= add_ln133_fu_442_p2[63 : 32];
        add_ln133_reg_765_pp0_iter7_reg[63 : 32] <= add_ln133_reg_765[63 : 32];
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        icmp_ln144_reg_641_pp0_iter2_reg <= icmp_ln144_reg_641_pp0_iter1_reg;
        icmp_ln144_reg_641_pp0_iter3_reg <= icmp_ln144_reg_641_pp0_iter2_reg;
        icmp_ln144_reg_641_pp0_iter4_reg <= icmp_ln144_reg_641_pp0_iter3_reg;
        icmp_ln144_reg_641_pp0_iter5_reg <= icmp_ln144_reg_641_pp0_iter4_reg;
        icmp_ln144_reg_641_pp0_iter6_reg <= icmp_ln144_reg_641_pp0_iter5_reg;
        tempReg_reg_770 <= tempReg_fu_514_p2;
        tempReg_reg_770_pp0_iter7_reg <= tempReg_reg_770;
        temp_36_reg_755 <= temp_36_fu_395_p2;
        tmp_183_reg_719 <= {{grp_fu_433_p_dout0[63:32]}};
        tmp_184_reg_739 <= {{temp_fu_348_p2[33:32]}};
        tmp_185_reg_724 <= {{grp_fu_441_p_dout0[63:32]}};
        tmp_186_reg_734 <= {{grp_fu_445_p_dout0[63:32]}};
        tmp_186_reg_734_pp0_iter4_reg <= tmp_186_reg_734;
        tmp_186_reg_734_pp0_iter5_reg <= tmp_186_reg_734_pp0_iter4_reg;
        tmp_187_reg_760 <= {{temp_36_fu_395_p2[33:32]}};
        trunc_ln106_111_reg_704 <= trunc_ln106_111_fu_277_p1;
        trunc_ln106_112_reg_709 <= trunc_ln106_112_fu_281_p1;
        trunc_ln106_113_reg_714 <= trunc_ln106_113_fu_285_p1;
        trunc_ln106_reg_699 <= trunc_ln106_fu_273_p1;
        trunc_ln106_reg_699_pp0_iter4_reg <= trunc_ln106_reg_699;
        trunc_ln106_reg_699_pp0_iter5_reg <= trunc_ln106_reg_699_pp0_iter4_reg;
        trunc_ln106_s_reg_729 <= {{grp_fu_437_p_dout0[63:32]}};
        trunc_ln106_s_reg_729_pp0_iter4_reg <= trunc_ln106_s_reg_729;
        trunc_ln125_reg_744 <= trunc_ln125_fu_364_p1;
        trunc_ln125_reg_744_pp0_iter5_reg <= trunc_ln125_reg_744;
        u_74_out_load_reg_779 <= u_74_out_i;
        v_reg_784 <= v_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ah_reg_665 <= {{PKB_q0[63:32]}};
        al_reg_655 <= al_fu_225_p1;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        bh_reg_670 <= {{Montgomery_R2_1_q0[63:32]}};
        bl_reg_660 <= bl_fu_229_p1;
        icmp_ln144_reg_641 <= icmp_ln144_fu_188_p2;
        icmp_ln144_reg_641_pp0_iter1_reg <= icmp_ln144_reg_641;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Montgomery_R2_1_ce0_local = 1'b1;
    end else begin
        Montgomery_R2_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        PKB_ce0_local = 1'b1;
    end else begin
        PKB_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln144_fu_188_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_20 = 4'd0;
    end else begin
        ap_sig_allocacmp_j_20 = j_fu_82;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            t_out_o = 4'd0;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            t_out_o = u_fu_610_p2;
        end else begin
            t_out_o = t_out_i;
        end
    end else begin
        t_out_o = t_out_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        t_out_o_ap_vld = 1'b1;
    end else begin
        t_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            u_74_out_o = zext_ln143_cast_fu_159_p1;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            u_74_out_o = v_fu_529_p2;
        end else begin
            u_74_out_o = u_74_out_i;
        end
    end else begin
        u_74_out_o = u_74_out_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        u_74_out_o_ap_vld = 1'b1;
    end else begin
        u_74_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (icmp_ln144_reg_641_pp0_iter6_reg == 1'd1))) begin
        v_101_out_ap_vld = 1'b1;
    end else begin
        v_101_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Montgomery_R2_1_address0 = zext_ln145_9_fu_215_p1;

assign PKB_address0 = zext_ln145_fu_204_p1;

assign PKB_ce0 = PKB_ce0_local;

assign add_ln123_fu_338_p2 = (zext_ln123_fu_332_p1 + zext_ln123_65_fu_335_p1);

assign add_ln130_77_fu_386_p2 = (trunc_ln106_s_reg_729_pp0_iter4_reg + zext_ln106_77_fu_380_p1);

assign add_ln130_fu_374_p2 = (zext_ln130_fu_371_p1 + zext_ln106_78_fu_368_p1);

assign add_ln133_fu_442_p2 = (zext_ln133_fu_438_p1 + and_ln_fu_424_p3);

assign add_ln144_fu_194_p2 = (ap_sig_allocacmp_j_20 + 4'd1);

assign al_fu_225_p1 = PKB_q0[31:0];

assign and_ln133_s_fu_431_p3 = {{tmp_187_reg_760}, {32'd0}};

assign and_ln147_fu_582_p2 = (xor_ln147_s_fu_574_p3 & add_ln133_reg_765_pp0_iter7_reg);

assign and_ln_fu_424_p3 = {{tmp_186_reg_734_pp0_iter5_reg}, {32'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bit_sel_fu_558_p3 = tempReg_reg_770_pp0_iter7_reg[64'd63];

assign bl_fu_229_p1 = Montgomery_R2_1_q0[31:0];

assign carry_fu_484_p3 = xor_ln105_27_fu_478_p2[32'd63];

assign grp_fu_433_p_ce = 1'b1;

assign grp_fu_433_p_din0 = zext_ln105_75_fu_263_p1;

assign grp_fu_433_p_din1 = zext_ln105_fu_253_p1;

assign grp_fu_437_p_ce = 1'b1;

assign grp_fu_437_p_din0 = zext_ln112_fu_268_p1;

assign grp_fu_437_p_din1 = zext_ln105_fu_253_p1;

assign grp_fu_441_p_ce = 1'b1;

assign grp_fu_441_p_din0 = zext_ln105_75_fu_263_p1;

assign grp_fu_441_p_din1 = zext_ln110_fu_258_p1;

assign grp_fu_445_p_ce = 1'b1;

assign grp_fu_445_p_din0 = zext_ln112_fu_268_p1;

assign grp_fu_445_p_din1 = zext_ln110_fu_258_p1;

assign icmp_ln144_fu_188_p2 = ((ap_sig_allocacmp_j_20 == indvars_iv31) ? 1'b1 : 1'b0);

assign or_ln105_fu_472_p2 = (xor_ln105_fu_460_p2 | xor_ln105_26_fu_466_p2);

assign or_ln147_5_fu_592_p2 = (xor_ln147_15_fu_587_p2 | and_ln147_fu_582_p2);

assign or_ln147_fu_552_p2 = (xor_ln147_fu_544_p2 | xor_ln147_13_fu_548_p2);

assign or_ln4_fu_506_p3 = {{tmp_s_fu_496_p4}, {trunc_ln105_fu_421_p1}};

assign or_ln_fu_448_p3 = {{trunc_ln125_reg_744_pp0_iter5_reg}, {trunc_ln106_reg_699_pp0_iter5_reg}};

assign shl_ln_fu_414_p3 = {{trunc_ln125_reg_744_pp0_iter5_reg}, {32'd0}};

assign sub_ln145_fu_209_p2 = (empty - trunc_ln144_fu_200_p1);

assign tempReg_fu_514_p2 = (or_ln4_fu_506_p3 + zext_ln105_76_fu_492_p1);

assign temp_36_fu_395_p2 = (zext_ln130_66_fu_391_p1 + zext_ln130_65_fu_383_p1);

assign temp_fu_348_p2 = (zext_ln123_66_fu_344_p1 + zext_ln106_fu_329_p1);

assign tmp_132_fu_598_p3 = or_ln147_5_fu_592_p2[32'd63];

assign tmp_s_fu_496_p4 = {{add_ln133_fu_442_p2[63:32]}};

assign trunc_ln105_fu_421_p1 = temp_36_reg_755[31:0];

assign trunc_ln106_111_fu_277_p1 = grp_fu_437_p_dout0[31:0];

assign trunc_ln106_112_fu_281_p1 = grp_fu_441_p_dout0[31:0];

assign trunc_ln106_113_fu_285_p1 = grp_fu_445_p_dout0[31:0];

assign trunc_ln106_fu_273_p1 = grp_fu_433_p_dout0[31:0];

assign trunc_ln125_fu_364_p1 = temp_fu_348_p2[31:0];

assign trunc_ln144_fu_200_p1 = ap_sig_allocacmp_j_20[2:0];

assign trunc_ln147_fu_571_p1 = tempReg_reg_770_pp0_iter7_reg[62:0];

assign u_fu_610_p2 = (zext_ln148_fu_606_p1 + t_out_i);

assign v_101_out = v_101_fu_78;

assign v_126_fu_454_p2 = (or_ln_fu_448_p3 + v_101_fu_78);

assign v_fu_529_p2 = (tempReg_reg_770 + u_74_out_i);

assign xor_ln105_26_fu_466_p2 = (v_101_fu_78 ^ shl_ln_fu_414_p3);

assign xor_ln105_27_fu_478_p2 = (v_126_fu_454_p2 ^ or_ln105_fu_472_p2);

assign xor_ln105_fu_460_p2 = (v_126_fu_454_p2 ^ shl_ln_fu_414_p3);

assign xor_ln147_13_fu_548_p2 = (u_74_out_load_reg_779 ^ tempReg_reg_770_pp0_iter7_reg);

assign xor_ln147_14_fu_565_p2 = (bit_sel_fu_558_p3 ^ 1'd1);

assign xor_ln147_15_fu_587_p2 = (v_reg_784 ^ or_ln147_fu_552_p2);

assign xor_ln147_fu_544_p2 = (v_reg_784 ^ tempReg_reg_770_pp0_iter7_reg);

assign xor_ln147_s_fu_574_p3 = {{xor_ln147_14_fu_565_p2}, {trunc_ln147_fu_571_p1}};

assign zext_ln105_75_fu_263_p1 = bl_reg_660;

assign zext_ln105_76_fu_492_p1 = carry_fu_484_p3;

assign zext_ln105_fu_253_p1 = al_reg_655;

assign zext_ln106_77_fu_380_p1 = tmp_184_reg_739;

assign zext_ln106_78_fu_368_p1 = tmp_185_reg_724;

assign zext_ln106_fu_329_p1 = tmp_183_reg_719;

assign zext_ln110_fu_258_p1 = ah_reg_665;

assign zext_ln112_fu_268_p1 = bh_reg_670;

assign zext_ln123_65_fu_335_p1 = trunc_ln106_111_reg_704;

assign zext_ln123_66_fu_344_p1 = add_ln123_fu_338_p2;

assign zext_ln123_fu_332_p1 = trunc_ln106_112_reg_709;

assign zext_ln130_65_fu_383_p1 = add_ln130_reg_750;

assign zext_ln130_66_fu_391_p1 = add_ln130_77_fu_386_p2;

assign zext_ln130_fu_371_p1 = trunc_ln106_113_reg_714;

assign zext_ln133_fu_438_p1 = and_ln133_s_fu_431_p3;

assign zext_ln143_cast_fu_159_p1 = zext_ln143;

assign zext_ln145_9_fu_215_p1 = sub_ln145_fu_209_p2;

assign zext_ln145_fu_204_p1 = trunc_ln144_fu_200_p1;

assign zext_ln148_fu_606_p1 = tmp_132_fu_598_p3;

always @ (posedge ap_clk) begin
    add_ln133_reg_765[31:0] <= 32'b00000000000000000000000000000000;
    add_ln133_reg_765_pp0_iter7_reg[31:0] <= 32'b00000000000000000000000000000000;
end

endmodule //sikep503_kem_enc_hw_mp_mul_6_Pipeline_VITIS_LOOP_144_2
