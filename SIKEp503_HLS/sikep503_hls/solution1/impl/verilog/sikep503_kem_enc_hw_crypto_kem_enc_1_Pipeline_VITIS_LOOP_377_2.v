// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_377_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_80_address0,
        t_80_ce0,
        t_80_we0,
        t_80_d0,
        t_80_address1,
        t_80_ce1,
        t_80_we1,
        t_80_d1,
        t_79_address0,
        t_79_ce0,
        t_79_we0,
        t_79_d0,
        t_79_address1,
        t_79_ce1,
        t_79_we1,
        t_79_d1,
        t_78_address0,
        t_78_ce0,
        t_78_we0,
        t_78_d0,
        t_78_address1,
        t_78_ce1,
        t_78_we1,
        t_78_d1,
        t_address0,
        t_ce0,
        t_we0,
        t_d0,
        t_address1,
        t_ce1,
        t_we1,
        t_d1,
        s_i_address0,
        s_i_ce0,
        s_i_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] t_80_address0;
output   t_80_ce0;
output   t_80_we0;
output  [7:0] t_80_d0;
output  [5:0] t_80_address1;
output   t_80_ce1;
output   t_80_we1;
output  [7:0] t_80_d1;
output  [5:0] t_79_address0;
output   t_79_ce0;
output   t_79_we0;
output  [7:0] t_79_d0;
output  [5:0] t_79_address1;
output   t_79_ce1;
output   t_79_we1;
output  [7:0] t_79_d1;
output  [5:0] t_78_address0;
output   t_78_ce0;
output   t_78_we0;
output  [7:0] t_78_d0;
output  [5:0] t_78_address1;
output   t_78_ce1;
output   t_78_we1;
output  [7:0] t_78_d1;
output  [5:0] t_address0;
output   t_ce0;
output   t_we0;
output  [7:0] t_d0;
output  [5:0] t_address1;
output   t_ce1;
output   t_we1;
output  [7:0] t_d1;
output  [4:0] s_i_address0;
output   s_i_ce0;
input  [63:0] s_i_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln377_fu_197_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] i_reg_338;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln379_fu_209_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln38_fu_231_p1;
wire   [31:0] zext_ln38_2_fu_290_p1;
reg   [4:0] i_257_fu_72;
wire   [4:0] add_ln377_fu_203_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
reg    s_i_ce0_local;
reg    t_we1_local;
wire   [7:0] trunc_ln38_fu_219_p1;
reg    t_ce1_local;
reg    t_we0_local;
reg    t_ce0_local;
reg    t_78_we1_local;
reg    t_78_ce1_local;
reg    t_78_we0_local;
reg    t_78_ce0_local;
reg    t_79_we1_local;
reg    t_79_ce1_local;
reg    t_79_we0_local;
reg    t_79_ce0_local;
reg    t_80_we1_local;
reg    t_80_ce1_local;
reg    t_80_we0_local;
reg    t_80_ce0_local;
wire   [5:0] shl_ln_fu_224_p3;
wire   [5:0] or_ln38_fu_283_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_257_fu_72 = 5'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln377_fu_197_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_257_fu_72 <= add_ln377_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_257_fu_72 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_338 <= ap_sig_allocacmp_i;
    end
end

always @ (*) begin
    if (((icmp_ln377_fu_197_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_257_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_i_ce0_local = 1'b1;
    end else begin
        s_i_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_78_ce0_local = 1'b1;
    end else begin
        t_78_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_78_ce1_local = 1'b1;
    end else begin
        t_78_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_78_we0_local = 1'b1;
    end else begin
        t_78_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_78_we1_local = 1'b1;
    end else begin
        t_78_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_79_ce0_local = 1'b1;
    end else begin
        t_79_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_79_ce1_local = 1'b1;
    end else begin
        t_79_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_79_we0_local = 1'b1;
    end else begin
        t_79_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_79_we1_local = 1'b1;
    end else begin
        t_79_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_80_ce0_local = 1'b1;
    end else begin
        t_80_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_80_ce1_local = 1'b1;
    end else begin
        t_80_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_80_we0_local = 1'b1;
    end else begin
        t_80_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_80_we1_local = 1'b1;
    end else begin
        t_80_we1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce0_local = 1'b1;
    end else begin
        t_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce1_local = 1'b1;
    end else begin
        t_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_we0_local = 1'b1;
    end else begin
        t_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_we1_local = 1'b1;
    end else begin
        t_we1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln377_fu_203_p2 = (ap_sig_allocacmp_i + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln377_fu_197_p2 = ((ap_sig_allocacmp_i == 5'd17) ? 1'b1 : 1'b0);

assign or_ln38_fu_283_p3 = {{i_reg_338}, {1'd1}};

assign s_i_address0 = zext_ln379_fu_209_p1;

assign s_i_ce0 = s_i_ce0_local;

assign shl_ln_fu_224_p3 = {{i_reg_338}, {1'd0}};

assign t_78_address0 = zext_ln38_2_fu_290_p1;

assign t_78_address1 = zext_ln38_fu_231_p1;

assign t_78_ce0 = t_78_ce0_local;

assign t_78_ce1 = t_78_ce1_local;

assign t_78_d0 = {{s_i_q0[47:40]}};

assign t_78_d1 = {{s_i_q0[15:8]}};

assign t_78_we0 = t_78_we0_local;

assign t_78_we1 = t_78_we1_local;

assign t_79_address0 = zext_ln38_2_fu_290_p1;

assign t_79_address1 = zext_ln38_fu_231_p1;

assign t_79_ce0 = t_79_ce0_local;

assign t_79_ce1 = t_79_ce1_local;

assign t_79_d0 = {{s_i_q0[55:48]}};

assign t_79_d1 = {{s_i_q0[23:16]}};

assign t_79_we0 = t_79_we0_local;

assign t_79_we1 = t_79_we1_local;

assign t_80_address0 = zext_ln38_2_fu_290_p1;

assign t_80_address1 = zext_ln38_fu_231_p1;

assign t_80_ce0 = t_80_ce0_local;

assign t_80_ce1 = t_80_ce1_local;

assign t_80_d0 = {{s_i_q0[63:56]}};

assign t_80_d1 = {{s_i_q0[31:24]}};

assign t_80_we0 = t_80_we0_local;

assign t_80_we1 = t_80_we1_local;

assign t_address0 = zext_ln38_2_fu_290_p1;

assign t_address1 = zext_ln38_fu_231_p1;

assign t_ce0 = t_ce0_local;

assign t_ce1 = t_ce1_local;

assign t_d0 = {{s_i_q0[39:32]}};

assign t_d1 = trunc_ln38_fu_219_p1;

assign t_we0 = t_we0_local;

assign t_we1 = t_we1_local;

assign trunc_ln38_fu_219_p1 = s_i_q0[7:0];

assign zext_ln379_fu_209_p1 = ap_sig_allocacmp_i;

assign zext_ln38_2_fu_290_p1 = or_ln38_fu_283_p3;

assign zext_ln38_fu_231_p1 = shl_ln_fu_224_p3;

endmodule //sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_377_2
