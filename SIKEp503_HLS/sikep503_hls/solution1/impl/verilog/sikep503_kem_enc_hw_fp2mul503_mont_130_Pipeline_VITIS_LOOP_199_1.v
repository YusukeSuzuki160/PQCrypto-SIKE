// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fp2mul503_mont_130_Pipeline_VITIS_LOOP_199_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tt3_address0,
        tt3_ce0,
        tt3_we0,
        tt3_d0,
        tt3_q0,
        sext_ln191
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] tt3_address0;
output   tt3_ce0;
output   tt3_we0;
output  [63:0] tt3_d0;
input  [63:0] tt3_q0;
input  [0:0] sext_ln191;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [0:0] icmp_ln199_fu_133_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] p503_1_address0;
wire   [63:0] p503_1_q0;
reg   [0:0] borrow_reg_96;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] sext_ln191_cast_fu_107_p3;
reg   [63:0] sext_ln191_cast_reg_304;
reg   [3:0] i_reg_309;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln199_reg_314;
reg   [0:0] icmp_ln199_reg_314_pp0_iter1_reg;
reg   [3:0] tt3_addr_reg_318;
reg   [3:0] tt3_addr_reg_318_pp0_iter1_reg;
wire   [0:0] addr_cmp_fu_164_p2;
reg   [0:0] addr_cmp_reg_323;
reg   [63:0] tt3_load_reg_333;
wire   [63:0] and_ln200_fu_180_p2;
reg   [63:0] and_ln200_reg_338;
wire   [63:0] reuse_select_fu_193_p3;
reg   [63:0] reuse_select_reg_344;
wire   [63:0] tempReg_fu_203_p2;
reg   [63:0] tempReg_reg_349;
reg    ap_condition_exit_pp0_iter1_stage1;
wire    ap_block_pp0_stage0_subdone;
wire    ap_loop_init;
wire   [31:0] zext_ln200_38_fu_156_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] zext_ln200_fu_143_p1;
reg   [31:0] reuse_addr_reg_fu_52;
reg   [63:0] reuse_reg_fu_56;
wire   [63:0] add_ln200_fu_209_p2;
reg   [3:0] i_233_fu_60;
wire   [3:0] add_ln199_fu_175_p2;
reg    tt3_ce0_local;
reg   [3:0] tt3_address0_local;
reg    tt3_we0_local;
wire    ap_block_pp0_stage0;
reg    p503_1_ce0_local;
wire   [2:0] trunc_ln200_fu_139_p1;
wire   [3:0] zext_ln200_39_cast_fu_148_p3;
wire   [63:0] zext_ln200_39_fu_199_p1;
wire   [63:0] xor_ln200_fu_219_p2;
wire   [63:0] xor_ln200_34_fu_224_p2;
wire   [0:0] bit_sel4_fu_234_p3;
wire   [0:0] xor_ln200_40_fu_241_p2;
wire   [62:0] trunc_ln200_22_fu_247_p1;
wire   [63:0] xor_ln200_s_fu_250_p3;
wire   [63:0] or_ln200_fu_228_p2;
wire   [63:0] xor_ln200_36_fu_263_p2;
wire   [63:0] and_ln200_12_fu_258_p2;
wire   [63:0] or_ln200_12_fu_269_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_318;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 reuse_addr_reg_fu_52 = 32'd0;
#0 reuse_reg_fu_56 = 64'd0;
#0 i_233_fu_60 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_78_1_p503_1_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
p503_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p503_1_address0),
    .ce0(p503_1_ce0_local),
    .q0(p503_1_q0)
);

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_318)) begin
            borrow_reg_96 <= or_ln200_12_fu_269_p2[32'd63];
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            borrow_reg_96 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_233_fu_60 <= 4'd0;
        end else if (((icmp_ln199_reg_314 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_233_fu_60 <= add_ln199_fu_175_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
                reuse_addr_reg_fu_52[0] <= 1'b1;
        reuse_addr_reg_fu_52[1] <= 1'b1;
        reuse_addr_reg_fu_52[2] <= 1'b1;
        reuse_addr_reg_fu_52[4] <= 1'b1;
        reuse_addr_reg_fu_52[5] <= 1'b1;
        reuse_addr_reg_fu_52[6] <= 1'b1;
        reuse_addr_reg_fu_52[7] <= 1'b1;
        reuse_addr_reg_fu_52[8] <= 1'b1;
        reuse_addr_reg_fu_52[9] <= 1'b1;
        reuse_addr_reg_fu_52[10] <= 1'b1;
        reuse_addr_reg_fu_52[11] <= 1'b1;
        reuse_addr_reg_fu_52[12] <= 1'b1;
        reuse_addr_reg_fu_52[13] <= 1'b1;
        reuse_addr_reg_fu_52[14] <= 1'b1;
        reuse_addr_reg_fu_52[15] <= 1'b1;
        reuse_addr_reg_fu_52[16] <= 1'b1;
        reuse_addr_reg_fu_52[17] <= 1'b1;
        reuse_addr_reg_fu_52[18] <= 1'b1;
        reuse_addr_reg_fu_52[19] <= 1'b1;
        reuse_addr_reg_fu_52[20] <= 1'b1;
        reuse_addr_reg_fu_52[21] <= 1'b1;
        reuse_addr_reg_fu_52[22] <= 1'b1;
        reuse_addr_reg_fu_52[23] <= 1'b1;
        reuse_addr_reg_fu_52[24] <= 1'b1;
        reuse_addr_reg_fu_52[25] <= 1'b1;
        reuse_addr_reg_fu_52[26] <= 1'b1;
        reuse_addr_reg_fu_52[27] <= 1'b1;
        reuse_addr_reg_fu_52[28] <= 1'b1;
        reuse_addr_reg_fu_52[29] <= 1'b1;
        reuse_addr_reg_fu_52[30] <= 1'b1;
        reuse_addr_reg_fu_52[31] <= 1'b1;
    end else if (((icmp_ln199_fu_133_p2 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                reuse_addr_reg_fu_52[2 : 0] <= zext_ln200_38_fu_156_p1[2 : 0];
        reuse_addr_reg_fu_52[31 : 4] <= zext_ln200_38_fu_156_p1[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_56 <= 64'd0;
        end else if (((icmp_ln199_reg_314_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg_fu_56 <= add_ln200_fu_209_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        addr_cmp_reg_323 <= addr_cmp_fu_164_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_reg_309 <= i_233_fu_60;
        icmp_ln199_reg_314 <= icmp_ln199_fu_133_p2;
        icmp_ln199_reg_314_pp0_iter1_reg <= icmp_ln199_reg_314;
        reuse_select_reg_344 <= reuse_select_fu_193_p3;
        tempReg_reg_349 <= tempReg_fu_203_p2;
        tt3_addr_reg_318[2 : 0] <= zext_ln200_38_fu_156_p1[2 : 0];
        tt3_addr_reg_318_pp0_iter1_reg[2 : 0] <= tt3_addr_reg_318[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln200_reg_338 <= and_ln200_fu_180_p2;
        sext_ln191_cast_reg_304 <= sext_ln191_cast_fu_107_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt3_load_reg_333 <= tt3_q0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_133_p2 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_reg_314 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p503_1_ce0_local = 1'b1;
    end else begin
        p503_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt3_address0_local = tt3_addr_reg_318_pp0_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tt3_address0_local = zext_ln200_38_fu_156_p1;
    end else begin
        tt3_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        tt3_ce0_local = 1'b1;
    end else begin
        tt3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_reg_314_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt3_we0_local = 1'b1;
    end else begin
        tt3_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln199_fu_175_p2 = (i_reg_309 + 4'd1);

assign add_ln200_fu_209_p2 = (and_ln200_reg_338 + tempReg_reg_349);

assign addr_cmp_fu_164_p2 = ((reuse_addr_reg_fu_52 == zext_ln200_38_fu_156_p1) ? 1'b1 : 1'b0);

assign and_ln200_12_fu_258_p2 = (xor_ln200_s_fu_250_p3 & reuse_select_reg_344);

assign and_ln200_fu_180_p2 = (sext_ln191_cast_reg_304 & p503_1_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_318 = ((icmp_ln199_reg_314_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign bit_sel4_fu_234_p3 = tempReg_reg_349[64'd63];

assign icmp_ln199_fu_133_p2 = ((i_233_fu_60 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln200_12_fu_269_p2 = (xor_ln200_36_fu_263_p2 | and_ln200_12_fu_258_p2);

assign or_ln200_fu_228_p2 = (xor_ln200_fu_219_p2 | xor_ln200_34_fu_224_p2);

assign p503_1_address0 = zext_ln200_fu_143_p1;

assign reuse_select_fu_193_p3 = ((addr_cmp_reg_323[0:0] == 1'b1) ? reuse_reg_fu_56 : tt3_load_reg_333);

assign sext_ln191_cast_fu_107_p3 = ((sext_ln191[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign tempReg_fu_203_p2 = (reuse_select_fu_193_p3 + zext_ln200_39_fu_199_p1);

assign trunc_ln200_22_fu_247_p1 = tempReg_reg_349[62:0];

assign trunc_ln200_fu_139_p1 = i_233_fu_60[2:0];

assign tt3_address0 = tt3_address0_local;

assign tt3_ce0 = tt3_ce0_local;

assign tt3_d0 = add_ln200_fu_209_p2;

assign tt3_we0 = tt3_we0_local;

assign xor_ln200_34_fu_224_p2 = (tempReg_reg_349 ^ and_ln200_reg_338);

assign xor_ln200_36_fu_263_p2 = (or_ln200_fu_228_p2 ^ add_ln200_fu_209_p2);

assign xor_ln200_40_fu_241_p2 = (bit_sel4_fu_234_p3 ^ 1'd1);

assign xor_ln200_fu_219_p2 = (tempReg_reg_349 ^ add_ln200_fu_209_p2);

assign xor_ln200_s_fu_250_p3 = {{xor_ln200_40_fu_241_p2}, {trunc_ln200_22_fu_247_p1}};

assign zext_ln200_38_fu_156_p1 = zext_ln200_39_cast_fu_148_p3;

assign zext_ln200_39_cast_fu_148_p3 = {{1'd1}, {trunc_ln200_fu_139_p1}};

assign zext_ln200_39_fu_199_p1 = borrow_reg_96;

assign zext_ln200_fu_143_p1 = trunc_ln200_fu_139_p1;

always @ (posedge ap_clk) begin
    tt3_addr_reg_318[3] <= 1'b1;
    tt3_addr_reg_318_pp0_iter1_reg[3] <= 1'b1;
    reuse_addr_reg_fu_52[3] <= 1'b1;
end

endmodule //sikep503_kem_enc_hw_fp2mul503_mont_130_Pipeline_VITIS_LOOP_199_1
