// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fpadd503_76_77_Pipeline_VITIS_LOOP_28_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_0_address0,
        c_0_ce0,
        c_0_we0,
        c_0_d0,
        c_0_address1,
        c_0_ce1,
        c_0_q1,
        c_1_address0,
        c_1_ce0,
        c_1_we0,
        c_1_d0,
        c_1_address1,
        c_1_ce1,
        c_1_q1,
        carry_out,
        carry_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] c_0_address0;
output   c_0_ce0;
output   c_0_we0;
output  [63:0] c_0_d0;
output  [2:0] c_0_address1;
output   c_0_ce1;
input  [63:0] c_0_q1;
output  [2:0] c_1_address0;
output   c_1_ce0;
output   c_1_we0;
output  [63:0] c_1_d0;
output  [2:0] c_1_address1;
output   c_1_ce1;
input  [63:0] c_1_q1;
output  [0:0] carry_out;
output   carry_out_ap_vld;

reg ap_idle;
reg carry_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] p503x2_1_address0;
wire   [63:0] p503x2_1_q0;
reg   [0:0] carry_reg_106;
reg   [3:0] i_reg_267;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln28_reg_273;
reg   [0:0] icmp_ln28_reg_273_pp0_iter1_reg;
reg   [0:0] icmp_ln28_reg_273_pp0_iter2_reg;
reg   [2:0] c_0_addr_reg_277;
reg   [2:0] c_0_addr_reg_277_pp0_iter1_reg;
reg   [2:0] c_0_addr_reg_277_pp0_iter2_reg;
reg   [2:0] c_1_addr_reg_283;
reg   [2:0] c_1_addr_reg_283_pp0_iter1_reg;
reg   [2:0] c_1_addr_reg_283_pp0_iter2_reg;
wire   [0:0] trunc_ln28_fu_160_p1;
reg   [0:0] trunc_ln28_reg_289;
reg   [0:0] trunc_ln28_reg_289_pp0_iter2_reg;
wire   [63:0] select_ln29_fu_166_p3;
reg   [63:0] select_ln29_reg_293;
wire   [63:0] tempReg_fu_179_p2;
reg   [63:0] tempReg_reg_305;
reg   [0:0] tmp_reg_312;
wire   [0:0] carry_61_fu_244_p2;
reg    ap_condition_exit_pp0_iter2_stage0;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
wire   [31:0] zext_ln29_6_fu_149_p1;
wire   [31:0] zext_ln29_7_fu_174_p1;
reg   [3:0] i_129_fu_48;
wire   [3:0] add_ln28_fu_133_p2;
reg   [3:0] ap_sig_allocacmp_i;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
wire    ap_block_pp0_stage0_01001;
reg    c_0_ce1_local;
reg    c_0_we0_local;
wire   [63:0] sub_ln29_fu_253_p2;
reg    c_0_ce0_local;
reg    c_1_ce1_local;
reg    c_1_we0_local;
reg    c_1_ce0_local;
reg    p503x2_1_ce0_local;
wire   [1:0] lshr_ln20_1_fu_139_p4;
wire   [2:0] trunc_ln28_1_fu_163_p1;
wire   [63:0] xor_ln105_92_fu_189_p2;
wire   [63:0] xor_ln105_fu_184_p2;
wire   [63:0] or_ln105_fu_195_p2;
wire   [63:0] xor_ln105_93_fu_201_p2;
wire   [63:0] sub_ln95_fu_214_p2;
wire   [63:0] or_ln95_fu_219_p2;
wire   [0:0] tmp_202_fu_224_p3;
wire   [0:0] xor_ln29_fu_232_p2;
wire   [0:0] and_ln29_fu_238_p2;
wire   [63:0] zext_ln29_fu_249_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i_129_fu_48 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_fpadd503_149_3_Pipeline_VITIS_LOOP_28_2_p503x2_1_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
p503x2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p503x2_1_address0),
    .ce0(p503x2_1_ce0_local),
    .q0(p503x2_1_q0)
);

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        carry_reg_106 <= 1'd0;
    end else if (((icmp_ln28_reg_273_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        carry_reg_106 <= carry_61_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_129_fu_48 <= add_ln28_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_129_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        c_0_addr_reg_277[1 : 0] <= zext_ln29_6_fu_149_p1[1 : 0];
        c_0_addr_reg_277_pp0_iter1_reg[1 : 0] <= c_0_addr_reg_277[1 : 0];
        c_1_addr_reg_283[1 : 0] <= zext_ln29_6_fu_149_p1[1 : 0];
        c_1_addr_reg_283_pp0_iter1_reg[1 : 0] <= c_1_addr_reg_283[1 : 0];
        i_reg_267 <= ap_sig_allocacmp_i;
        icmp_ln28_reg_273 <= icmp_ln28_fu_127_p2;
        icmp_ln28_reg_273_pp0_iter1_reg <= icmp_ln28_reg_273;
        select_ln29_reg_293 <= select_ln29_fu_166_p3;
        trunc_ln28_reg_289 <= trunc_ln28_fu_160_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        c_0_addr_reg_277_pp0_iter2_reg[1 : 0] <= c_0_addr_reg_277_pp0_iter1_reg[1 : 0];
        c_1_addr_reg_283_pp0_iter2_reg[1 : 0] <= c_1_addr_reg_283_pp0_iter1_reg[1 : 0];
        icmp_ln28_reg_273_pp0_iter2_reg <= icmp_ln28_reg_273_pp0_iter1_reg;
        tempReg_reg_305 <= tempReg_fu_179_p2;
        tmp_reg_312 <= xor_ln105_93_fu_201_p2[32'd63];
        trunc_ln28_reg_289_pp0_iter2_reg <= trunc_ln28_reg_289;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_273_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_129_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        c_0_ce0_local = 1'b1;
    end else begin
        c_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_ce1_local = 1'b1;
    end else begin
        c_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln28_reg_289_pp0_iter2_reg == 1'd0))) begin
        c_0_we0_local = 1'b1;
    end else begin
        c_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        c_1_ce0_local = 1'b1;
    end else begin
        c_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_1_ce1_local = 1'b1;
    end else begin
        c_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln28_reg_289_pp0_iter2_reg == 1'd1))) begin
        c_1_we0_local = 1'b1;
    end else begin
        c_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_273_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        carry_out_ap_vld = 1'b1;
    end else begin
        carry_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p503x2_1_ce0_local = 1'b1;
    end else begin
        p503x2_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_133_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln29_fu_238_p2 = (xor_ln29_fu_232_p2 & carry_reg_106);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign c_0_address0 = c_0_addr_reg_277_pp0_iter2_reg;

assign c_0_address1 = zext_ln29_6_fu_149_p1;

assign c_0_ce0 = c_0_ce0_local;

assign c_0_ce1 = c_0_ce1_local;

assign c_0_d0 = sub_ln29_fu_253_p2;

assign c_0_we0 = c_0_we0_local;

assign c_1_address0 = c_1_addr_reg_283_pp0_iter2_reg;

assign c_1_address1 = zext_ln29_6_fu_149_p1;

assign c_1_ce0 = c_1_ce0_local;

assign c_1_ce1 = c_1_ce1_local;

assign c_1_d0 = sub_ln29_fu_253_p2;

assign c_1_we0 = c_1_we0_local;

assign carry_61_fu_244_p2 = (tmp_reg_312 | and_ln29_fu_238_p2);

assign carry_out = carry_reg_106;

assign icmp_ln28_fu_127_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln20_1_fu_139_p4 = {{ap_sig_allocacmp_i[2:1]}};

assign or_ln105_fu_195_p2 = (xor_ln105_fu_184_p2 | xor_ln105_92_fu_189_p2);

assign or_ln95_fu_219_p2 = (tempReg_reg_305 | sub_ln95_fu_214_p2);

assign p503x2_1_address0 = zext_ln29_7_fu_174_p1;

assign select_ln29_fu_166_p3 = ((trunc_ln28_fu_160_p1[0:0] == 1'b1) ? c_1_q1 : c_0_q1);

assign sub_ln29_fu_253_p2 = (tempReg_reg_305 - zext_ln29_fu_249_p1);

assign sub_ln95_fu_214_p2 = (64'd0 - tempReg_reg_305);

assign tempReg_fu_179_p2 = (select_ln29_reg_293 - p503x2_1_q0);

assign tmp_202_fu_224_p3 = or_ln95_fu_219_p2[32'd63];

assign trunc_ln28_1_fu_163_p1 = i_reg_267[2:0];

assign trunc_ln28_fu_160_p1 = i_reg_267[0:0];

assign xor_ln105_92_fu_189_p2 = (tempReg_fu_179_p2 ^ p503x2_1_q0);

assign xor_ln105_93_fu_201_p2 = (select_ln29_reg_293 ^ or_ln105_fu_195_p2);

assign xor_ln105_fu_184_p2 = (select_ln29_reg_293 ^ p503x2_1_q0);

assign xor_ln29_fu_232_p2 = (tmp_202_fu_224_p3 ^ 1'd1);

assign zext_ln29_6_fu_149_p1 = lshr_ln20_1_fu_139_p4;

assign zext_ln29_7_fu_174_p1 = trunc_ln28_1_fu_163_p1;

assign zext_ln29_fu_249_p1 = carry_reg_106;

always @ (posedge ap_clk) begin
    c_0_addr_reg_277[2] <= 1'b0;
    c_0_addr_reg_277_pp0_iter1_reg[2] <= 1'b0;
    c_0_addr_reg_277_pp0_iter2_reg[2] <= 1'b0;
    c_1_addr_reg_283[2] <= 1'b0;
    c_1_addr_reg_283_pp0_iter1_reg[2] <= 1'b0;
    c_1_addr_reg_283_pp0_iter2_reg[2] <= 1'b0;
end

endmodule //sikep503_kem_enc_hw_fpadd503_76_77_Pipeline_VITIS_LOOP_28_2
