// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fp2mul503_mont_78_1_Pipeline_VITIS_LOOP_349_1143 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        coeff_address0,
        coeff_ce0,
        coeff_q0,
        coeff_address1,
        coeff_ce1,
        coeff_q1,
        t2_address0,
        t2_ce0,
        t2_we0,
        t2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] coeff_address0;
output   coeff_ce0;
input  [63:0] coeff_q0;
output  [5:0] coeff_address1;
output   coeff_ce1;
input  [63:0] coeff_q1;
output  [2:0] t2_address0;
output   t2_ce0;
output   t2_we0;
output  [63:0] t2_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln349_reg_252;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] carry_reg_92;
wire   [0:0] icmp_ln349_fu_111_p2;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] trunc_ln350_fu_123_p1;
reg   [2:0] trunc_ln350_reg_256;
reg   [63:0] coeff_load_reg_271;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] tempReg_fu_166_p2;
reg   [63:0] tempReg_reg_276;
reg   [63:0] coeff_load_8_reg_285;
wire    ap_block_pp0_stage0_subdone;
wire    ap_loop_init;
wire   [31:0] zext_ln350_fu_139_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln350_52_fu_152_p1;
wire   [31:0] zext_ln350_51_fu_177_p1;
reg   [3:0] i_186_fu_50;
wire   [3:0] add_ln349_fu_117_p2;
reg   [3:0] ap_sig_allocacmp_i;
reg    coeff_ce1_local;
reg    coeff_ce0_local;
reg    t2_we0_local;
wire   [63:0] add_ln350_fu_172_p2;
reg    t2_ce0_local;
wire   [4:0] zext_ln350_47_fu_127_p1;
wire   [5:0] zext_ln350_s_fu_131_p3;
wire   [5:0] zext_ln350_1_fu_144_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln350_49_fu_162_p1;
wire   [63:0] xor_ln350_75_fu_181_p2;
wire   [63:0] xor_ln350_76_fu_186_p2;
wire   [0:0] bit_sel1_fu_196_p3;
wire   [0:0] xor_ln350_fu_203_p2;
wire   [62:0] trunc_ln350_38_fu_209_p1;
wire   [63:0] xor_ln350_s_fu_212_p3;
wire   [63:0] or_ln350_fu_190_p2;
wire   [63:0] xor_ln350_78_fu_225_p2;
wire   [63:0] and_ln350_fu_220_p2;
wire   [63:0] or_ln350_32_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_277;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_186_fu_50 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            carry_reg_92 <= 1'd0;
        end else if ((1'b1 == ap_condition_277)) begin
            carry_reg_92 <= or_ln350_32_fu_231_p2[32'd63];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln349_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_186_fu_50 <= add_ln349_fu_117_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_186_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        coeff_load_8_reg_285 <= coeff_q0;
        coeff_load_reg_271 <= coeff_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln349_reg_252 <= icmp_ln349_fu_111_p2;
        trunc_ln350_reg_256 <= trunc_ln350_fu_123_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tempReg_reg_276 <= tempReg_fu_166_p2;
    end
end

always @ (*) begin
    if (((icmp_ln349_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_186_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coeff_ce0_local = 1'b1;
    end else begin
        coeff_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coeff_ce1_local = 1'b1;
    end else begin
        coeff_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t2_ce0_local = 1'b1;
    end else begin
        t2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln349_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t2_we0_local = 1'b1;
    end else begin
        t2_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln349_fu_117_p2 = (ap_sig_allocacmp_i + 4'd1);

assign add_ln350_fu_172_p2 = (coeff_load_8_reg_285 + tempReg_reg_276);

assign and_ln350_fu_220_p2 = (xor_ln350_s_fu_212_p3 & coeff_load_reg_271);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_277 = ((icmp_ln349_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign bit_sel1_fu_196_p3 = tempReg_reg_276[64'd63];

assign coeff_address0 = zext_ln350_52_fu_152_p1;

assign coeff_address1 = zext_ln350_fu_139_p1;

assign coeff_ce0 = coeff_ce0_local;

assign coeff_ce1 = coeff_ce1_local;

assign icmp_ln349_fu_111_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign or_ln350_32_fu_231_p2 = (xor_ln350_78_fu_225_p2 | and_ln350_fu_220_p2);

assign or_ln350_fu_190_p2 = (xor_ln350_76_fu_186_p2 | xor_ln350_75_fu_181_p2);

assign t2_address0 = zext_ln350_51_fu_177_p1;

assign t2_ce0 = t2_ce0_local;

assign t2_d0 = add_ln350_fu_172_p2;

assign t2_we0 = t2_we0_local;

assign tempReg_fu_166_p2 = (coeff_q1 + zext_ln350_49_fu_162_p1);

assign trunc_ln350_38_fu_209_p1 = tempReg_reg_276[62:0];

assign trunc_ln350_fu_123_p1 = ap_sig_allocacmp_i[2:0];

assign xor_ln350_75_fu_181_p2 = (tempReg_reg_276 ^ add_ln350_fu_172_p2);

assign xor_ln350_76_fu_186_p2 = (tempReg_reg_276 ^ coeff_load_8_reg_285);

assign xor_ln350_78_fu_225_p2 = (or_ln350_fu_190_p2 ^ add_ln350_fu_172_p2);

assign xor_ln350_fu_203_p2 = (bit_sel1_fu_196_p3 ^ 1'd1);

assign xor_ln350_s_fu_212_p3 = {{xor_ln350_fu_203_p2}, {trunc_ln350_38_fu_209_p1}};

assign zext_ln350_1_fu_144_p3 = {{3'd5}, {trunc_ln350_fu_123_p1}};

assign zext_ln350_47_fu_127_p1 = trunc_ln350_fu_123_p1;

assign zext_ln350_49_fu_162_p1 = carry_reg_92;

assign zext_ln350_51_fu_177_p1 = trunc_ln350_reg_256;

assign zext_ln350_52_fu_152_p1 = zext_ln350_1_fu_144_p3;

assign zext_ln350_fu_139_p1 = zext_ln350_s_fu_131_p3;

assign zext_ln350_s_fu_131_p3 = {{1'd1}, {zext_ln350_47_fu_127_p1}};

endmodule //sikep503_kem_enc_hw_fp2mul503_mont_78_1_Pipeline_VITIS_LOOP_349_1143
