// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fp2_decode_1_Pipeline_VITIS_LOOP_53_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY,
        m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY,
        m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST,
        m_axi_gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID,
        m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP,
        m_axi_gmem2_0_BID,
        m_axi_gmem2_0_BUSER,
        enc,
        PKB_address0,
        PKB_ce0,
        PKB_we0,
        PKB_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_0_AWVALID;
input   m_axi_gmem2_0_AWREADY;
output  [31:0] m_axi_gmem2_0_AWADDR;
output  [0:0] m_axi_gmem2_0_AWID;
output  [31:0] m_axi_gmem2_0_AWLEN;
output  [2:0] m_axi_gmem2_0_AWSIZE;
output  [1:0] m_axi_gmem2_0_AWBURST;
output  [1:0] m_axi_gmem2_0_AWLOCK;
output  [3:0] m_axi_gmem2_0_AWCACHE;
output  [2:0] m_axi_gmem2_0_AWPROT;
output  [3:0] m_axi_gmem2_0_AWQOS;
output  [3:0] m_axi_gmem2_0_AWREGION;
output  [0:0] m_axi_gmem2_0_AWUSER;
output   m_axi_gmem2_0_WVALID;
input   m_axi_gmem2_0_WREADY;
output  [7:0] m_axi_gmem2_0_WDATA;
output  [0:0] m_axi_gmem2_0_WSTRB;
output   m_axi_gmem2_0_WLAST;
output  [0:0] m_axi_gmem2_0_WID;
output  [0:0] m_axi_gmem2_0_WUSER;
output   m_axi_gmem2_0_ARVALID;
input   m_axi_gmem2_0_ARREADY;
output  [31:0] m_axi_gmem2_0_ARADDR;
output  [0:0] m_axi_gmem2_0_ARID;
output  [31:0] m_axi_gmem2_0_ARLEN;
output  [2:0] m_axi_gmem2_0_ARSIZE;
output  [1:0] m_axi_gmem2_0_ARBURST;
output  [1:0] m_axi_gmem2_0_ARLOCK;
output  [3:0] m_axi_gmem2_0_ARCACHE;
output  [2:0] m_axi_gmem2_0_ARPROT;
output  [3:0] m_axi_gmem2_0_ARQOS;
output  [3:0] m_axi_gmem2_0_ARREGION;
output  [0:0] m_axi_gmem2_0_ARUSER;
input   m_axi_gmem2_0_RVALID;
output   m_axi_gmem2_0_RREADY;
input  [7:0] m_axi_gmem2_0_RDATA;
input   m_axi_gmem2_0_RLAST;
input  [0:0] m_axi_gmem2_0_RID;
input  [10:0] m_axi_gmem2_0_RFIFONUM;
input  [0:0] m_axi_gmem2_0_RUSER;
input  [1:0] m_axi_gmem2_0_RRESP;
input   m_axi_gmem2_0_BVALID;
output   m_axi_gmem2_0_BREADY;
input  [1:0] m_axi_gmem2_0_BRESP;
input  [0:0] m_axi_gmem2_0_BID;
input  [0:0] m_axi_gmem2_0_BUSER;
input  [31:0] enc;
output  [5:0] PKB_address0;
output   PKB_ce0;
output  [7:0] PKB_we0;
output  [63:0] PKB_d0;

reg ap_idle;
reg m_axi_gmem2_0_ARVALID;
reg[31:0] m_axi_gmem2_0_ARADDR;
reg m_axi_gmem2_0_RREADY;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln53_reg_268;
reg    ap_block_state2_io_grp1;
reg    ap_block_pp0_stage1_subdone_grp1_done_reg;
reg    ap_block_pp0_stage1_subdone_grp1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone_grp3_done_reg;
reg    ap_block_pp0_stage1_subdone_grp3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem2_blk_n_AR;
wire    ap_block_pp0_stage1_grp1;
reg    gmem2_blk_n_R;
wire    ap_block_pp0_stage1_grp3;
wire    ap_block_pp0_stage0_grp2;
reg    ap_block_pp0_stage0_subdone_grp2_done_reg;
reg    ap_block_pp0_stage0_subdone_grp2;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0_grp4;
reg    ap_block_pp0_stage0_subdone_grp4_done_reg;
reg    ap_block_pp0_stage0_subdone_grp4;
reg   [5:0] i_reg_260;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] i_reg_260_pp0_iter1_reg;
reg   [5:0] i_reg_260_pp0_iter2_reg;
reg   [5:0] i_reg_260_pp0_iter3_reg;
reg   [5:0] i_reg_260_pp0_iter4_reg;
wire   [0:0] icmp_ln53_fu_127_p2;
reg   [31:0] gmem2_addr_reg_272;
reg   [31:0] gmem2_addr_2_reg_278;
reg   [7:0] gmem2_addr_read_reg_284;
reg    ap_block_pp0_stage1_11001_grp3;
wire   [7:0] shl_ln55_fu_195_p2;
reg   [7:0] shl_ln55_reg_289;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
wire   [63:0] zext_ln55_4_fu_207_p1;
reg   [63:0] zext_ln55_4_reg_294;
wire   [2:0] lshr_ln_fu_218_p4;
reg   [2:0] lshr_ln_reg_299;
reg   [7:0] gmem2_addr_2_read_reg_304;
reg    ap_block_pp0_stage0_11001_grp4;
wire   [31:0] zext_ln55_5_fu_227_p1;
wire    ap_block_pp0_stage0_grp0;
wire   [31:0] zext_ln56_8_fu_248_p1;
wire    ap_block_pp0_stage1_grp0;
wire   [31:0] add_ln55_fu_141_p2;
wire    ap_block_pp0_stage0;
wire   [31:0] add_ln56_fu_163_p2;
reg    ap_block_pp0_stage1_11001_grp1;
reg    ap_block_pp0_stage0_11001_grp2;
reg   [5:0] i_244_fu_66;
wire   [5:0] add_ln53_fu_175_p2;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
reg    PKB_ce0_local;
reg   [7:0] PKB_we0_local;
reg   [5:0] PKB_address0_local;
reg   [63:0] PKB_d0_local;
wire   [63:0] shl_ln55_4_fu_211_p2;
wire   [63:0] shl_ln56_fu_235_p2;
wire   [31:0] zext_ln49_fu_137_p1;
wire   [6:0] zext_ln53_fu_133_p1;
wire   [6:0] add_ln56_3_fu_153_p2;
wire   [31:0] zext_ln56_6_fu_159_p1;
wire   [2:0] trunc_ln55_fu_188_p1;
wire   [7:0] zext_ln55_3_fu_191_p1;
wire   [5:0] shl_ln55_3_fu_202_p2;
wire   [63:0] zext_ln55_fu_185_p1;
wire   [63:0] zext_ln56_fu_232_p1;
wire   [3:0] zext_ln56_7_fu_241_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_block_pp0_stage1_11001;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_247;
reg    ap_condition_483;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp1_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp3_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp2_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp4_done_reg = 1'b0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 i_244_fu_66 = 6'd0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp2)) begin
                ap_block_pp0_stage0_subdone_grp2_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp4_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp4_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp4)) begin
                ap_block_pp0_stage0_subdone_grp4_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp1)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp3)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_244_fu_66 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (icmp_ln53_reg_268 == 1'd0))) begin
        i_244_fu_66 <= add_ln53_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp4) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg))) begin
        gmem2_addr_2_read_reg_304 <= m_axi_gmem2_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem2_addr_2_reg_278 <= add_ln56_fu_163_p2;
        gmem2_addr_reg_272 <= add_ln55_fu_141_p2;
        i_reg_260 <= ap_sig_allocacmp_i;
        i_reg_260_pp0_iter1_reg <= i_reg_260;
        i_reg_260_pp0_iter2_reg <= i_reg_260_pp0_iter1_reg;
        i_reg_260_pp0_iter3_reg <= i_reg_260_pp0_iter2_reg;
        i_reg_260_pp0_iter4_reg <= i_reg_260_pp0_iter3_reg;
        icmp_ln53_reg_268 <= icmp_ln53_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg))) begin
        gmem2_addr_read_reg_284 <= m_axi_gmem2_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0))) begin
        lshr_ln_reg_299 <= {{i_reg_260_pp0_iter4_reg[5:3]}};
        shl_ln55_reg_289 <= shl_ln55_fu_195_p2;
        zext_ln55_4_reg_294[5 : 0] <= zext_ln55_4_fu_207_p1[5 : 0];
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp0))) begin
            PKB_address0_local = zext_ln56_8_fu_248_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0))) begin
            PKB_address0_local = zext_ln55_5_fu_227_p1;
        end else begin
            PKB_address0_local = 'bx;
        end
    end else begin
        PKB_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0)))) begin
        PKB_ce0_local = 1'b1;
    end else begin
        PKB_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp0))) begin
            PKB_d0_local = shl_ln56_fu_235_p2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_grp0))) begin
            PKB_d0_local = shl_ln55_4_fu_211_p2;
        end else begin
            PKB_d0_local = 'bx;
        end
    end else begin
        PKB_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if ((1'b1 == ap_condition_483)) begin
            PKB_we0_local = shl_ln55_reg_289;
        end else if ((1'b1 == ap_condition_247)) begin
            PKB_we0_local = shl_ln55_fu_195_p2;
        end else begin
            PKB_we0_local = 8'd0;
        end
    end else begin
        PKB_we0_local = 8'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln53_reg_268 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 6'd0;
    end else begin
        ap_sig_allocacmp_i = i_244_fu_66;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (icmp_ln53_reg_268 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg) & (1'b0 == ap_block_pp0_stage0_grp2)))) begin
        gmem2_blk_n_AR = m_axi_gmem2_0_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg) & (1'b0 == ap_block_pp0_stage0_grp4)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)))) begin
        gmem2_blk_n_R = m_axi_gmem2_0_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg))) begin
        m_axi_gmem2_0_ARADDR = gmem2_addr_2_reg_278;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (icmp_ln53_reg_268 == 1'd0))) begin
        m_axi_gmem2_0_ARADDR = gmem2_addr_reg_272;
    end else begin
        m_axi_gmem2_0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (icmp_ln53_reg_268 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp2) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)))) begin
        m_axi_gmem2_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem2_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp4) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)))) begin
        m_axi_gmem2_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem2_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign PKB_address0 = PKB_address0_local;

assign PKB_ce0 = PKB_ce0_local;

assign PKB_d0 = PKB_d0_local;

assign PKB_we0 = PKB_we0_local;

assign add_ln53_fu_175_p2 = (i_reg_260 + 6'd1);

assign add_ln55_fu_141_p2 = (zext_ln49_fu_137_p1 + enc);

assign add_ln56_3_fu_153_p2 = (zext_ln53_fu_133_p1 + 7'd63);

assign add_ln56_fu_163_p2 = (zext_ln56_6_fu_159_p1 + enc);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem2_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)) | ((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg)));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp2 = ((m_axi_gmem2_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp4 = ((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg));
end

assign ap_block_pp0_stage0_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem2_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg)) | ((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg)));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp2 = ((m_axi_gmem2_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp2_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone_grp4 = ((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone_grp4_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)) | ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp3 = ((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)) | ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp1 = ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp3 = ((m_axi_gmem2_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg));
end

always @ (*) begin
    ap_block_state2_io_grp1 = ((m_axi_gmem2_0_ARREADY == 1'b0) & (icmp_ln53_reg_268 == 1'd0));
end

always @ (*) begin
    ap_condition_247 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0));
end

always @ (*) begin
    ap_condition_483 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign icmp_ln53_fu_127_p2 = ((ap_sig_allocacmp_i == 6'd63) ? 1'b1 : 1'b0);

assign lshr_ln_fu_218_p4 = {{i_reg_260_pp0_iter4_reg[5:3]}};

assign m_axi_gmem2_0_ARBURST = 2'd0;

assign m_axi_gmem2_0_ARCACHE = 4'd0;

assign m_axi_gmem2_0_ARID = 1'd0;

assign m_axi_gmem2_0_ARLEN = 32'd1;

assign m_axi_gmem2_0_ARLOCK = 2'd0;

assign m_axi_gmem2_0_ARPROT = 3'd0;

assign m_axi_gmem2_0_ARQOS = 4'd0;

assign m_axi_gmem2_0_ARREGION = 4'd0;

assign m_axi_gmem2_0_ARSIZE = 3'd0;

assign m_axi_gmem2_0_ARUSER = 1'd0;

assign m_axi_gmem2_0_AWADDR = 32'd0;

assign m_axi_gmem2_0_AWBURST = 2'd0;

assign m_axi_gmem2_0_AWCACHE = 4'd0;

assign m_axi_gmem2_0_AWID = 1'd0;

assign m_axi_gmem2_0_AWLEN = 32'd0;

assign m_axi_gmem2_0_AWLOCK = 2'd0;

assign m_axi_gmem2_0_AWPROT = 3'd0;

assign m_axi_gmem2_0_AWQOS = 4'd0;

assign m_axi_gmem2_0_AWREGION = 4'd0;

assign m_axi_gmem2_0_AWSIZE = 3'd0;

assign m_axi_gmem2_0_AWUSER = 1'd0;

assign m_axi_gmem2_0_AWVALID = 1'b0;

assign m_axi_gmem2_0_BREADY = 1'b0;

assign m_axi_gmem2_0_WDATA = 8'd0;

assign m_axi_gmem2_0_WID = 1'd0;

assign m_axi_gmem2_0_WLAST = 1'b0;

assign m_axi_gmem2_0_WSTRB = 1'd0;

assign m_axi_gmem2_0_WUSER = 1'd0;

assign m_axi_gmem2_0_WVALID = 1'b0;

assign shl_ln55_3_fu_202_p2 = i_reg_260_pp0_iter4_reg << 6'd3;

assign shl_ln55_4_fu_211_p2 = zext_ln55_fu_185_p1 << zext_ln55_4_fu_207_p1;

assign shl_ln55_fu_195_p2 = 8'd1 << zext_ln55_3_fu_191_p1;

assign shl_ln56_fu_235_p2 = zext_ln56_fu_232_p1 << zext_ln55_4_reg_294;

assign trunc_ln55_fu_188_p1 = i_reg_260_pp0_iter4_reg[2:0];

assign zext_ln49_fu_137_p1 = ap_sig_allocacmp_i;

assign zext_ln53_fu_133_p1 = ap_sig_allocacmp_i;

assign zext_ln55_3_fu_191_p1 = trunc_ln55_fu_188_p1;

assign zext_ln55_4_fu_207_p1 = shl_ln55_3_fu_202_p2;

assign zext_ln55_5_fu_227_p1 = lshr_ln_fu_218_p4;

assign zext_ln55_fu_185_p1 = gmem2_addr_read_reg_284;

assign zext_ln56_6_fu_159_p1 = add_ln56_3_fu_153_p2;

assign zext_ln56_7_fu_241_p3 = {{1'd1}, {lshr_ln_reg_299}};

assign zext_ln56_8_fu_248_p1 = zext_ln56_7_fu_241_p3;

assign zext_ln56_fu_232_p1 = gmem2_addr_2_read_reg_304;

always @ (posedge ap_clk) begin
    zext_ln55_4_reg_294[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //sikep503_kem_enc_hw_fp2_decode_1_Pipeline_VITIS_LOOP_53_2
