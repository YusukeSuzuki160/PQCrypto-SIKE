// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fpadd503_8_Pipeline_VITIS_LOOP_28_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        R_Z_address0,
        R_Z_ce0,
        R_Z_we0,
        R_Z_d0,
        R_Z_q0,
        carry_151_out,
        carry_151_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] R_Z_address0;
output   R_Z_ce0;
output   R_Z_we0;
output  [63:0] R_Z_d0;
input  [63:0] R_Z_q0;
output  [0:0] carry_151_out;
output   carry_151_out_ap_vld;

reg ap_idle;
reg carry_151_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [0:0] icmp_ln28_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] p503x2_1_address0;
wire   [63:0] p503x2_1_q0;
reg   [0:0] carry_reg_89;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_reg_287;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln28_reg_292;
reg   [0:0] icmp_ln28_reg_292_pp0_iter1_reg;
reg   [3:0] R_Z_addr_reg_296;
reg   [3:0] R_Z_addr_reg_296_pp0_iter1_reg;
wire   [0:0] addr_cmp_fu_146_p2;
reg   [0:0] addr_cmp_reg_301;
reg   [63:0] R_Z_load_reg_311;
reg   [63:0] p503x2_1_load_reg_316;
wire   [63:0] tempReg_fu_181_p2;
reg   [63:0] tempReg_reg_323;
reg   [0:0] tmp_reg_330;
wire   [0:0] borrowReg_fu_246_p2;
reg    ap_condition_exit_pp0_iter1_stage1;
wire    ap_block_pp0_stage0_subdone;
wire    ap_loop_init;
wire   [31:0] zext_ln29_4_fu_138_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] zext_ln29_3_fu_152_p1;
reg   [31:0] reuse_addr_reg_fu_44;
reg   [63:0] reuse_reg_fu_48;
wire   [63:0] sub_ln29_fu_255_p2;
reg   [3:0] i_125_fu_52;
wire   [3:0] add_ln28_fu_162_p2;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage1_01001;
reg    R_Z_ce0_local;
reg   [3:0] R_Z_address0_local;
reg    R_Z_we0_local;
wire    ap_block_pp0_stage0;
reg    p503x2_1_ce0_local;
wire   [2:0] trunc_ln29_fu_126_p1;
wire   [3:0] zext_ln29_2_fu_130_p3;
wire   [63:0] reuse_select_fu_175_p3;
wire   [63:0] xor_ln105_88_fu_191_p2;
wire   [63:0] xor_ln105_fu_186_p2;
wire   [63:0] or_ln105_fu_196_p2;
wire   [63:0] xor_ln105_89_fu_202_p2;
wire   [63:0] sub_ln95_fu_216_p2;
wire   [63:0] or_ln95_fu_221_p2;
wire   [0:0] tmp_198_fu_226_p3;
wire   [0:0] xor_ln29_fu_234_p2;
wire   [0:0] and_ln29_fu_240_p2;
wire   [63:0] zext_ln29_fu_251_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_311;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 reuse_addr_reg_fu_44 = 32'd0;
#0 reuse_reg_fu_48 = 64'd0;
#0 i_125_fu_52 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_fpadd503_149_3_Pipeline_VITIS_LOOP_28_2_p503x2_1_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
p503x2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p503x2_1_address0),
    .ce0(p503x2_1_ce0_local),
    .q0(p503x2_1_q0)
);

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            carry_reg_89 <= 1'd0;
        end else if ((1'b1 == ap_condition_311)) begin
            carry_reg_89 <= borrowReg_fu_246_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_125_fu_52 <= 4'd0;
        end else if (((icmp_ln28_reg_292 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_125_fu_52 <= add_ln28_fu_162_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
                reuse_addr_reg_fu_44[0] <= 1'b1;
        reuse_addr_reg_fu_44[1] <= 1'b1;
        reuse_addr_reg_fu_44[2] <= 1'b1;
        reuse_addr_reg_fu_44[4] <= 1'b1;
        reuse_addr_reg_fu_44[5] <= 1'b1;
        reuse_addr_reg_fu_44[6] <= 1'b1;
        reuse_addr_reg_fu_44[7] <= 1'b1;
        reuse_addr_reg_fu_44[8] <= 1'b1;
        reuse_addr_reg_fu_44[9] <= 1'b1;
        reuse_addr_reg_fu_44[10] <= 1'b1;
        reuse_addr_reg_fu_44[11] <= 1'b1;
        reuse_addr_reg_fu_44[12] <= 1'b1;
        reuse_addr_reg_fu_44[13] <= 1'b1;
        reuse_addr_reg_fu_44[14] <= 1'b1;
        reuse_addr_reg_fu_44[15] <= 1'b1;
        reuse_addr_reg_fu_44[16] <= 1'b1;
        reuse_addr_reg_fu_44[17] <= 1'b1;
        reuse_addr_reg_fu_44[18] <= 1'b1;
        reuse_addr_reg_fu_44[19] <= 1'b1;
        reuse_addr_reg_fu_44[20] <= 1'b1;
        reuse_addr_reg_fu_44[21] <= 1'b1;
        reuse_addr_reg_fu_44[22] <= 1'b1;
        reuse_addr_reg_fu_44[23] <= 1'b1;
        reuse_addr_reg_fu_44[24] <= 1'b1;
        reuse_addr_reg_fu_44[25] <= 1'b1;
        reuse_addr_reg_fu_44[26] <= 1'b1;
        reuse_addr_reg_fu_44[27] <= 1'b1;
        reuse_addr_reg_fu_44[28] <= 1'b1;
        reuse_addr_reg_fu_44[29] <= 1'b1;
        reuse_addr_reg_fu_44[30] <= 1'b1;
        reuse_addr_reg_fu_44[31] <= 1'b1;
    end else if (((icmp_ln28_fu_120_p2 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                reuse_addr_reg_fu_44[2 : 0] <= zext_ln29_4_fu_138_p1[2 : 0];
        reuse_addr_reg_fu_44[31 : 4] <= zext_ln29_4_fu_138_p1[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_48 <= 64'd0;
        end else if (((icmp_ln28_reg_292_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            reuse_reg_fu_48 <= sub_ln29_fu_255_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        R_Z_addr_reg_296[2 : 0] <= zext_ln29_4_fu_138_p1[2 : 0];
        R_Z_addr_reg_296_pp0_iter1_reg[2 : 0] <= R_Z_addr_reg_296[2 : 0];
        addr_cmp_reg_301 <= addr_cmp_fu_146_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_reg_287 <= i_125_fu_52;
        icmp_ln28_reg_292 <= icmp_ln28_fu_120_p2;
        icmp_ln28_reg_292_pp0_iter1_reg <= icmp_ln28_reg_292;
        tempReg_reg_323 <= tempReg_fu_181_p2;
        tmp_reg_330 <= xor_ln105_89_fu_202_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_Z_load_reg_311 <= R_Z_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p503x2_1_load_reg_316 <= p503x2_1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_Z_address0_local = R_Z_addr_reg_296_pp0_iter1_reg;
    end else if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        R_Z_address0_local = zext_ln29_4_fu_138_p1;
    end else begin
        R_Z_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        R_Z_ce0_local = 1'b1;
    end else begin
        R_Z_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_292_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_Z_we0_local = 1'b1;
    end else begin
        R_Z_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_120_p2 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_292 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        carry_151_out_ap_vld = 1'b1;
    end else begin
        carry_151_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p503x2_1_ce0_local = 1'b1;
    end else begin
        p503x2_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R_Z_address0 = R_Z_address0_local;

assign R_Z_ce0 = R_Z_ce0_local;

assign R_Z_d0 = sub_ln29_fu_255_p2;

assign R_Z_we0 = R_Z_we0_local;

assign add_ln28_fu_162_p2 = (i_reg_287 + 4'd1);

assign addr_cmp_fu_146_p2 = ((reuse_addr_reg_fu_44 == zext_ln29_4_fu_138_p1) ? 1'b1 : 1'b0);

assign and_ln29_fu_240_p2 = (xor_ln29_fu_234_p2 & carry_reg_89);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_311 = ((icmp_ln28_reg_292_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign borrowReg_fu_246_p2 = (tmp_reg_330 | and_ln29_fu_240_p2);

assign carry_151_out = carry_reg_89;

assign icmp_ln28_fu_120_p2 = ((i_125_fu_52 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln105_fu_196_p2 = (xor_ln105_fu_186_p2 | xor_ln105_88_fu_191_p2);

assign or_ln95_fu_221_p2 = (tempReg_reg_323 | sub_ln95_fu_216_p2);

assign p503x2_1_address0 = zext_ln29_3_fu_152_p1;

assign reuse_select_fu_175_p3 = ((addr_cmp_reg_301[0:0] == 1'b1) ? reuse_reg_fu_48 : R_Z_load_reg_311);

assign sub_ln29_fu_255_p2 = (tempReg_reg_323 - zext_ln29_fu_251_p1);

assign sub_ln95_fu_216_p2 = (64'd0 - tempReg_reg_323);

assign tempReg_fu_181_p2 = (reuse_select_fu_175_p3 - p503x2_1_load_reg_316);

assign tmp_198_fu_226_p3 = or_ln95_fu_221_p2[32'd63];

assign trunc_ln29_fu_126_p1 = i_125_fu_52[2:0];

assign xor_ln105_88_fu_191_p2 = (tempReg_fu_181_p2 ^ p503x2_1_load_reg_316);

assign xor_ln105_89_fu_202_p2 = (reuse_select_fu_175_p3 ^ or_ln105_fu_196_p2);

assign xor_ln105_fu_186_p2 = (reuse_select_fu_175_p3 ^ p503x2_1_load_reg_316);

assign xor_ln29_fu_234_p2 = (tmp_198_fu_226_p3 ^ 1'd1);

assign zext_ln29_2_fu_130_p3 = {{1'd1}, {trunc_ln29_fu_126_p1}};

assign zext_ln29_3_fu_152_p1 = trunc_ln29_fu_126_p1;

assign zext_ln29_4_fu_138_p1 = zext_ln29_2_fu_130_p3;

assign zext_ln29_fu_251_p1 = carry_reg_89;

always @ (posedge ap_clk) begin
    R_Z_addr_reg_296[3] <= 1'b1;
    R_Z_addr_reg_296_pp0_iter1_reg[3] <= 1'b1;
    reuse_addr_reg_fu_44[3] <= 1'b1;
end

endmodule //sikep503_kem_enc_hw_fpadd503_8_Pipeline_VITIS_LOOP_28_2
