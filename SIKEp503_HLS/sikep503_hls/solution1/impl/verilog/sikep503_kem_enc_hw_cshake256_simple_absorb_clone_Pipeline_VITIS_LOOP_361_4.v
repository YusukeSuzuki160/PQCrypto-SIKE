// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_cshake256_simple_absorb_clone_Pipeline_VITIS_LOOP_361_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_62_address0,
        t_62_ce0,
        t_62_we0,
        t_62_d0,
        t_61_address0,
        t_61_ce0,
        t_61_we0,
        t_61_d0,
        t_60_address0,
        t_60_ce0,
        t_60_we0,
        t_60_d0,
        t_address0,
        t_ce0,
        t_we0,
        t_d0,
        in_r_address0,
        in_r_ce0,
        in_r_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] t_62_address0;
output   t_62_ce0;
output   t_62_we0;
output  [7:0] t_62_d0;
output  [5:0] t_61_address0;
output   t_61_ce0;
output   t_61_we0;
output  [7:0] t_61_d0;
output  [5:0] t_60_address0;
output   t_60_ce0;
output   t_60_we0;
output  [7:0] t_60_d0;
output  [5:0] t_address0;
output   t_ce0;
output   t_we0;
output  [7:0] t_d0;
output  [6:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln361_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] trunc_ln361_fu_139_p1;
reg   [1:0] trunc_ln361_reg_180;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] lshr_ln346_1_reg_184;
wire   [31:0] zext_ln362_fu_153_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln362_1_fu_163_p1;
reg   [6:0] i_246_fu_46;
wire   [6:0] i_279_fu_133_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i;
reg    in_r_ce0_local;
reg    t_61_we0_local;
reg    t_61_ce0_local;
reg    t_60_we0_local;
reg    t_60_ce0_local;
reg    t_we0_local;
reg    t_ce0_local;
reg    t_62_we0_local;
reg    t_62_ce0_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_246_fu_46 = 7'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln361_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_246_fu_46 <= i_279_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_246_fu_46 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln346_1_reg_184 <= {{ap_sig_allocacmp_i[6:2]}};
        trunc_ln361_reg_180 <= trunc_ln361_fu_139_p1;
    end
end

always @ (*) begin
    if (((icmp_ln361_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 7'd0;
    end else begin
        ap_sig_allocacmp_i = i_246_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_r_ce0_local = 1'b1;
    end else begin
        in_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_60_ce0_local = 1'b1;
    end else begin
        t_60_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln361_reg_180 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_60_we0_local = 1'b1;
    end else begin
        t_60_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_61_ce0_local = 1'b1;
    end else begin
        t_61_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln361_reg_180 == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_61_we0_local = 1'b1;
    end else begin
        t_61_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_62_ce0_local = 1'b1;
    end else begin
        t_62_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln361_reg_180 == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_62_we0_local = 1'b1;
    end else begin
        t_62_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce0_local = 1'b1;
    end else begin
        t_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln361_reg_180 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_we0_local = 1'b1;
    end else begin
        t_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_279_fu_133_p2 = (ap_sig_allocacmp_i + 7'd1);

assign icmp_ln361_fu_127_p2 = ((ap_sig_allocacmp_i == 7'd126) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln362_fu_153_p1;

assign in_r_ce0 = in_r_ce0_local;

assign t_60_address0 = zext_ln362_1_fu_163_p1;

assign t_60_ce0 = t_60_ce0_local;

assign t_60_d0 = in_r_q0;

assign t_60_we0 = t_60_we0_local;

assign t_61_address0 = zext_ln362_1_fu_163_p1;

assign t_61_ce0 = t_61_ce0_local;

assign t_61_d0 = in_r_q0;

assign t_61_we0 = t_61_we0_local;

assign t_62_address0 = zext_ln362_1_fu_163_p1;

assign t_62_ce0 = t_62_ce0_local;

assign t_62_d0 = in_r_q0;

assign t_62_we0 = t_62_we0_local;

assign t_address0 = zext_ln362_1_fu_163_p1;

assign t_ce0 = t_ce0_local;

assign t_d0 = in_r_q0;

assign t_we0 = t_we0_local;

assign trunc_ln361_fu_139_p1 = ap_sig_allocacmp_i[1:0];

assign zext_ln362_1_fu_163_p1 = lshr_ln346_1_reg_184;

assign zext_ln362_fu_153_p1 = ap_sig_allocacmp_i;

endmodule //sikep503_kem_enc_hw_cshake256_simple_absorb_clone_Pipeline_VITIS_LOOP_361_4
