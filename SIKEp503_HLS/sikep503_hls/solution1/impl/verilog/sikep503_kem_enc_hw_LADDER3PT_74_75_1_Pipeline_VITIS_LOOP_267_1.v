// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_LADDER3PT_74_75_1_Pipeline_VITIS_LOOP_267_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        R2_X_address0,
        R2_X_ce0,
        R2_X_we0,
        R2_X_d0,
        R2_X_q0,
        R2_X_2_address0,
        R2_X_2_ce0,
        R2_X_2_we0,
        R2_X_2_d0,
        R2_X_2_q0,
        R2_Z_address0,
        R2_Z_ce0,
        R2_Z_we0,
        R2_Z_d0,
        R2_Z_q0,
        R2_Z_2_address0,
        R2_Z_2_ce0,
        R2_Z_2_we0,
        R2_Z_2_d0,
        R2_Z_2_q0,
        R_X_address0,
        R_X_ce0,
        R_X_we0,
        R_X_d0,
        R_X_q0,
        R_X_address1,
        R_X_ce1,
        R_X_we1,
        R_X_d1,
        R_X_q1,
        sext_ln288,
        R_Z_address0,
        R_Z_ce0,
        R_Z_we0,
        R_Z_d0,
        R_Z_q0,
        R_Z_address1,
        R_Z_ce1,
        R_Z_we1,
        R_Z_d1,
        R_Z_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] R2_X_address0;
output   R2_X_ce0;
output   R2_X_we0;
output  [63:0] R2_X_d0;
input  [63:0] R2_X_q0;
output  [2:0] R2_X_2_address0;
output   R2_X_2_ce0;
output   R2_X_2_we0;
output  [63:0] R2_X_2_d0;
input  [63:0] R2_X_2_q0;
output  [2:0] R2_Z_address0;
output   R2_Z_ce0;
output   R2_Z_we0;
output  [63:0] R2_Z_d0;
input  [63:0] R2_Z_q0;
output  [2:0] R2_Z_2_address0;
output   R2_Z_2_ce0;
output   R2_Z_2_we0;
output  [63:0] R2_Z_2_d0;
input  [63:0] R2_Z_2_q0;
output  [3:0] R_X_address0;
output   R_X_ce0;
output   R_X_we0;
output  [63:0] R_X_d0;
input  [63:0] R_X_q0;
output  [3:0] R_X_address1;
output   R_X_ce1;
output   R_X_we1;
output  [63:0] R_X_d1;
input  [63:0] R_X_q1;
input  [0:0] sext_ln288;
output  [3:0] R_Z_address0;
output   R_Z_ce0;
output   R_Z_we0;
output  [63:0] R_Z_d0;
input  [63:0] R_Z_q0;
output  [3:0] R_Z_address1;
output   R_Z_ce1;
output   R_Z_we1;
output  [63:0] R_Z_d1;
input  [63:0] R_Z_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln267_fu_176_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire   [63:0] sext_ln288_cast_fu_160_p3;
reg   [63:0] sext_ln288_cast_reg_312;
reg   [2:0] R2_X_addr_reg_323;
reg   [2:0] R2_X_2_addr_reg_328;
reg   [2:0] R2_Z_addr_reg_333;
reg   [2:0] R2_Z_2_addr_reg_338;
reg   [3:0] R_X_addr_reg_343;
reg   [3:0] R_Z_addr_reg_348;
reg   [3:0] R_X_addr_4_reg_353;
reg   [3:0] R_Z_addr_9_reg_358;
reg   [63:0] R_X_load_reg_363;
wire    ap_CS_fsm_state2;
reg   [63:0] R2_X_load_reg_369;
reg   [63:0] R_Z_load_reg_375;
reg   [63:0] R_X_load_3_reg_381;
reg   [63:0] R_Z_load_5_reg_387;
reg   [63:0] R2_X_2_load_reg_393;
reg   [63:0] R2_Z_load_reg_399;
reg   [63:0] R2_Z_2_load_reg_405;
wire   [31:0] zext_ln269_fu_192_p1;
wire   [31:0] zext_ln275_fu_210_p1;
reg   [3:0] i_270_fu_48;
wire   [3:0] add_ln267_fu_182_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
reg    R_X_ce1_local;
reg   [3:0] R_X_address1_local;
reg    R_X_ce0_local;
reg   [3:0] R_X_address0_local;
reg    R_X_we1_local;
wire   [63:0] xor_ln270_fu_230_p2;
reg    R_X_we0_local;
wire   [63:0] xor_ln276_fu_251_p2;
reg    R2_X_ce0_local;
reg   [2:0] R2_X_address0_local;
reg    R2_X_we0_local;
wire   [63:0] xor_ln271_fu_236_p2;
reg    R_Z_ce1_local;
reg   [3:0] R_Z_address1_local;
reg    R_Z_ce0_local;
reg   [3:0] R_Z_address0_local;
reg    R_Z_we1_local;
wire   [63:0] xor_ln273_fu_272_p2;
reg    R_Z_we0_local;
wire   [63:0] xor_ln279_fu_293_p2;
reg    R2_X_2_ce0_local;
reg   [2:0] R2_X_2_address0_local;
reg    R2_X_2_we0_local;
wire   [63:0] xor_ln277_fu_257_p2;
reg    R2_Z_ce0_local;
reg   [2:0] R2_Z_address0_local;
reg    R2_Z_we0_local;
wire   [63:0] xor_ln274_fu_278_p2;
reg    R2_Z_2_ce0_local;
reg   [2:0] R2_Z_2_address0_local;
reg    R2_Z_2_we0_local;
wire   [63:0] xor_ln280_fu_299_p2;
wire   [2:0] trunc_ln269_fu_188_p1;
wire   [3:0] zext_ln_fu_202_p3;
wire   [63:0] xor_ln269_fu_221_p2;
wire   [63:0] temp_fu_225_p2;
wire   [63:0] xor_ln275_fu_242_p2;
wire   [63:0] temp_97_fu_246_p2;
wire   [63:0] xor_ln272_fu_263_p2;
wire   [63:0] temp_96_fu_267_p2;
wire   [63:0] xor_ln278_fu_284_p2;
wire   [63:0] temp_98_fu_288_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 i_270_fu_48 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln267_fu_176_p2 == 1'd0)) begin
            i_270_fu_48 <= add_ln267_fu_182_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_270_fu_48 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        R2_X_2_addr_reg_328 <= zext_ln269_fu_192_p1;
        R2_X_addr_reg_323 <= zext_ln269_fu_192_p1;
        R2_Z_2_addr_reg_338 <= zext_ln269_fu_192_p1;
        R2_Z_addr_reg_333 <= zext_ln269_fu_192_p1;
        R_X_addr_4_reg_353[2 : 0] <= zext_ln275_fu_210_p1[2 : 0];
        R_X_addr_reg_343[2 : 0] <= zext_ln269_fu_192_p1[2 : 0];
        R_Z_addr_9_reg_358[2 : 0] <= zext_ln275_fu_210_p1[2 : 0];
        R_Z_addr_reg_348[2 : 0] <= zext_ln269_fu_192_p1[2 : 0];
        sext_ln288_cast_reg_312 <= sext_ln288_cast_fu_160_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        R2_X_2_load_reg_393 <= R2_X_2_q0;
        R2_X_load_reg_369 <= R2_X_q0;
        R2_Z_2_load_reg_405 <= R2_Z_2_q0;
        R2_Z_load_reg_399 <= R2_Z_q0;
        R_X_load_3_reg_381 <= R_X_q0;
        R_X_load_reg_363 <= R_X_q1;
        R_Z_load_5_reg_387 <= R_Z_q0;
        R_Z_load_reg_375 <= R_Z_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_X_2_address0_local = R2_X_2_addr_reg_328;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R2_X_2_address0_local = zext_ln269_fu_192_p1;
    end else begin
        R2_X_2_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R2_X_2_ce0_local = 1'b1;
    end else begin
        R2_X_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_X_2_we0_local = 1'b1;
    end else begin
        R2_X_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_X_address0_local = R2_X_addr_reg_323;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R2_X_address0_local = zext_ln269_fu_192_p1;
    end else begin
        R2_X_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R2_X_ce0_local = 1'b1;
    end else begin
        R2_X_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_X_we0_local = 1'b1;
    end else begin
        R2_X_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_Z_2_address0_local = R2_Z_2_addr_reg_338;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R2_Z_2_address0_local = zext_ln269_fu_192_p1;
    end else begin
        R2_Z_2_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R2_Z_2_ce0_local = 1'b1;
    end else begin
        R2_Z_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_Z_2_we0_local = 1'b1;
    end else begin
        R2_Z_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_Z_address0_local = R2_Z_addr_reg_333;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R2_Z_address0_local = zext_ln269_fu_192_p1;
    end else begin
        R2_Z_address0_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R2_Z_ce0_local = 1'b1;
    end else begin
        R2_Z_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R2_Z_we0_local = 1'b1;
    end else begin
        R2_Z_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_X_address0_local = R_X_addr_4_reg_353;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R_X_address0_local = zext_ln275_fu_210_p1;
    end else begin
        R_X_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_X_address1_local = R_X_addr_reg_343;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R_X_address1_local = zext_ln269_fu_192_p1;
    end else begin
        R_X_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R_X_ce0_local = 1'b1;
    end else begin
        R_X_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R_X_ce1_local = 1'b1;
    end else begin
        R_X_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_X_we0_local = 1'b1;
    end else begin
        R_X_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_X_we1_local = 1'b1;
    end else begin
        R_X_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_Z_address0_local = R_Z_addr_9_reg_358;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R_Z_address0_local = zext_ln275_fu_210_p1;
    end else begin
        R_Z_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_Z_address1_local = R_Z_addr_reg_348;
    end else if (((icmp_ln267_fu_176_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        R_Z_address1_local = zext_ln269_fu_192_p1;
    end else begin
        R_Z_address1_local = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R_Z_ce0_local = 1'b1;
    end else begin
        R_Z_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln267_fu_176_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        R_Z_ce1_local = 1'b1;
    end else begin
        R_Z_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_Z_we0_local = 1'b1;
    end else begin
        R_Z_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        R_Z_we1_local = 1'b1;
    end else begin
        R_Z_we1_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln267_fu_176_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_270_fu_48;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln267_fu_176_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R2_X_2_address0 = R2_X_2_address0_local;

assign R2_X_2_ce0 = R2_X_2_ce0_local;

assign R2_X_2_d0 = xor_ln277_fu_257_p2;

assign R2_X_2_we0 = R2_X_2_we0_local;

assign R2_X_address0 = R2_X_address0_local;

assign R2_X_ce0 = R2_X_ce0_local;

assign R2_X_d0 = xor_ln271_fu_236_p2;

assign R2_X_we0 = R2_X_we0_local;

assign R2_Z_2_address0 = R2_Z_2_address0_local;

assign R2_Z_2_ce0 = R2_Z_2_ce0_local;

assign R2_Z_2_d0 = xor_ln280_fu_299_p2;

assign R2_Z_2_we0 = R2_Z_2_we0_local;

assign R2_Z_address0 = R2_Z_address0_local;

assign R2_Z_ce0 = R2_Z_ce0_local;

assign R2_Z_d0 = xor_ln274_fu_278_p2;

assign R2_Z_we0 = R2_Z_we0_local;

assign R_X_address0 = R_X_address0_local;

assign R_X_address1 = R_X_address1_local;

assign R_X_ce0 = R_X_ce0_local;

assign R_X_ce1 = R_X_ce1_local;

assign R_X_d0 = xor_ln276_fu_251_p2;

assign R_X_d1 = xor_ln270_fu_230_p2;

assign R_X_we0 = R_X_we0_local;

assign R_X_we1 = R_X_we1_local;

assign R_Z_address0 = R_Z_address0_local;

assign R_Z_address1 = R_Z_address1_local;

assign R_Z_ce0 = R_Z_ce0_local;

assign R_Z_ce1 = R_Z_ce1_local;

assign R_Z_d0 = xor_ln279_fu_293_p2;

assign R_Z_d1 = xor_ln273_fu_272_p2;

assign R_Z_we0 = R_Z_we0_local;

assign R_Z_we1 = R_Z_we1_local;

assign add_ln267_fu_182_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln267_fu_176_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign sext_ln288_cast_fu_160_p3 = ((sext_ln288[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign temp_96_fu_267_p2 = (xor_ln272_fu_263_p2 & sext_ln288_cast_reg_312);

assign temp_97_fu_246_p2 = (xor_ln275_fu_242_p2 & sext_ln288_cast_reg_312);

assign temp_98_fu_288_p2 = (xor_ln278_fu_284_p2 & sext_ln288_cast_reg_312);

assign temp_fu_225_p2 = (xor_ln269_fu_221_p2 & sext_ln288_cast_reg_312);

assign trunc_ln269_fu_188_p1 = ap_sig_allocacmp_i[2:0];

assign xor_ln269_fu_221_p2 = (R_X_load_reg_363 ^ R2_X_load_reg_369);

assign xor_ln270_fu_230_p2 = (temp_fu_225_p2 ^ R_X_load_reg_363);

assign xor_ln271_fu_236_p2 = (temp_fu_225_p2 ^ R2_X_load_reg_369);

assign xor_ln272_fu_263_p2 = (R_Z_load_reg_375 ^ R2_Z_load_reg_399);

assign xor_ln273_fu_272_p2 = (temp_96_fu_267_p2 ^ R_Z_load_reg_375);

assign xor_ln274_fu_278_p2 = (temp_96_fu_267_p2 ^ R2_Z_load_reg_399);

assign xor_ln275_fu_242_p2 = (R_X_load_3_reg_381 ^ R2_X_2_load_reg_393);

assign xor_ln276_fu_251_p2 = (temp_97_fu_246_p2 ^ R_X_load_3_reg_381);

assign xor_ln277_fu_257_p2 = (temp_97_fu_246_p2 ^ R2_X_2_load_reg_393);

assign xor_ln278_fu_284_p2 = (R_Z_load_5_reg_387 ^ R2_Z_2_load_reg_405);

assign xor_ln279_fu_293_p2 = (temp_98_fu_288_p2 ^ R_Z_load_5_reg_387);

assign xor_ln280_fu_299_p2 = (temp_98_fu_288_p2 ^ R2_Z_2_load_reg_405);

assign zext_ln269_fu_192_p1 = trunc_ln269_fu_188_p1;

assign zext_ln275_fu_210_p1 = zext_ln_fu_202_p3;

assign zext_ln_fu_202_p3 = {{1'd1}, {trunc_ln269_fu_188_p1}};

always @ (posedge ap_clk) begin
    R_X_addr_reg_343[3] <= 1'b0;
    R_Z_addr_reg_348[3] <= 1'b0;
    R_X_addr_4_reg_353[3] <= 1'b1;
    R_Z_addr_9_reg_358[3] <= 1'b1;
end

endmodule //sikep503_kem_enc_hw_LADDER3PT_74_75_1_Pipeline_VITIS_LOOP_267_1
