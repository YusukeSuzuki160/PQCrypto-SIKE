-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_10_Pipeline_VITIS_LOOP_144_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_017 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln143 : IN STD_LOGIC_VECTOR (3 downto 0);
    indvars_iv31 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    coeff_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    coeff_ce0 : OUT STD_LOGIC;
    coeff_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_114_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_114_out_ap_vld : OUT STD_LOGIC;
    u_89_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_89_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_89_out_o_ap_vld : OUT STD_LOGIC;
    t_out_i : IN STD_LOGIC_VECTOR (3 downto 0);
    t_out_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    t_out_o_ap_vld : OUT STD_LOGIC;
    grp_fu_424_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_424_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_424_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_424_p_ce : OUT STD_LOGIC;
    grp_fu_428_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_428_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_428_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_428_p_ce : OUT STD_LOGIC;
    grp_fu_432_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_432_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_432_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_432_p_ce : OUT STD_LOGIC;
    grp_fu_436_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_436_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_436_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_436_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_10_Pipeline_VITIS_LOOP_144_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln144_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln144_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_660_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_660_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_660_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_660_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_660_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_660_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_183_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_718_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_718_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_273_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_273_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_274_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_274_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_275_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_275_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_275_reg_733_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_502_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_504_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_504_reg_744_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_505_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_505_reg_750_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_506_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_506_reg_755_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_506_reg_755_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_503_reg_760 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_765_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_507_reg_776 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_781 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_781_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_533_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_786 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_786_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_89_out_load_reg_795 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_548_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_800 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln145_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln143_cast_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal u_fu_629_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_114_fu_78 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_209_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal j_fu_82 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln144_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_48 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_ce0_local : STD_LOGIC;
    signal coeff_ce0_local : STD_LOGIC;
    signal trunc_ln145_fu_204_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast_fu_159_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln145_fu_213_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln123_fu_336_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_173_fu_339_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_342_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_174_fu_348_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_333_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_352_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_381_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_239_fu_375_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_fu_388_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_240_fu_378_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_238_fu_372_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_211_fu_398_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_213_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_174_fu_408_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_173_fu_394_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_90_fu_418_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_s_fu_451_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_444_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_468_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_437_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_51_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_52_fu_498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_516_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln58_fu_526_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_184_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_31_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_53_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln147_fu_590_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln147_s_fu_593_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_21_fu_571_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_33_fu_606_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln147_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_22_fu_611_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_fu_625_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    j_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln144_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_82 <= add_ln144_fu_198_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_82 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v_114_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    v_114_fu_78 <= v_017;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    v_114_fu_78 <= v_209_fu_474_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_771 <= add_ln105_fu_412_p2;
                    add_ln133_reg_781(63 downto 32) <= add_ln133_fu_462_p2(63 downto 32);
                    add_ln133_reg_781_pp0_iter7_reg(63 downto 32) <= add_ln133_reg_781(63 downto 32);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln144_reg_660_pp0_iter2_reg <= icmp_ln144_reg_660_pp0_iter1_reg;
                icmp_ln144_reg_660_pp0_iter3_reg <= icmp_ln144_reg_660_pp0_iter2_reg;
                icmp_ln144_reg_660_pp0_iter4_reg <= icmp_ln144_reg_660_pp0_iter3_reg;
                icmp_ln144_reg_660_pp0_iter5_reg <= icmp_ln144_reg_660_pp0_iter4_reg;
                icmp_ln144_reg_660_pp0_iter6_reg <= icmp_ln144_reg_660_pp0_iter5_reg;
                tempReg_reg_786 <= tempReg_fu_533_p2;
                tempReg_reg_786_pp0_iter7_reg <= tempReg_reg_786;
                tmp_502_reg_739 <= grp_fu_424_p_dout0(63 downto 32);
                tmp_503_reg_760 <= temp_fu_352_p2(33 downto 32);
                tmp_504_reg_744 <= grp_fu_432_p_dout0(63 downto 32);
                tmp_504_reg_744_pp0_iter4_reg <= tmp_504_reg_744;
                tmp_505_reg_750 <= grp_fu_428_p_dout0(63 downto 32);
                tmp_505_reg_750_pp0_iter4_reg <= tmp_505_reg_750;
                tmp_506_reg_755 <= grp_fu_436_p_dout0(63 downto 32);
                tmp_506_reg_755_pp0_iter4_reg <= tmp_506_reg_755;
                tmp_506_reg_755_pp0_iter5_reg <= tmp_506_reg_755_pp0_iter4_reg;
                tmp_507_reg_776 <= temp_90_fu_418_p2(33 downto 32);
                trunc_ln106_273_reg_723 <= trunc_ln106_273_fu_281_p1;
                trunc_ln106_274_reg_728 <= trunc_ln106_274_fu_285_p1;
                trunc_ln106_275_reg_733 <= trunc_ln106_275_fu_289_p1;
                trunc_ln106_275_reg_733_pp0_iter4_reg <= trunc_ln106_275_reg_733;
                trunc_ln106_reg_718 <= trunc_ln106_fu_277_p1;
                trunc_ln106_reg_718_pp0_iter4_reg <= trunc_ln106_reg_718;
                trunc_ln106_reg_718_pp0_iter5_reg <= trunc_ln106_reg_718_pp0_iter4_reg;
                trunc_ln125_reg_765 <= trunc_ln125_fu_368_p1;
                trunc_ln125_reg_765_pp0_iter5_reg <= trunc_ln125_reg_765;
                u_89_out_load_reg_795 <= u_89_out_i;
                v_reg_800 <= v_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_684 <= a_q0(63 downto 32);
                al_reg_674 <= al_fu_229_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_689 <= coeff_q0(63 downto 32);
                bl_reg_679 <= bl_fu_233_p1;
                icmp_ln144_reg_660 <= icmp_ln144_fu_192_p2;
                icmp_ln144_reg_660_pp0_iter1_reg <= icmp_ln144_reg_660;
            end if;
        end if;
    end process;
    add_ln133_reg_781(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_781_pp0_iter7_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln145_fu_208_p1(4 - 1 downto 0);
    a_ce0 <= a_ce0_local;

    a_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce0_local <= ap_const_logic_1;
        else 
            a_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_412_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_404_p1) + unsigned(add_ln130_213_fu_384_p2));
    add_ln123_fu_342_p2 <= std_logic_vector(unsigned(zext_ln123_fu_336_p1) + unsigned(zext_ln123_173_fu_339_p1));
    add_ln130_211_fu_398_p2 <= std_logic_vector(unsigned(zext_ln106_240_fu_378_p1) + unsigned(zext_ln106_238_fu_372_p1));
    add_ln130_213_fu_384_p2 <= std_logic_vector(unsigned(trunc_ln106_275_reg_733_pp0_iter4_reg) + unsigned(tmp_504_reg_744_pp0_iter4_reg));
    add_ln130_fu_388_p2 <= std_logic_vector(unsigned(zext_ln130_fu_381_p1) + unsigned(zext_ln106_239_fu_375_p1));
    add_ln133_fu_462_p2 <= std_logic_vector(unsigned(zext_ln133_fu_458_p1) + unsigned(and_ln_fu_444_p3));
    add_ln144_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_48) + unsigned(ap_const_lv4_1));
    al_fu_229_p1 <= a_q0(32 - 1 downto 0);
    and_ln133_s_fu_451_p3 <= (tmp_507_reg_776 & ap_const_lv32_0);
    and_ln147_fu_601_p2 <= (xor_ln147_s_fu_593_p3 and add_ln133_reg_781_pp0_iter7_reg);
    and_ln_fu_444_p3 <= (tmp_506_reg_755_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln144_fu_192_p2)
    begin
        if (((icmp_ln144_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter7_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_48_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_48 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_48 <= j_fu_82;
        end if; 
    end process;

    bit_sel_fu_577_p3 <= tempReg_reg_786_pp0_iter7_reg(63 downto 63);
    bl_fu_233_p1 <= coeff_q0(32 - 1 downto 0);
    carry_fu_504_p3 <= xor_ln105_52_fu_498_p2(63 downto 63);
    coeff_address0 <= sext_ln145_fu_219_p1(6 - 1 downto 0);
    coeff_ce0 <= coeff_ce0_local;

    coeff_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            coeff_ce0_local <= ap_const_logic_1;
        else 
            coeff_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_424_p_ce <= ap_const_logic_1;
    grp_fu_424_p_din0 <= zext_ln105_183_fu_267_p1(32 - 1 downto 0);
    grp_fu_424_p_din1 <= zext_ln105_fu_257_p1(32 - 1 downto 0);
    grp_fu_428_p_ce <= ap_const_logic_1;
    grp_fu_428_p_din0 <= zext_ln112_fu_272_p1(32 - 1 downto 0);
    grp_fu_428_p_din1 <= zext_ln105_fu_257_p1(32 - 1 downto 0);
    grp_fu_432_p_ce <= ap_const_logic_1;
    grp_fu_432_p_din0 <= zext_ln105_183_fu_267_p1(32 - 1 downto 0);
    grp_fu_432_p_din1 <= zext_ln110_fu_262_p1(32 - 1 downto 0);
    grp_fu_436_p_ce <= ap_const_logic_1;
    grp_fu_436_p_din0 <= zext_ln112_fu_272_p1(32 - 1 downto 0);
    grp_fu_436_p_din1 <= zext_ln110_fu_262_p1(32 - 1 downto 0);
    i_cast_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),4));
    icmp_ln144_fu_192_p2 <= "1" when (ap_sig_allocacmp_j_48 = indvars_iv31) else "0";
    or_ln105_fu_492_p2 <= (xor_ln105_fu_480_p2 or xor_ln105_51_fu_486_p2);
    or_ln147_21_fu_571_p2 <= (xor_ln147_fu_563_p2 or xor_ln147_31_fu_567_p2);
    or_ln147_22_fu_611_p2 <= (xor_ln147_33_fu_606_p2 or and_ln147_fu_601_p2);
    or_ln58_fu_526_p3 <= (tmp_s_fu_516_p4 & add_ln105_reg_771);
    or_ln_fu_468_p3 <= (trunc_ln125_reg_765_pp0_iter5_reg & trunc_ln106_reg_718_pp0_iter5_reg);
        sext_ln145_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln145_fu_213_p2),32));

    shl_ln_fu_437_p3 <= (trunc_ln125_reg_765_pp0_iter5_reg & ap_const_lv32_0);
    sub_ln145_fu_213_p2 <= std_logic_vector(unsigned(i_cast_fu_159_p1) - unsigned(ap_sig_allocacmp_j_48));

    t_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, t_out_i, ap_block_pp0_stage0, ap_loop_init, u_fu_629_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                t_out_o <= ap_const_lv4_0;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                t_out_o <= u_fu_629_p2;
            else 
                t_out_o <= t_out_i;
            end if;
        else 
            t_out_o <= t_out_i;
        end if; 
    end process;


    t_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            t_out_o_ap_vld <= ap_const_logic_1;
        else 
            t_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempReg_fu_533_p2 <= std_logic_vector(unsigned(or_ln58_fu_526_p3) + unsigned(zext_ln105_184_fu_512_p1));
    temp_90_fu_418_p2 <= std_logic_vector(unsigned(zext_ln130_174_fu_408_p1) + unsigned(zext_ln130_173_fu_394_p1));
    temp_fu_352_p2 <= std_logic_vector(unsigned(zext_ln123_174_fu_348_p1) + unsigned(zext_ln106_fu_333_p1));
    tmp_fu_617_p3 <= or_ln147_22_fu_611_p2(63 downto 63);
    tmp_s_fu_516_p4 <= add_ln133_fu_462_p2(63 downto 32);
    trunc_ln106_273_fu_281_p1 <= grp_fu_428_p_dout0(32 - 1 downto 0);
    trunc_ln106_274_fu_285_p1 <= grp_fu_432_p_dout0(32 - 1 downto 0);
    trunc_ln106_275_fu_289_p1 <= grp_fu_436_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_277_p1 <= grp_fu_424_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_368_p1 <= temp_fu_352_p2(32 - 1 downto 0);
    trunc_ln130_fu_404_p1 <= add_ln130_211_fu_398_p2(32 - 1 downto 0);
    trunc_ln145_fu_204_p1 <= ap_sig_allocacmp_j_48(3 - 1 downto 0);
    trunc_ln147_fu_590_p1 <= tempReg_reg_786_pp0_iter7_reg(63 - 1 downto 0);

    u_89_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, u_89_out_i, v_fu_548_p2, ap_block_pp0_stage0, zext_ln143_cast_fu_163_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                u_89_out_o <= zext_ln143_cast_fu_163_p1;
            elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                u_89_out_o <= v_fu_548_p2;
            else 
                u_89_out_o <= u_89_out_i;
            end if;
        else 
            u_89_out_o <= u_89_out_i;
        end if; 
    end process;


    u_89_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            u_89_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_89_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_629_p2 <= std_logic_vector(unsigned(zext_ln148_fu_625_p1) + unsigned(t_out_i));
    v_114_out <= v_114_fu_78;

    v_114_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln144_reg_660_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (icmp_ln144_reg_660_pp0_iter6_reg = ap_const_lv1_1))) then 
            v_114_out_ap_vld <= ap_const_logic_1;
        else 
            v_114_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    v_209_fu_474_p2 <= std_logic_vector(unsigned(or_ln_fu_468_p3) + unsigned(v_114_fu_78));
    v_fu_548_p2 <= std_logic_vector(unsigned(tempReg_reg_786) + unsigned(u_89_out_i));
    xor_ln105_51_fu_486_p2 <= (v_114_fu_78 xor shl_ln_fu_437_p3);
    xor_ln105_52_fu_498_p2 <= (v_209_fu_474_p2 xor or_ln105_fu_492_p2);
    xor_ln105_fu_480_p2 <= (v_209_fu_474_p2 xor shl_ln_fu_437_p3);
    xor_ln147_31_fu_567_p2 <= (u_89_out_load_reg_795 xor tempReg_reg_786_pp0_iter7_reg);
    xor_ln147_33_fu_606_p2 <= (v_reg_800 xor or_ln147_21_fu_571_p2);
    xor_ln147_53_fu_584_p2 <= (bit_sel_fu_577_p3 xor ap_const_lv1_1);
    xor_ln147_fu_563_p2 <= (v_reg_800 xor tempReg_reg_786_pp0_iter7_reg);
    xor_ln147_s_fu_593_p3 <= (xor_ln147_53_fu_584_p2 & trunc_ln147_fu_590_p1);
    zext_ln105_183_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_679),64));
    zext_ln105_184_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_504_p3),64));
    zext_ln105_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_674),64));
    zext_ln106_238_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_503_reg_760),33));
    zext_ln106_239_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_504_reg_744_pp0_iter4_reg),33));
    zext_ln106_240_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_505_reg_750_pp0_iter4_reg),33));
    zext_ln106_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_502_reg_739),34));
    zext_ln110_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_684),64));
    zext_ln112_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_689),64));
    zext_ln123_173_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_273_reg_723),33));
    zext_ln123_174_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_342_p2),34));
    zext_ln123_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_274_reg_728),33));
    zext_ln130_173_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_fu_388_p2),34));
    zext_ln130_174_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_211_fu_398_p2),34));
    zext_ln130_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_275_reg_733_pp0_iter4_reg),33));
    zext_ln133_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_s_fu_451_p3),64));
    zext_ln143_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln143),64));
    zext_ln145_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln145_fu_204_p1),32));
    zext_ln148_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_617_p3),4));
end behav;
