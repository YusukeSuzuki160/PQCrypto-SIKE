-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_025 : IN STD_LOGIC_VECTOR (63 downto 0);
    u_024 : IN STD_LOGIC_VECTOR (63 downto 0);
    i_11 : IN STD_LOGIC_VECTOR (2 downto 0);
    add_ln185 : IN STD_LOGIC_VECTOR (3 downto 0);
    mc_offset1 : IN STD_LOGIC_VECTOR (0 downto 0);
    mc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mc_ce0 : OUT STD_LOGIC;
    mc_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    v_59_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_59_out_ap_vld : OUT STD_LOGIC;
    u_53_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_53_out_ap_vld : OUT STD_LOGIC;
    t_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    t_out_ap_vld : OUT STD_LOGIC;
    grp_fu_901_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_901_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_901_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_901_p_ce : OUT STD_LOGIC;
    grp_fu_905_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_905_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_905_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_905_p_ce : OUT STD_LOGIC;
    grp_fu_909_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_909_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_909_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_909_p_ce : OUT STD_LOGIC;
    grp_fu_913_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_913_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_913_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_913_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln185_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p503p1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503p1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln185_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_731_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_735_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_26_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_49_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_49_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_50_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_50_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_51_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_51_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_826_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_831_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_831_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_836 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_841_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_841_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_422_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_reg_847 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln105_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_857 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln189_fu_490_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_862 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_862_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_862_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_16_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_16_reg_868 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_16_reg_868_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln187_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln187_7_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_84 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_2_fu_676_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal u_53_fu_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal u_2_fu_609_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_92 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_2_fu_559_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_96 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln185_6_fu_232_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mc_ce0_local : STD_LOGIC;
    signal p503p1_1_ce0_local : STD_LOGIC;
    signal zext_ln185_fu_222_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_244_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln187_fu_257_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_380_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_25_fu_383_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_386_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_26_fu_392_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_377_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_396_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_419_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_26_fu_416_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_25_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_26_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_26_fu_439_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_25_fu_431_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_16_fu_443_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln189_6_fu_470_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln189_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_463_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln189_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln189_6_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_506_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_499_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_58_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_105_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_106_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_542_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln105_32_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_109_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_108_fu_579_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_19_fu_589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_110_fu_595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_624_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_107_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_21_fu_637_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln105_s_fu_640_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln105_fu_648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_653_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_31_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln190_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_22_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503p1_1_U : component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503p1_1_address0,
        ce0 => p503p1_1_ce0_local,
        q0 => p503p1_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln185_fu_226_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_96 <= add_ln185_6_fu_232_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    t_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_fu_84 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_fu_84 <= t_2_fu_676_p3;
                end if;
            end if; 
        end if;
    end process;

    u_53_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    u_53_fu_88 <= u_024;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    u_53_fu_88 <= u_2_fu_609_p3;
                end if;
            end if; 
        end if;
    end process;

    v_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_fu_92 <= v_025;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_fu_92 <= v_2_fu_559_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln130_reg_847 <= add_ln130_fu_422_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln185_reg_731_pp0_iter2_reg <= icmp_ln185_reg_731_pp0_iter1_reg;
                icmp_ln185_reg_731_pp0_iter3_reg <= icmp_ln185_reg_731_pp0_iter2_reg;
                icmp_ln185_reg_731_pp0_iter4_reg <= icmp_ln185_reg_731_pp0_iter3_reg;
                icmp_ln185_reg_731_pp0_iter5_reg <= icmp_ln185_reg_731_pp0_iter4_reg;
                icmp_ln185_reg_731_pp0_iter6_reg <= icmp_ln185_reg_731_pp0_iter5_reg;
                icmp_ln185_reg_731_pp0_iter7_reg <= icmp_ln185_reg_731_pp0_iter6_reg;
                icmp_ln186_reg_735_pp0_iter2_reg <= icmp_ln186_reg_735_pp0_iter1_reg;
                icmp_ln186_reg_735_pp0_iter3_reg <= icmp_ln186_reg_735_pp0_iter2_reg;
                icmp_ln186_reg_735_pp0_iter4_reg <= icmp_ln186_reg_735_pp0_iter3_reg;
                icmp_ln186_reg_735_pp0_iter5_reg <= icmp_ln186_reg_735_pp0_iter4_reg;
                icmp_ln186_reg_735_pp0_iter6_reg <= icmp_ln186_reg_735_pp0_iter5_reg;
                icmp_ln186_reg_735_pp0_iter7_reg <= icmp_ln186_reg_735_pp0_iter6_reg;
                icmp_ln186_reg_735_pp0_iter8_reg <= icmp_ln186_reg_735_pp0_iter7_reg;
                tempReg_16_reg_868 <= tempReg_16_fu_554_p2;
                tempReg_16_reg_868_pp0_iter8_reg <= tempReg_16_reg_868;
                tmp_60_reg_816 <= grp_fu_901_p_dout0(63 downto 32);
                tmp_61_reg_836 <= temp_fu_396_p2(33 downto 32);
                tmp_62_reg_821 <= grp_fu_909_p_dout0(63 downto 32);
                tmp_63_reg_831 <= grp_fu_913_p_dout0(63 downto 32);
                tmp_63_reg_831_pp0_iter4_reg <= tmp_63_reg_831;
                tmp_63_reg_831_pp0_iter5_reg <= tmp_63_reg_831_pp0_iter4_reg;
                tmp_64_reg_857 <= temp_16_fu_443_p2(33 downto 32);
                tmp_66_reg_877 <= xor_ln105_110_fu_595_p2(63 downto 63);
                trunc_ln105_reg_852 <= trunc_ln105_fu_449_p1;
                trunc_ln106_49_reg_801 <= trunc_ln106_49_fu_325_p1;
                trunc_ln106_50_reg_806 <= trunc_ln106_50_fu_329_p1;
                trunc_ln106_51_reg_811 <= trunc_ln106_51_fu_333_p1;
                trunc_ln106_reg_796 <= trunc_ln106_fu_321_p1;
                trunc_ln106_reg_796_pp0_iter4_reg <= trunc_ln106_reg_796;
                trunc_ln106_reg_796_pp0_iter5_reg <= trunc_ln106_reg_796_pp0_iter4_reg;
                trunc_ln106_reg_796_pp0_iter6_reg <= trunc_ln106_reg_796_pp0_iter5_reg;
                trunc_ln106_s_reg_826 <= grp_fu_905_p_dout0(63 downto 32);
                trunc_ln106_s_reg_826_pp0_iter4_reg <= trunc_ln106_s_reg_826;
                trunc_ln125_reg_841 <= trunc_ln125_fu_412_p1;
                trunc_ln125_reg_841_pp0_iter5_reg <= trunc_ln125_reg_841;
                trunc_ln125_reg_841_pp0_iter6_reg <= trunc_ln125_reg_841_pp0_iter5_reg;
                xor_ln189_reg_862 <= xor_ln189_fu_490_p2;
                xor_ln189_reg_862_pp0_iter7_reg <= xor_ln189_reg_862;
                xor_ln189_reg_862_pp0_iter8_reg <= xor_ln189_reg_862_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_762 <= mc_q0(63 downto 32);
                al_reg_752 <= al_fu_273_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_767 <= p503p1_1_q0(63 downto 32);
                bl_reg_757 <= bl_fu_277_p1;
                icmp_ln185_reg_731 <= icmp_ln185_fu_226_p2;
                icmp_ln185_reg_731_pp0_iter1_reg <= icmp_ln185_reg_731;
                icmp_ln186_reg_735 <= icmp_ln186_fu_238_p2;
                icmp_ln186_reg_735_pp0_iter1_reg <= icmp_ln186_reg_735;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln123_fu_386_p2 <= std_logic_vector(unsigned(zext_ln123_fu_380_p1) + unsigned(zext_ln123_25_fu_383_p1));
    add_ln130_26_fu_434_p2 <= std_logic_vector(unsigned(trunc_ln106_s_reg_826_pp0_iter4_reg) + unsigned(zext_ln106_25_fu_428_p1));
    add_ln130_fu_422_p2 <= std_logic_vector(unsigned(zext_ln130_fu_419_p1) + unsigned(zext_ln106_26_fu_416_p1));
    add_ln185_6_fu_232_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_9) + unsigned(ap_const_lv3_1));
    add_ln189_fu_484_p2 <= std_logic_vector(unsigned(zext_ln189_fu_477_p1) + unsigned(and_ln_fu_463_p3));
    al_fu_273_p1 <= mc_q0(32 - 1 downto 0);
    and_ln105_fu_648_p2 <= (xor_ln189_reg_862_pp0_iter8_reg and xor_ln105_s_fu_640_p3);
    and_ln189_6_fu_470_p3 <= (tmp_64_reg_857 & ap_const_lv32_0);
    and_ln_fu_463_p3 <= (tmp_63_reg_831_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln185_fu_226_p2)
    begin
        if (((icmp_ln185_fu_226_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_9 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_9 <= j_fu_96;
        end if; 
    end process;

    bit_sel_fu_624_p3 <= tempReg_16_reg_868_pp0_iter8_reg(63 downto 63);
    bl_fu_277_p1 <= p503p1_1_q0(32 - 1 downto 0);
    carry_31_fu_661_p2 <= (tmp_66_reg_877 or tmp_65_fu_653_p3);
    carry_fu_542_p3 <= xor_ln105_106_fu_536_p2(63 downto 63);
    grp_fu_901_p_ce <= ap_const_logic_1;
    grp_fu_901_p_din0 <= zext_ln105_26_fu_311_p1(32 - 1 downto 0);
    grp_fu_901_p_din1 <= zext_ln105_fu_301_p1(32 - 1 downto 0);
    grp_fu_905_p_ce <= ap_const_logic_1;
    grp_fu_905_p_din0 <= zext_ln112_fu_316_p1(32 - 1 downto 0);
    grp_fu_905_p_din1 <= zext_ln105_fu_301_p1(32 - 1 downto 0);
    grp_fu_909_p_ce <= ap_const_logic_1;
    grp_fu_909_p_din0 <= zext_ln105_26_fu_311_p1(32 - 1 downto 0);
    grp_fu_909_p_din1 <= zext_ln110_fu_306_p1(32 - 1 downto 0);
    grp_fu_913_p_ce <= ap_const_logic_1;
    grp_fu_913_p_din0 <= zext_ln112_fu_316_p1(32 - 1 downto 0);
    grp_fu_913_p_din1 <= zext_ln110_fu_306_p1(32 - 1 downto 0);
    icmp_ln185_fu_226_p2 <= "1" when (ap_sig_allocacmp_j_9 = i_11) else "0";
    icmp_ln186_fu_238_p2 <= "1" when (unsigned(zext_ln185_fu_222_p1) < unsigned(add_ln185)) else "0";
    mc_address0 <= zext_ln187_fu_252_p1(4 - 1 downto 0);
    mc_ce0 <= mc_ce0_local;

    mc_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mc_ce0_local <= ap_const_logic_1;
        else 
            mc_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln105_19_fu_589_p2 <= (xor_ln105_109_fu_584_p2 or xor_ln105_108_fu_579_p2);
    or_ln105_fu_530_p2 <= (xor_ln105_fu_518_p2 or xor_ln105_105_fu_524_p2);
    p503p1_1_address0 <= zext_ln187_7_fu_263_p1(3 - 1 downto 0);

    p503p1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p503p1_1_ce0_local <= ap_const_logic_1;
        else 
            p503p1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_499_p3 <= (trunc_ln125_reg_841_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln187_fu_257_p2 <= std_logic_vector(unsigned(empty) - unsigned(ap_sig_allocacmp_j_9));
    t_22_fu_670_p2 <= std_logic_vector(unsigned(t_fu_84) + unsigned(zext_ln190_fu_666_p1));
    t_2_fu_676_p3 <= 
        t_22_fu_670_p2 when (icmp_ln186_reg_735_pp0_iter8_reg(0) = '1') else 
        t_fu_84;
    t_out <= t_fu_84;

    t_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_731_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_731_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_out_ap_vld <= ap_const_logic_1;
        else 
            t_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempReg_16_fu_554_p2 <= std_logic_vector(unsigned(xor_ln189_reg_862) + unsigned(zext_ln105_32_fu_550_p1));
    tempReg_fu_506_p3 <= (trunc_ln125_reg_841_pp0_iter6_reg & trunc_ln106_reg_796_pp0_iter6_reg);
    temp_16_fu_443_p2 <= std_logic_vector(unsigned(zext_ln130_26_fu_439_p1) + unsigned(zext_ln130_25_fu_431_p1));
    temp_fu_396_p2 <= std_logic_vector(unsigned(zext_ln123_26_fu_392_p1) + unsigned(zext_ln106_fu_377_p1));
    tmp_65_fu_653_p3 <= and_ln105_fu_648_p2(63 downto 63);
    tmp_s_fu_244_p3 <= (mc_offset1 & ap_sig_allocacmp_j_9);
    trunc_ln105_21_fu_637_p1 <= tempReg_16_reg_868_pp0_iter8_reg(63 - 1 downto 0);
    trunc_ln105_fu_449_p1 <= temp_16_fu_443_p2(32 - 1 downto 0);
    trunc_ln106_49_fu_325_p1 <= grp_fu_905_p_dout0(32 - 1 downto 0);
    trunc_ln106_50_fu_329_p1 <= grp_fu_909_p_dout0(32 - 1 downto 0);
    trunc_ln106_51_fu_333_p1 <= grp_fu_913_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_321_p1 <= grp_fu_901_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_412_p1 <= temp_fu_396_p2(32 - 1 downto 0);
    u_2_fu_609_p3 <= 
        u_fu_574_p2 when (icmp_ln186_reg_735_pp0_iter7_reg(0) = '1') else 
        u_53_fu_88;
    u_53_out <= u_53_fu_88;

    u_53_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_731_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_731_pp0_iter7_reg = ap_const_lv1_1))) then 
            u_53_out_ap_vld <= ap_const_logic_1;
        else 
            u_53_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_574_p2 <= std_logic_vector(unsigned(tempReg_16_reg_868) + unsigned(u_53_fu_88));
    v_2_fu_559_p3 <= 
        v_58_fu_512_p2 when (icmp_ln186_reg_735_pp0_iter6_reg(0) = '1') else 
        v_fu_92;
    v_58_fu_512_p2 <= std_logic_vector(unsigned(tempReg_fu_506_p3) + unsigned(v_fu_92));
    v_59_out <= v_fu_92;

    v_59_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_731_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_731_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_59_out_ap_vld <= ap_const_logic_1;
        else 
            v_59_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_105_fu_524_p2 <= (v_fu_92 xor shl_ln_fu_499_p3);
    xor_ln105_106_fu_536_p2 <= (v_58_fu_512_p2 xor or_ln105_fu_530_p2);
    xor_ln105_107_fu_631_p2 <= (bit_sel_fu_624_p3 xor ap_const_lv1_1);
    xor_ln105_108_fu_579_p2 <= (u_fu_574_p2 xor tempReg_16_reg_868);
    xor_ln105_109_fu_584_p2 <= (u_53_fu_88 xor tempReg_16_reg_868);
    xor_ln105_110_fu_595_p2 <= (u_fu_574_p2 xor or_ln105_19_fu_589_p2);
    xor_ln105_fu_518_p2 <= (v_58_fu_512_p2 xor shl_ln_fu_499_p3);
    xor_ln105_s_fu_640_p3 <= (xor_ln105_107_fu_631_p2 & trunc_ln105_21_fu_637_p1);
    xor_ln189_fu_490_p2 <= (zext_ln189_6_fu_481_p1 xor add_ln189_fu_484_p2);
    zext_ln105_26_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_757),64));
    zext_ln105_32_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_542_p3),64));
    zext_ln105_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_752),64));
    zext_ln106_25_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_reg_836),32));
    zext_ln106_26_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_821),33));
    zext_ln106_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_reg_816),34));
    zext_ln110_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_762),64));
    zext_ln112_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_767),64));
    zext_ln123_25_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_49_reg_801),33));
    zext_ln123_26_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_386_p2),34));
    zext_ln123_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_50_reg_806),33));
    zext_ln130_25_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_847),34));
    zext_ln130_26_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_26_fu_434_p2),34));
    zext_ln130_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_51_reg_811),33));
    zext_ln185_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_9),4));
    zext_ln187_7_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln187_fu_257_p2),32));
    zext_ln187_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_244_p3),32));
    zext_ln189_6_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln105_reg_852),64));
    zext_ln189_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln189_6_fu_470_p3),64));
    zext_ln190_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_31_fu_661_p2),64));
end behav;
