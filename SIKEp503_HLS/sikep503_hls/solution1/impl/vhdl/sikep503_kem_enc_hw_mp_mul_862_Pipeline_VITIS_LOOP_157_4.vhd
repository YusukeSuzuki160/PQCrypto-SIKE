-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_862_Pipeline_VITIS_LOOP_157_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156 : IN STD_LOGIC_VECTOR (3 downto 0);
    a : IN STD_LOGIC_VECTOR (8 downto 0);
    PKB_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    PKB_ce0 : OUT STD_LOGIC;
    PKB_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_35_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_35_out_ap_vld : OUT STD_LOGIC;
    u_34_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o_ap_vld : OUT STD_LOGIC;
    t_33_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    t_33_out_ap_vld : OUT STD_LOGIC;
    grp_fu_451_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_451_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_451_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_451_p_ce : OUT STD_LOGIC;
    grp_fu_455_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_455_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_455_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_455_p_ce : OUT STD_LOGIC;
    grp_fu_459_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_459_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_459_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_459_p_ce : OUT STD_LOGIC;
    grp_fu_463_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_463_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_463_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_463_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_862_Pipeline_VITIS_LOOP_157_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln157_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_730_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_730_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_730_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_730_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_730_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_730_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_66_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_788_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_788_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_96_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_96_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_97_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_97_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_98_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_98_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_98_reg_803_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_158_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_158_reg_814_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_159_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_159_reg_820_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_160_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_160_reg_825_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_160_reg_825_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_157_reg_830 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_835_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_161_reg_846 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_851 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_851_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_856_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_34_out_load_reg_865 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_870 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_4_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln158_5_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_cast_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t_33_fu_94 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal t_fu_688_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal v_35_fu_98 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_118_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_fu_102 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_196_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln157_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal PKB_ce0_local : STD_LOGIC;
    signal b_ce0_local : STD_LOGIC;
    signal shl_ln8_fu_234_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln158_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln158_fu_246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln8_fu_252_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln157_fu_230_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln158_fu_267_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_396_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_55_fu_399_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_402_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_56_fu_408_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_393_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_412_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_441_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_64_fu_435_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_64_fu_448_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_65_fu_438_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_63_fu_432_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_65_fu_458_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_56_fu_468_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_55_fu_454_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_31_fu_478_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_9_fu_511_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln133_8_fu_504_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln8_fu_528_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_9_fu_497_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_13_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_14_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_3_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_15_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_576_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln9_fu_586_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_67_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_7_fu_626_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel1_fu_636_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_10_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_fu_649_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln160_8_fu_652_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_fu_630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_9_fu_665_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln160_fu_660_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_3_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln161_fu_684_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    j_9_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln157_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_9_fu_102 <= add_ln157_fu_278_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_9_fu_102 <= indvars_iv_cast_fu_196_p1;
                end if;
            end if; 
        end if;
    end process;

    t_33_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_33_fu_94 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    t_33_fu_94 <= t_fu_688_p2;
                end if;
            end if; 
        end if;
    end process;

    v_35_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_35_fu_98 <= v;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    v_35_fu_98 <= v_118_fu_534_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_841 <= add_ln105_fu_472_p2;
                    add_ln133_reg_851(63 downto 32) <= add_ln133_fu_522_p2(63 downto 32);
                    add_ln133_reg_851_pp0_iter7_reg(63 downto 32) <= add_ln133_reg_851(63 downto 32);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln157_reg_730_pp0_iter2_reg <= icmp_ln157_reg_730_pp0_iter1_reg;
                icmp_ln157_reg_730_pp0_iter3_reg <= icmp_ln157_reg_730_pp0_iter2_reg;
                icmp_ln157_reg_730_pp0_iter4_reg <= icmp_ln157_reg_730_pp0_iter3_reg;
                icmp_ln157_reg_730_pp0_iter5_reg <= icmp_ln157_reg_730_pp0_iter4_reg;
                icmp_ln157_reg_730_pp0_iter6_reg <= icmp_ln157_reg_730_pp0_iter5_reg;
                tempReg_reg_856 <= tempReg_fu_593_p2;
                tempReg_reg_856_pp0_iter7_reg <= tempReg_reg_856;
                tmp_157_reg_830 <= temp_fu_412_p2(33 downto 32);
                tmp_158_reg_814 <= grp_fu_459_p_dout0(63 downto 32);
                tmp_158_reg_814_pp0_iter4_reg <= tmp_158_reg_814;
                tmp_159_reg_820 <= grp_fu_455_p_dout0(63 downto 32);
                tmp_159_reg_820_pp0_iter4_reg <= tmp_159_reg_820;
                tmp_160_reg_825 <= grp_fu_463_p_dout0(63 downto 32);
                tmp_160_reg_825_pp0_iter4_reg <= tmp_160_reg_825;
                tmp_160_reg_825_pp0_iter5_reg <= tmp_160_reg_825_pp0_iter4_reg;
                tmp_161_reg_846 <= temp_31_fu_478_p2(33 downto 32);
                tmp_s_reg_809 <= grp_fu_451_p_dout0(63 downto 32);
                trunc_ln106_96_reg_793 <= trunc_ln106_96_fu_341_p1;
                trunc_ln106_97_reg_798 <= trunc_ln106_97_fu_345_p1;
                trunc_ln106_98_reg_803 <= trunc_ln106_98_fu_349_p1;
                trunc_ln106_98_reg_803_pp0_iter4_reg <= trunc_ln106_98_reg_803;
                trunc_ln106_reg_788 <= trunc_ln106_fu_337_p1;
                trunc_ln106_reg_788_pp0_iter4_reg <= trunc_ln106_reg_788;
                trunc_ln106_reg_788_pp0_iter5_reg <= trunc_ln106_reg_788_pp0_iter4_reg;
                trunc_ln125_reg_835 <= trunc_ln125_fu_428_p1;
                trunc_ln125_reg_835_pp0_iter5_reg <= trunc_ln125_reg_835;
                u_34_out_load_reg_865 <= u_34_out_i;
                u_reg_870 <= u_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_754 <= PKB_q0(63 downto 32);
                al_reg_744 <= al_fu_289_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_759 <= b_q0(63 downto 32);
                bl_reg_749 <= bl_fu_293_p1;
                icmp_ln157_reg_730 <= icmp_ln157_fu_224_p2;
                icmp_ln157_reg_730_pp0_iter1_reg <= icmp_ln157_reg_730;
            end if;
        end if;
    end process;
    add_ln133_reg_851(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_851_pp0_iter7_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    PKB_address0 <= zext_ln158_4_fu_262_p1(6 - 1 downto 0);
    PKB_ce0 <= PKB_ce0_local;

    PKB_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            PKB_ce0_local <= ap_const_logic_1;
        else 
            PKB_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_472_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_464_p1) + unsigned(add_ln130_fu_444_p2));
    add_ln123_fu_402_p2 <= std_logic_vector(unsigned(zext_ln123_fu_396_p1) + unsigned(zext_ln123_55_fu_399_p1));
    add_ln130_64_fu_448_p2 <= std_logic_vector(unsigned(zext_ln130_fu_441_p1) + unsigned(zext_ln106_64_fu_435_p1));
    add_ln130_65_fu_458_p2 <= std_logic_vector(unsigned(zext_ln106_65_fu_438_p1) + unsigned(zext_ln106_63_fu_432_p1));
    add_ln130_fu_444_p2 <= std_logic_vector(unsigned(trunc_ln106_98_reg_803_pp0_iter4_reg) + unsigned(tmp_158_reg_814_pp0_iter4_reg));
    add_ln133_fu_522_p2 <= std_logic_vector(unsigned(zext_ln133_fu_518_p1) + unsigned(and_ln133_8_fu_504_p3));
    add_ln157_fu_278_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln158_fu_246_p2 <= std_logic_vector(unsigned(zext_ln158_fu_242_p1) + unsigned(a));
    al_fu_289_p1 <= PKB_q0(32 - 1 downto 0);
    and_ln133_8_fu_504_p3 <= (tmp_160_reg_825_pp0_iter5_reg & ap_const_lv32_0);
    and_ln133_9_fu_511_p3 <= (tmp_161_reg_846 & ap_const_lv32_0);
    and_ln160_fu_660_p2 <= (xor_ln160_8_fu_652_p3 and add_ln133_reg_851_pp0_iter7_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln157_fu_224_p2)
    begin
        if (((icmp_ln157_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter7_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_9_fu_102, indvars_iv_cast_fu_196_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_196_p1;
        else 
            ap_sig_allocacmp_j <= j_9_fu_102;
        end if; 
    end process;

    b_address0 <= zext_ln158_5_fu_273_p1(3 - 1 downto 0);
    b_ce0 <= b_ce0_local;

    b_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0_local <= ap_const_logic_1;
        else 
            b_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel1_fu_636_p3 <= tempReg_reg_856_pp0_iter7_reg(63 downto 63);
    bl_fu_293_p1 <= b_q0(32 - 1 downto 0);
    carry_fu_564_p3 <= xor_ln105_15_fu_558_p2(63 downto 63);
    grp_fu_451_p_ce <= ap_const_logic_1;
    grp_fu_451_p_din0 <= zext_ln105_66_fu_327_p1(32 - 1 downto 0);
    grp_fu_451_p_din1 <= zext_ln105_fu_317_p1(32 - 1 downto 0);
    grp_fu_455_p_ce <= ap_const_logic_1;
    grp_fu_455_p_din0 <= zext_ln112_fu_332_p1(32 - 1 downto 0);
    grp_fu_455_p_din1 <= zext_ln105_fu_317_p1(32 - 1 downto 0);
    grp_fu_459_p_ce <= ap_const_logic_1;
    grp_fu_459_p_din0 <= zext_ln105_66_fu_327_p1(32 - 1 downto 0);
    grp_fu_459_p_din1 <= zext_ln110_fu_322_p1(32 - 1 downto 0);
    grp_fu_463_p_ce <= ap_const_logic_1;
    grp_fu_463_p_din0 <= zext_ln112_fu_332_p1(32 - 1 downto 0);
    grp_fu_463_p_din1 <= zext_ln110_fu_322_p1(32 - 1 downto 0);
    icmp_ln157_fu_224_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    indvars_iv_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    lshr_ln8_fu_252_p4 <= add_ln158_fu_246_p2(8 downto 3);
    or_ln105_3_fu_552_p2 <= (xor_ln105_14_fu_546_p2 or xor_ln105_13_fu_540_p2);
    or_ln160_3_fu_670_p2 <= (xor_ln160_9_fu_665_p2 or and_ln160_fu_660_p2);
    or_ln160_fu_630_p2 <= (xor_ln160_fu_622_p2 or xor_ln160_7_fu_626_p2);
    or_ln8_fu_528_p3 <= (trunc_ln125_reg_835_pp0_iter5_reg & trunc_ln106_reg_788_pp0_iter5_reg);
    or_ln9_fu_586_p3 <= (tmp_6_fu_576_p4 & add_ln105_reg_841);
    shl_ln125_9_fu_497_p3 <= (trunc_ln125_reg_835_pp0_iter5_reg & ap_const_lv32_0);
    shl_ln8_fu_234_p3 <= (ap_sig_allocacmp_j & ap_const_lv3_0);
    sub_ln158_fu_267_p2 <= std_logic_vector(unsigned(empty) - unsigned(trunc_ln157_fu_230_p1));
    t_33_out <= t_33_fu_94;

    t_33_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_730_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (icmp_ln157_reg_730_pp0_iter6_reg = ap_const_lv1_1))) then 
            t_33_out_ap_vld <= ap_const_logic_1;
        else 
            t_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_688_p2 <= std_logic_vector(unsigned(zext_ln161_fu_684_p1) + unsigned(t_33_fu_94));
    tempReg_fu_593_p2 <= std_logic_vector(unsigned(or_ln9_fu_586_p3) + unsigned(zext_ln105_67_fu_572_p1));
    temp_31_fu_478_p2 <= std_logic_vector(unsigned(zext_ln130_56_fu_468_p1) + unsigned(zext_ln130_55_fu_454_p1));
    temp_fu_412_p2 <= std_logic_vector(unsigned(zext_ln123_56_fu_408_p1) + unsigned(zext_ln106_fu_393_p1));
    tmp_126_fu_676_p3 <= or_ln160_3_fu_670_p2(63 downto 63);
    tmp_6_fu_576_p4 <= add_ln133_fu_522_p2(63 downto 32);
    trunc_ln106_96_fu_341_p1 <= grp_fu_455_p_dout0(32 - 1 downto 0);
    trunc_ln106_97_fu_345_p1 <= grp_fu_459_p_dout0(32 - 1 downto 0);
    trunc_ln106_98_fu_349_p1 <= grp_fu_463_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_337_p1 <= grp_fu_451_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_428_p1 <= temp_fu_412_p2(32 - 1 downto 0);
    trunc_ln130_fu_464_p1 <= add_ln130_65_fu_458_p2(32 - 1 downto 0);
    trunc_ln157_fu_230_p1 <= ap_sig_allocacmp_j(3 - 1 downto 0);
    trunc_ln160_fu_649_p1 <= tempReg_reg_856_pp0_iter7_reg(63 - 1 downto 0);

    u_34_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, u_34_out_i, u_fu_608_p2, ap_block_pp0_stage0, zext_ln156_cast_fu_192_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                u_34_out_o <= zext_ln156_cast_fu_192_p1;
            elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                u_34_out_o <= u_fu_608_p2;
            else 
                u_34_out_o <= u_34_out_i;
            end if;
        else 
            u_34_out_o <= u_34_out_i;
        end if; 
    end process;


    u_34_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then 
            u_34_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_34_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_608_p2 <= std_logic_vector(unsigned(tempReg_reg_856) + unsigned(u_34_out_i));
    v_118_fu_534_p2 <= std_logic_vector(unsigned(or_ln8_fu_528_p3) + unsigned(v_35_fu_98));
    v_35_out <= v_35_fu_98;

    v_35_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_730_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (icmp_ln157_reg_730_pp0_iter6_reg = ap_const_lv1_1))) then 
            v_35_out_ap_vld <= ap_const_logic_1;
        else 
            v_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_13_fu_540_p2 <= (v_118_fu_534_p2 xor shl_ln125_9_fu_497_p3);
    xor_ln105_14_fu_546_p2 <= (v_35_fu_98 xor shl_ln125_9_fu_497_p3);
    xor_ln105_15_fu_558_p2 <= (v_118_fu_534_p2 xor or_ln105_3_fu_552_p2);
    xor_ln160_10_fu_643_p2 <= (bit_sel1_fu_636_p3 xor ap_const_lv1_1);
    xor_ln160_7_fu_626_p2 <= (u_34_out_load_reg_865 xor tempReg_reg_856_pp0_iter7_reg);
    xor_ln160_8_fu_652_p3 <= (xor_ln160_10_fu_643_p2 & trunc_ln160_fu_649_p1);
    xor_ln160_9_fu_665_p2 <= (u_reg_870 xor or_ln160_fu_630_p2);
    xor_ln160_fu_622_p2 <= (u_reg_870 xor tempReg_reg_856_pp0_iter7_reg);
    zext_ln105_66_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_749),64));
    zext_ln105_67_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_564_p3),64));
    zext_ln105_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_744),64));
    zext_ln106_63_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_157_reg_830),33));
    zext_ln106_64_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_158_reg_814_pp0_iter4_reg),33));
    zext_ln106_65_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_reg_820_pp0_iter4_reg),33));
    zext_ln106_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_809),34));
    zext_ln110_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_754),64));
    zext_ln112_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_759),64));
    zext_ln123_55_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_96_reg_793),33));
    zext_ln123_56_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_402_p2),34));
    zext_ln123_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_97_reg_798),33));
    zext_ln130_55_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_64_fu_448_p2),34));
    zext_ln130_56_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_65_fu_458_p2),34));
    zext_ln130_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_98_reg_803_pp0_iter4_reg),33));
    zext_ln133_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_9_fu_511_p3),64));
    zext_ln156_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156),64));
    zext_ln158_4_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln8_fu_252_p4),32));
    zext_ln158_5_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln158_fu_267_p2),32));
    zext_ln158_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_234_p3),9));
    zext_ln161_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_676_p3),3));
end behav;
