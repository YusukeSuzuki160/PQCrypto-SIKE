-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_rdc_mont_81_82_Pipeline_VITIS_LOOP_185_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    u : IN STD_LOGIC_VECTOR (63 downto 0);
    i_1 : IN STD_LOGIC_VECTOR (2 downto 0);
    add_ln185 : IN STD_LOGIC_VECTOR (3 downto 0);
    mc_0_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    mc_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mc_0_ce0 : OUT STD_LOGIC;
    mc_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    mc_1_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    mc_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mc_1_ce0 : OUT STD_LOGIC;
    mc_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    v_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_7_out_ap_vld : OUT STD_LOGIC;
    u_6_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_6_out_ap_vld : OUT STD_LOGIC;
    t_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    t_1_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1037_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1037_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1037_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1037_p_ce : OUT STD_LOGIC;
    grp_fu_1041_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1041_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1041_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1041_p_ce : OUT STD_LOGIC;
    grp_fu_1045_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1045_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1045_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1045_p_ce : OUT STD_LOGIC;
    grp_fu_1049_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1049_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1049_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1049_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_rdc_mont_81_82_Pipeline_VITIS_LOOP_185_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln185_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p503p1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503p1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln185_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_792_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln185_fu_265_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln185_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_801_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_1_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_867_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_867_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_867_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_10_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_10_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_11_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_11_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_12_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_12_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_7_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_7_reg_897_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_902_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_902_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_907 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_912_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_912_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_483_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_reg_918 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln105_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_928 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln189_fu_551_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_933 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_933_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_933_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_4_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_4_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_4_reg_939_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln187_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln187_2_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln187_1_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_92 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_2_fu_737_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal u_6_fu_96 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal u_2_fu_670_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_6_fu_100 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_2_fu_620_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_104 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln185_1_fu_259_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mc_0_ce0_local : STD_LOGIC;
    signal mc_1_ce0_local : STD_LOGIC;
    signal p503p1_1_ce0_local : STD_LOGIC;
    signal zext_ln185_fu_249_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln1_fu_269_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_298_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln187_fu_311_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln187_fu_327_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_441_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_1_fu_444_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_447_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_2_fu_453_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_438_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_457_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_480_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_2_fu_477_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_1_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_1_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_2_fu_500_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_1_fu_492_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_4_fu_504_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln189_1_fu_531_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln189_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_524_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln189_fu_545_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln189_1_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_567_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_7_fu_573_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_5_fu_585_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_4_fu_579_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_1_fu_591_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_6_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_603_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln105_5_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_7_fu_635_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_9_fu_645_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_8_fu_640_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_2_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_10_fu_656_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_4_fu_698_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln105_7_fu_701_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln105_fu_709_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_714_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_4_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln190_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_fu_731_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503p1_1_U : component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503p1_1_address0,
        ce0 => p503p1_1_ce0_local,
        q0 => p503p1_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln185_fu_253_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_104 <= add_ln185_1_fu_259_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_104 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    t_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_1_fu_92 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_1_fu_92 <= t_2_fu_737_p3;
                end if;
            end if; 
        end if;
    end process;

    u_6_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    u_6_fu_96 <= u;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    u_6_fu_96 <= u_2_fu_670_p3;
                end if;
            end if; 
        end if;
    end process;

    v_6_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_6_fu_100 <= v;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_6_fu_100 <= v_2_fu_620_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln130_reg_918 <= add_ln130_fu_483_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln185_reg_792_pp0_iter2_reg <= icmp_ln185_reg_792_pp0_iter1_reg;
                icmp_ln185_reg_792_pp0_iter3_reg <= icmp_ln185_reg_792_pp0_iter2_reg;
                icmp_ln185_reg_792_pp0_iter4_reg <= icmp_ln185_reg_792_pp0_iter3_reg;
                icmp_ln185_reg_792_pp0_iter5_reg <= icmp_ln185_reg_792_pp0_iter4_reg;
                icmp_ln185_reg_792_pp0_iter6_reg <= icmp_ln185_reg_792_pp0_iter5_reg;
                icmp_ln185_reg_792_pp0_iter7_reg <= icmp_ln185_reg_792_pp0_iter6_reg;
                icmp_ln186_reg_801_pp0_iter2_reg <= icmp_ln186_reg_801_pp0_iter1_reg;
                icmp_ln186_reg_801_pp0_iter3_reg <= icmp_ln186_reg_801_pp0_iter2_reg;
                icmp_ln186_reg_801_pp0_iter4_reg <= icmp_ln186_reg_801_pp0_iter3_reg;
                icmp_ln186_reg_801_pp0_iter5_reg <= icmp_ln186_reg_801_pp0_iter4_reg;
                icmp_ln186_reg_801_pp0_iter6_reg <= icmp_ln186_reg_801_pp0_iter5_reg;
                icmp_ln186_reg_801_pp0_iter7_reg <= icmp_ln186_reg_801_pp0_iter6_reg;
                icmp_ln186_reg_801_pp0_iter8_reg <= icmp_ln186_reg_801_pp0_iter7_reg;
                tempReg_4_reg_939 <= tempReg_4_fu_615_p2;
                tempReg_4_reg_939_pp0_iter8_reg <= tempReg_4_reg_939;
                tmp_11_reg_887 <= grp_fu_1037_p_dout0(63 downto 32);
                tmp_12_reg_907 <= temp_fu_457_p2(33 downto 32);
                tmp_13_reg_902 <= grp_fu_1049_p_dout0(63 downto 32);
                tmp_13_reg_902_pp0_iter4_reg <= tmp_13_reg_902;
                tmp_13_reg_902_pp0_iter5_reg <= tmp_13_reg_902_pp0_iter4_reg;
                tmp_14_reg_928 <= temp_4_fu_504_p2(33 downto 32);
                tmp_19_reg_948 <= xor_ln105_10_fu_656_p2(63 downto 63);
                tmp_s_reg_892 <= grp_fu_1045_p_dout0(63 downto 32);
                trunc_ln105_reg_923 <= trunc_ln105_fu_510_p1;
                trunc_ln106_10_reg_872 <= trunc_ln106_10_fu_386_p1;
                trunc_ln106_11_reg_877 <= trunc_ln106_11_fu_390_p1;
                trunc_ln106_12_reg_882 <= trunc_ln106_12_fu_394_p1;
                trunc_ln106_7_reg_897 <= grp_fu_1041_p_dout0(63 downto 32);
                trunc_ln106_7_reg_897_pp0_iter4_reg <= trunc_ln106_7_reg_897;
                trunc_ln106_reg_867 <= trunc_ln106_fu_382_p1;
                trunc_ln106_reg_867_pp0_iter4_reg <= trunc_ln106_reg_867;
                trunc_ln106_reg_867_pp0_iter5_reg <= trunc_ln106_reg_867_pp0_iter4_reg;
                trunc_ln106_reg_867_pp0_iter6_reg <= trunc_ln106_reg_867_pp0_iter5_reg;
                trunc_ln125_reg_912 <= trunc_ln125_fu_473_p1;
                trunc_ln125_reg_912_pp0_iter5_reg <= trunc_ln125_reg_912;
                trunc_ln125_reg_912_pp0_iter6_reg <= trunc_ln125_reg_912_pp0_iter5_reg;
                xor_ln189_reg_933 <= xor_ln189_fu_551_p2;
                xor_ln189_reg_933_pp0_iter7_reg <= xor_ln189_reg_933;
                xor_ln189_reg_933_pp0_iter8_reg <= xor_ln189_reg_933_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_833 <= select_ln187_fu_327_p3(63 downto 32);
                al_reg_823 <= al_fu_334_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_838 <= p503p1_1_q0(63 downto 32);
                bl_reg_828 <= bl_fu_338_p1;
                icmp_ln185_reg_792 <= icmp_ln185_fu_253_p2;
                icmp_ln185_reg_792_pp0_iter1_reg <= icmp_ln185_reg_792;
                icmp_ln186_reg_801 <= icmp_ln186_fu_279_p2;
                icmp_ln186_reg_801_pp0_iter1_reg <= icmp_ln186_reg_801;
                trunc_ln185_reg_796 <= trunc_ln185_fu_265_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln123_fu_447_p2 <= std_logic_vector(unsigned(zext_ln123_fu_441_p1) + unsigned(zext_ln123_1_fu_444_p1));
    add_ln130_1_fu_495_p2 <= std_logic_vector(unsigned(trunc_ln106_7_reg_897_pp0_iter4_reg) + unsigned(zext_ln106_1_fu_489_p1));
    add_ln130_fu_483_p2 <= std_logic_vector(unsigned(zext_ln130_fu_480_p1) + unsigned(zext_ln106_2_fu_477_p1));
    add_ln185_1_fu_259_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_3) + unsigned(ap_const_lv3_1));
    add_ln189_fu_545_p2 <= std_logic_vector(unsigned(zext_ln189_fu_538_p1) + unsigned(and_ln_fu_524_p3));
    al_fu_334_p1 <= select_ln187_fu_327_p3(32 - 1 downto 0);
    and_ln105_fu_709_p2 <= (xor_ln189_reg_933_pp0_iter8_reg and xor_ln105_7_fu_701_p3);
    and_ln189_1_fu_531_p3 <= (tmp_14_reg_928 & ap_const_lv32_0);
    and_ln_fu_524_p3 <= (tmp_13_reg_902_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln185_fu_253_p2)
    begin
        if (((icmp_ln185_fu_253_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_3 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_3 <= j_fu_104;
        end if; 
    end process;

    bit_sel_fu_685_p3 <= tempReg_4_reg_939_pp0_iter8_reg(63 downto 63);
    bl_fu_338_p1 <= p503p1_1_q0(32 - 1 downto 0);
    carry_4_fu_722_p2 <= (tmp_19_reg_948 or tmp_18_fu_714_p3);
    carry_fu_603_p3 <= xor_ln105_6_fu_597_p2(63 downto 63);
    grp_fu_1037_p_ce <= ap_const_logic_1;
    grp_fu_1037_p_din0 <= zext_ln105_1_fu_372_p1(32 - 1 downto 0);
    grp_fu_1037_p_din1 <= zext_ln105_fu_362_p1(32 - 1 downto 0);
    grp_fu_1041_p_ce <= ap_const_logic_1;
    grp_fu_1041_p_din0 <= zext_ln112_fu_377_p1(32 - 1 downto 0);
    grp_fu_1041_p_din1 <= zext_ln105_fu_362_p1(32 - 1 downto 0);
    grp_fu_1045_p_ce <= ap_const_logic_1;
    grp_fu_1045_p_din0 <= zext_ln105_1_fu_372_p1(32 - 1 downto 0);
    grp_fu_1045_p_din1 <= zext_ln110_fu_367_p1(32 - 1 downto 0);
    grp_fu_1049_p_ce <= ap_const_logic_1;
    grp_fu_1049_p_din0 <= zext_ln112_fu_377_p1(32 - 1 downto 0);
    grp_fu_1049_p_din1 <= zext_ln110_fu_367_p1(32 - 1 downto 0);
    icmp_ln185_fu_253_p2 <= "1" when (ap_sig_allocacmp_j_3 = i_1) else "0";
    icmp_ln186_fu_279_p2 <= "1" when (unsigned(zext_ln185_fu_249_p1) < unsigned(add_ln185)) else "0";
    lshr_ln1_fu_269_p4 <= ap_sig_allocacmp_j_3(2 downto 1);
    mc_0_address0 <= zext_ln187_fu_293_p1(3 - 1 downto 0);
    mc_0_ce0 <= mc_0_ce0_local;

    mc_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mc_0_ce0_local <= ap_const_logic_1;
        else 
            mc_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    mc_1_address0 <= zext_ln187_2_fu_306_p1(3 - 1 downto 0);
    mc_1_ce0 <= mc_1_ce0_local;

    mc_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mc_1_ce0_local <= ap_const_logic_1;
        else 
            mc_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln105_1_fu_591_p2 <= (xor_ln105_5_fu_585_p2 or xor_ln105_4_fu_579_p2);
    or_ln105_2_fu_650_p2 <= (xor_ln105_9_fu_645_p2 or xor_ln105_8_fu_640_p2);
    p503p1_1_address0 <= zext_ln187_1_fu_317_p1(3 - 1 downto 0);

    p503p1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p503p1_1_ce0_local <= ap_const_logic_1;
        else 
            p503p1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln187_fu_327_p3 <= 
        mc_1_q0 when (trunc_ln185_reg_796(0) = '1') else 
        mc_0_q0;
    shl_ln_fu_560_p3 <= (trunc_ln125_reg_912_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln187_fu_311_p2 <= std_logic_vector(unsigned(empty) - unsigned(ap_sig_allocacmp_j_3));
    t_1_out <= t_1_fu_92;

    t_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_792_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_792_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_1_out_ap_vld <= ap_const_logic_1;
        else 
            t_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_2_fu_737_p3 <= 
        t_fu_731_p2 when (icmp_ln186_reg_801_pp0_iter8_reg(0) = '1') else 
        t_1_fu_92;
    t_fu_731_p2 <= std_logic_vector(unsigned(t_1_fu_92) + unsigned(zext_ln190_fu_727_p1));
    tempReg_4_fu_615_p2 <= std_logic_vector(unsigned(xor_ln189_reg_933) + unsigned(zext_ln105_5_fu_611_p1));
    tempReg_fu_567_p3 <= (trunc_ln125_reg_912_pp0_iter6_reg & trunc_ln106_reg_867_pp0_iter6_reg);
    temp_4_fu_504_p2 <= std_logic_vector(unsigned(zext_ln130_2_fu_500_p1) + unsigned(zext_ln130_1_fu_492_p1));
    temp_fu_457_p2 <= std_logic_vector(unsigned(zext_ln123_2_fu_453_p1) + unsigned(zext_ln106_fu_438_p1));
    tmp_10_fu_298_p3 <= (mc_1_offset & lshr_ln1_fu_269_p4);
    tmp_18_fu_714_p3 <= and_ln105_fu_709_p2(63 downto 63);
    tmp_9_fu_285_p3 <= (mc_0_offset & lshr_ln1_fu_269_p4);
    trunc_ln105_4_fu_698_p1 <= tempReg_4_reg_939_pp0_iter8_reg(63 - 1 downto 0);
    trunc_ln105_fu_510_p1 <= temp_4_fu_504_p2(32 - 1 downto 0);
    trunc_ln106_10_fu_386_p1 <= grp_fu_1041_p_dout0(32 - 1 downto 0);
    trunc_ln106_11_fu_390_p1 <= grp_fu_1045_p_dout0(32 - 1 downto 0);
    trunc_ln106_12_fu_394_p1 <= grp_fu_1049_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_382_p1 <= grp_fu_1037_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_473_p1 <= temp_fu_457_p2(32 - 1 downto 0);
    trunc_ln185_fu_265_p1 <= ap_sig_allocacmp_j_3(1 - 1 downto 0);
    u_2_fu_670_p3 <= 
        u_7_fu_635_p2 when (icmp_ln186_reg_801_pp0_iter7_reg(0) = '1') else 
        u_6_fu_96;
    u_6_out <= u_6_fu_96;

    u_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_792_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_792_pp0_iter7_reg = ap_const_lv1_1))) then 
            u_6_out_ap_vld <= ap_const_logic_1;
        else 
            u_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_7_fu_635_p2 <= std_logic_vector(unsigned(tempReg_4_reg_939) + unsigned(u_6_fu_96));
    v_2_fu_620_p3 <= 
        v_7_fu_573_p2 when (icmp_ln186_reg_801_pp0_iter6_reg(0) = '1') else 
        v_6_fu_100;
    v_7_fu_573_p2 <= std_logic_vector(unsigned(tempReg_fu_567_p3) + unsigned(v_6_fu_100));
    v_7_out <= v_6_fu_100;

    v_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_792_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_792_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_7_out_ap_vld <= ap_const_logic_1;
        else 
            v_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_10_fu_656_p2 <= (u_7_fu_635_p2 xor or_ln105_2_fu_650_p2);
    xor_ln105_4_fu_579_p2 <= (v_7_fu_573_p2 xor shl_ln_fu_560_p3);
    xor_ln105_5_fu_585_p2 <= (v_6_fu_100 xor shl_ln_fu_560_p3);
    xor_ln105_6_fu_597_p2 <= (v_7_fu_573_p2 xor or_ln105_1_fu_591_p2);
    xor_ln105_7_fu_701_p3 <= (xor_ln105_fu_692_p2 & trunc_ln105_4_fu_698_p1);
    xor_ln105_8_fu_640_p2 <= (u_7_fu_635_p2 xor tempReg_4_reg_939);
    xor_ln105_9_fu_645_p2 <= (u_6_fu_96 xor tempReg_4_reg_939);
    xor_ln105_fu_692_p2 <= (bit_sel_fu_685_p3 xor ap_const_lv1_1);
    xor_ln189_fu_551_p2 <= (zext_ln189_1_fu_542_p1 xor add_ln189_fu_545_p2);
    zext_ln105_1_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_828),64));
    zext_ln105_5_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_603_p3),64));
    zext_ln105_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_823),64));
    zext_ln106_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_907),32));
    zext_ln106_2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_892),33));
    zext_ln106_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_887),34));
    zext_ln110_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_833),64));
    zext_ln112_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_838),64));
    zext_ln123_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_10_reg_872),33));
    zext_ln123_2_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_447_p2),34));
    zext_ln123_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_11_reg_877),33));
    zext_ln130_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_918),34));
    zext_ln130_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_1_fu_495_p2),34));
    zext_ln130_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_12_reg_882),33));
    zext_ln185_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_3),4));
    zext_ln187_1_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln187_fu_311_p2),32));
    zext_ln187_2_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_298_p3),32));
    zext_ln187_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_285_p3),32));
    zext_ln189_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln105_reg_923),64));
    zext_ln189_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln189_1_fu_531_p3),64));
    zext_ln190_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_4_fu_722_p2),64));
end behav;
