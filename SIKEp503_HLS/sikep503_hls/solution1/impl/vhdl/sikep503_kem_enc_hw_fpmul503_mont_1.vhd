-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_fpmul503_mont_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ma_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ma_ce0 : OUT STD_LOGIC;
    ma_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ma_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    mc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    mc_ce0 : OUT STD_LOGIC;
    mc_we0 : OUT STD_LOGIC;
    mc_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    mc_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_fpmul503_mont_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal temp_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mp_mul_143_fu_63_ap_start : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_ap_done : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_ap_idle : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_ap_ready : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_a_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_mp_mul_143_fu_63_a_ce0 : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_b_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mp_mul_143_fu_63_b_ce0 : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_c_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mp_mul_143_fu_63_c_ce0 : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_c_we0 : STD_LOGIC;
    signal grp_mp_mul_143_fu_63_c_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_rdc_mont_142_fu_73_ap_start : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_ap_done : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_ap_idle : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_ap_ready : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_ma_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_rdc_mont_142_fu_73_ma_ce0 : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_mc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_rdc_mont_142_fu_73_mc_ce0 : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_mc_we0 : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_mc_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mp_mul_143_fu_63_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal temp_we0_out : STD_LOGIC;
    signal grp_rdc_mont_142_fu_73_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_cast_cast_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_36 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_144_fu_96_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_we0_local : STD_LOGIC;
    signal temp_ce0_local : STD_LOGIC;
    signal empty_145_fu_102_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mp_mul_143 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        a_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        c_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        c_ce0 : OUT STD_LOGIC;
        c_we0 : OUT STD_LOGIC;
        c_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_rdc_mont_142 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ma_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ma_ce0 : OUT STD_LOGIC;
        ma_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        mc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        mc_ce0 : OUT STD_LOGIC;
        mc_we0 : OUT STD_LOGIC;
        mc_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        mc_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_fpsqr503_mont_1_temp_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    temp_U : component sikep503_kem_enc_hw_fpsqr503_mont_1_temp_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    grp_mp_mul_143_fu_63 : component sikep503_kem_enc_hw_mp_mul_143
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mp_mul_143_fu_63_ap_start,
        ap_done => grp_mp_mul_143_fu_63_ap_done,
        ap_idle => grp_mp_mul_143_fu_63_ap_idle,
        ap_ready => grp_mp_mul_143_fu_63_ap_ready,
        a_address0 => grp_mp_mul_143_fu_63_a_address0,
        a_ce0 => grp_mp_mul_143_fu_63_a_ce0,
        a_q0 => ma_q0,
        a_offset => ma_offset,
        b_address0 => grp_mp_mul_143_fu_63_b_address0,
        b_ce0 => grp_mp_mul_143_fu_63_b_ce0,
        b_q0 => mc_q0,
        c_address0 => grp_mp_mul_143_fu_63_c_address0,
        c_ce0 => grp_mp_mul_143_fu_63_c_ce0,
        c_we0 => grp_mp_mul_143_fu_63_c_we0,
        c_d0 => grp_mp_mul_143_fu_63_c_d0);

    grp_rdc_mont_142_fu_73 : component sikep503_kem_enc_hw_rdc_mont_142
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rdc_mont_142_fu_73_ap_start,
        ap_done => grp_rdc_mont_142_fu_73_ap_done,
        ap_idle => grp_rdc_mont_142_fu_73_ap_idle,
        ap_ready => grp_rdc_mont_142_fu_73_ap_ready,
        ma_address0 => grp_rdc_mont_142_fu_73_ma_address0,
        ma_ce0 => grp_rdc_mont_142_fu_73_ma_ce0,
        ma_q0 => temp_q0,
        mc_address0 => grp_rdc_mont_142_fu_73_mc_address0,
        mc_ce0 => grp_rdc_mont_142_fu_73_mc_ce0,
        mc_we0 => grp_rdc_mont_142_fu_73_mc_we0,
        mc_d0 => grp_rdc_mont_142_fu_73_mc_d0,
        mc_q0 => mc_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mp_mul_143_fu_63_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mp_mul_143_fu_63_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_mp_mul_143_fu_63_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mp_mul_143_fu_63_ap_ready = ap_const_logic_1)) then 
                    grp_mp_mul_143_fu_63_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_rdc_mont_142_fu_73_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_rdc_mont_142_fu_73_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_rdc_mont_142_fu_73_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_rdc_mont_142_fu_73_ap_ready = ap_const_logic_1)) then 
                    grp_rdc_mont_142_fu_73_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                empty_fu_36 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_90_p2 = ap_const_lv1_0))) then 
                empty_fu_36 <= empty_144_fu_96_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_mp_mul_143_fu_63_ap_done, grp_rdc_mont_142_fu_73_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state2, exitcond1_fu_90_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_90_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_mp_mul_143_fu_63_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_rdc_mont_142_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_mp_mul_143_fu_63_ap_done)
    begin
        if ((grp_mp_mul_143_fu_63_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_rdc_mont_142_fu_73_ap_done)
    begin
        if ((grp_rdc_mont_142_fu_73_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_rdc_mont_142_fu_73_ap_done, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_rdc_mont_142_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_rdc_mont_142_fu_73_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_rdc_mont_142_fu_73_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_144_fu_96_p2 <= std_logic_vector(unsigned(empty_fu_36) + unsigned(ap_const_lv5_1));
    empty_145_fu_102_p1 <= empty_fu_36(4 - 1 downto 0);
    exitcond1_fu_90_p2 <= "1" when (empty_fu_36 = ap_const_lv5_10) else "0";
    grp_mp_mul_143_fu_63_ap_start <= grp_mp_mul_143_fu_63_ap_start_reg;
    grp_rdc_mont_142_fu_73_ap_start <= grp_rdc_mont_142_fu_73_ap_start_reg;
    ma_address0 <= grp_mp_mul_143_fu_63_a_address0;
    ma_ce0 <= grp_mp_mul_143_fu_63_a_ce0;

    mc_address0_assign_proc : process(grp_mp_mul_143_fu_63_b_address0, grp_rdc_mont_142_fu_73_mc_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mc_address0 <= grp_rdc_mont_142_fu_73_mc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mc_address0 <= grp_mp_mul_143_fu_63_b_address0;
        else 
            mc_address0 <= "XXX";
        end if; 
    end process;


    mc_ce0_assign_proc : process(grp_mp_mul_143_fu_63_b_ce0, grp_rdc_mont_142_fu_73_mc_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mc_ce0 <= grp_rdc_mont_142_fu_73_mc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mc_ce0 <= grp_mp_mul_143_fu_63_b_ce0;
        else 
            mc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mc_d0 <= grp_rdc_mont_142_fu_73_mc_d0;

    mc_we0_assign_proc : process(grp_rdc_mont_142_fu_73_mc_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mc_we0 <= grp_rdc_mont_142_fu_73_mc_we0;
        else 
            mc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_cast_fu_106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_145_fu_102_p1),32));

    temp_address0_assign_proc : process(grp_mp_mul_143_fu_63_c_address0, grp_rdc_mont_142_fu_73_ma_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, p_cast_cast_fu_106_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_address0 <= grp_rdc_mont_142_fu_73_ma_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_address0 <= grp_mp_mul_143_fu_63_c_address0;
        else 
            temp_address0 <= p_cast_cast_fu_106_p1(4 - 1 downto 0);
        end if; 
    end process;


    temp_ce0_assign_proc : process(grp_mp_mul_143_fu_63_c_ce0, grp_rdc_mont_142_fu_73_ma_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, temp_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_ce0 <= grp_rdc_mont_142_fu_73_ma_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_ce0 <= grp_mp_mul_143_fu_63_c_ce0;
        else 
            temp_ce0 <= temp_ce0_local;
        end if; 
    end process;


    temp_ce0_local_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_ce0_local <= ap_const_logic_1;
        else 
            temp_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(grp_mp_mul_143_fu_63_c_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_d0 <= grp_mp_mul_143_fu_63_c_d0;
        else 
            temp_d0 <= ap_const_lv64_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(grp_mp_mul_143_fu_63_c_we0, ap_CS_fsm_state4, temp_we0_out)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_we0 <= grp_mp_mul_143_fu_63_c_we0;
        else 
            temp_we0 <= (temp_we0_out or ap_const_logic_0);
        end if; 
    end process;


    temp_we0_local_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_90_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_90_p2 = ap_const_lv1_0))) then 
            temp_we0_local <= ap_const_logic_1;
        else 
            temp_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_we0_out <= temp_we0_local;
end behav;
