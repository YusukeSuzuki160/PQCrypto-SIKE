-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_cshake256_simple_absorb_Pipeline_VITIS_LOOP_351_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idx : IN STD_LOGIC_VECTOR (8 downto 0);
    in_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_0_ce0 : OUT STD_LOGIC;
    in_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_0_ce1 : OUT STD_LOGIC;
    in_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_1_ce0 : OUT STD_LOGIC;
    in_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_1_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_1_ce1 : OUT STD_LOGIC;
    in_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_2_ce0 : OUT STD_LOGIC;
    in_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_2_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_2_ce1 : OUT STD_LOGIC;
    in_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_3_ce0 : OUT STD_LOGIC;
    in_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_3_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_3_ce1 : OUT STD_LOGIC;
    in_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_cshake256_simple_absorb_Pipeline_VITIS_LOOP_351_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln351_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_312 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_addr_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_addr_reg_322_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal s_load_reg_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln27_2_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_4_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_251_fu_58 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_276_fu_199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal s_ce1_local : STD_LOGIC;
    signal s_ce0_local : STD_LOGIC;
    signal s_we0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln352_fu_294_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_0_ce1_local : STD_LOGIC;
    signal in_0_ce0_local : STD_LOGIC;
    signal in_1_ce1_local : STD_LOGIC;
    signal in_1_ce0_local : STD_LOGIC;
    signal in_2_ce1_local : STD_LOGIC;
    signal in_2_ce0_local : STD_LOGIC;
    signal in_3_ce1_local : STD_LOGIC;
    signal in_3_ce0_local : STD_LOGIC;
    signal shl_ln_fu_215_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_1_fu_222_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_fu_226_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_fu_235_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln27_fu_249_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_3_fu_256_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_1_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln352_6_fu_274_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_251_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln351_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_251_fu_58 <= i_276_fu_199_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_251_fu_58 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_reg_312 <= ap_sig_allocacmp_i;
                s_addr_reg_322 <= zext_ln27_fu_205_p1(5 - 1 downto 0);
                s_addr_reg_322_pp0_iter1_reg <= s_addr_reg_322;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                s_load_reg_368 <= s_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln27_1_fu_260_p2 <= std_logic_vector(unsigned(zext_ln27_3_fu_256_p1) + unsigned(trunc_ln_fu_226_p4));
    add_ln27_fu_235_p2 <= std_logic_vector(unsigned(zext_ln27_1_fu_222_p1) + unsigned(trunc_ln_fu_226_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln351_fu_193_p2)
    begin
        if (((icmp_ln351_fu_193_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_251_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i <= i_251_fu_58;
        end if; 
    end process;

    i_276_fu_199_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_1));
    icmp_ln351_fu_193_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv5_11) else "0";
    in_0_address0 <= zext_ln27_4_fu_266_p1(7 - 1 downto 0);
    in_0_address1 <= zext_ln27_2_fu_241_p1(7 - 1 downto 0);
    in_0_ce0 <= in_0_ce0_local;

    in_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_0_ce0_local <= ap_const_logic_1;
        else 
            in_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_0_ce1 <= in_0_ce1_local;

    in_0_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_0_ce1_local <= ap_const_logic_1;
        else 
            in_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    in_1_address0 <= zext_ln27_4_fu_266_p1(7 - 1 downto 0);
    in_1_address1 <= zext_ln27_2_fu_241_p1(7 - 1 downto 0);
    in_1_ce0 <= in_1_ce0_local;

    in_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_1_ce0_local <= ap_const_logic_1;
        else 
            in_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_1_ce1 <= in_1_ce1_local;

    in_1_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_1_ce1_local <= ap_const_logic_1;
        else 
            in_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    in_2_address0 <= zext_ln27_4_fu_266_p1(7 - 1 downto 0);
    in_2_address1 <= zext_ln27_2_fu_241_p1(7 - 1 downto 0);
    in_2_ce0 <= in_2_ce0_local;

    in_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_2_ce0_local <= ap_const_logic_1;
        else 
            in_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_2_ce1 <= in_2_ce1_local;

    in_2_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_2_ce1_local <= ap_const_logic_1;
        else 
            in_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    in_3_address0 <= zext_ln27_4_fu_266_p1(7 - 1 downto 0);
    in_3_address1 <= zext_ln27_2_fu_241_p1(7 - 1 downto 0);
    in_3_ce0 <= in_3_ce0_local;

    in_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_3_ce0_local <= ap_const_logic_1;
        else 
            in_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    in_3_ce1 <= in_3_ce1_local;

    in_3_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_3_ce1_local <= ap_const_logic_1;
        else 
            in_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_fu_249_p3 <= (i_reg_312 & ap_const_lv1_1);
    or_ln352_6_fu_274_p9 <= (((((((in_3_q0 & in_2_q0) & in_1_q0) & in_0_q0) & in_3_q1) & in_2_q1) & in_1_q1) & in_0_q1);
    s_address0 <= s_addr_reg_322_pp0_iter1_reg;
    s_address1 <= zext_ln27_fu_205_p1(5 - 1 downto 0);
    s_ce0 <= s_ce0_local;

    s_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_ce0_local <= ap_const_logic_1;
        else 
            s_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    s_ce1 <= s_ce1_local;

    s_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_ce1_local <= ap_const_logic_1;
        else 
            s_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    s_d0 <= xor_ln352_fu_294_p2;
    s_we0 <= s_we0_local;

    s_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            s_we0_local <= ap_const_lv8_FF;
        else 
            s_we0_local <= ap_const_lv8_0;
        end if; 
    end process;

    shl_ln_fu_215_p3 <= (i_reg_312 & ap_const_lv1_0);
    trunc_ln_fu_226_p4 <= idx(8 downto 2);
    xor_ln352_fu_294_p2 <= (s_load_reg_368 xor or_ln352_6_fu_274_p9);
    zext_ln27_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_215_p3),7));
    zext_ln27_2_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_235_p2),32));
    zext_ln27_3_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_249_p3),7));
    zext_ln27_4_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_260_p2),32));
    zext_ln27_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),32));
end behav;
