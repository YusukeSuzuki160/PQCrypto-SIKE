-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_9_Pipeline_VITIS_LOOP_157_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156 : IN STD_LOGIC_VECTOR (3 downto 0);
    PKB_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    PKB_ce0 : OUT STD_LOGIC;
    PKB_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    PKB_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    PKB_ce1 : OUT STD_LOGIC;
    PKB_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156_1 : IN STD_LOGIC_VECTOR (3 downto 0);
    v_35_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_35_out_ap_vld : OUT STD_LOGIC;
    u_34_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o_ap_vld : OUT STD_LOGIC;
    t_33_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    t_33_out_ap_vld : OUT STD_LOGIC;
    grp_fu_418_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_418_p_ce : OUT STD_LOGIC;
    grp_fu_422_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_422_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_422_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_422_p_ce : OUT STD_LOGIC;
    grp_fu_426_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_426_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_426_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_426_p_ce : OUT STD_LOGIC;
    grp_fu_430_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_430_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_430_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_430_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_9_Pipeline_VITIS_LOOP_157_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_C0 : STD_LOGIC_VECTOR (8 downto 0) := "011000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln156_1_cast_fu_189_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln156_1_cast_reg_756 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln157_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_767_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_791 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_58_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_825_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_825_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_78_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_78_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_79_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_79_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_80_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_80_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_80_reg_840_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_reg_846 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_reg_851_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_reg_857_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_reg_862_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_reg_862_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_reg_867 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_872_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_reg_883 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_548_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_888_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_893 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_893_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_34_out_load_reg_902 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_634_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_907 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_1_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln158_2_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_cast_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t_33_fu_98 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal t_fu_714_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal v_35_fu_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_110_fu_560_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_7_fu_106 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_197_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln157_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal PKB_ce1_local : STD_LOGIC;
    signal PKB_ce0_local : STD_LOGIC;
    signal shl_ln6_fu_245_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln158_fu_252_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln158_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_262_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln157_fu_242_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln158_fu_277_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_282_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln158_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln158_1_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln158_1_fu_300_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln123_fu_422_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_43_fu_425_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_428_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_44_fu_434_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_419_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_438_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_467_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_46_fu_461_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_46_fu_474_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_47_fu_464_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_45_fu_458_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_47_fu_484_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_44_fu_494_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_43_fu_480_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_25_fu_504_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_3_fu_537_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln133_2_fu_530_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln2_fu_554_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_7_fu_523_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_3_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_4_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_1_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_5_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_602_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln3_fu_612_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_59_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_fu_648_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_1_fu_652_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel1_fu_662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_4_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_fu_675_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln160_2_fu_678_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_fu_656_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_3_fu_691_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln160_fu_686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_1_fu_696_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_702_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln161_fu_710_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_7_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln157_fu_225_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_7_fu_106 <= add_ln157_fu_231_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_7_fu_106 <= indvars_iv_cast_fu_197_p1;
                end if;
            end if; 
        end if;
    end process;

    t_33_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_33_fu_98 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_33_fu_98 <= t_fu_714_p2;
                end if;
            end if; 
        end if;
    end process;

    v_35_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_35_fu_102 <= v;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_35_fu_102 <= v_110_fu_560_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_878 <= add_ln105_fu_498_p2;
                    add_ln133_reg_888(63 downto 32) <= add_ln133_fu_548_p2(63 downto 32);
                    add_ln133_reg_888_pp0_iter8_reg(63 downto 32) <= add_ln133_reg_888(63 downto 32);
                ah_reg_791 <= PKB_q1(63 downto 32);
                al_reg_781 <= al_fu_315_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                bh_reg_796 <= PKB_q0(63 downto 32);
                bl_reg_786 <= bl_fu_319_p1;
                icmp_ln157_reg_767_pp0_iter2_reg <= icmp_ln157_reg_767_pp0_iter1_reg;
                icmp_ln157_reg_767_pp0_iter3_reg <= icmp_ln157_reg_767_pp0_iter2_reg;
                icmp_ln157_reg_767_pp0_iter4_reg <= icmp_ln157_reg_767_pp0_iter3_reg;
                icmp_ln157_reg_767_pp0_iter5_reg <= icmp_ln157_reg_767_pp0_iter4_reg;
                icmp_ln157_reg_767_pp0_iter6_reg <= icmp_ln157_reg_767_pp0_iter5_reg;
                icmp_ln157_reg_767_pp0_iter7_reg <= icmp_ln157_reg_767_pp0_iter6_reg;
                tempReg_reg_893 <= tempReg_fu_619_p2;
                tempReg_reg_893_pp0_iter8_reg <= tempReg_reg_893;
                tmp_117_reg_846 <= grp_fu_418_p_dout0(63 downto 32);
                tmp_118_reg_867 <= temp_fu_438_p2(33 downto 32);
                tmp_119_reg_851 <= grp_fu_426_p_dout0(63 downto 32);
                tmp_119_reg_851_pp0_iter5_reg <= tmp_119_reg_851;
                tmp_120_reg_857 <= grp_fu_422_p_dout0(63 downto 32);
                tmp_120_reg_857_pp0_iter5_reg <= tmp_120_reg_857;
                tmp_121_reg_862 <= grp_fu_430_p_dout0(63 downto 32);
                tmp_121_reg_862_pp0_iter5_reg <= tmp_121_reg_862;
                tmp_121_reg_862_pp0_iter6_reg <= tmp_121_reg_862_pp0_iter5_reg;
                tmp_122_reg_883 <= temp_25_fu_504_p2(33 downto 32);
                trunc_ln106_78_reg_830 <= trunc_ln106_78_fu_367_p1;
                trunc_ln106_79_reg_835 <= trunc_ln106_79_fu_371_p1;
                trunc_ln106_80_reg_840 <= trunc_ln106_80_fu_375_p1;
                trunc_ln106_80_reg_840_pp0_iter5_reg <= trunc_ln106_80_reg_840;
                trunc_ln106_reg_825 <= trunc_ln106_fu_363_p1;
                trunc_ln106_reg_825_pp0_iter5_reg <= trunc_ln106_reg_825;
                trunc_ln106_reg_825_pp0_iter6_reg <= trunc_ln106_reg_825_pp0_iter5_reg;
                trunc_ln125_reg_872 <= trunc_ln125_fu_454_p1;
                trunc_ln125_reg_872_pp0_iter6_reg <= trunc_ln125_reg_872;
                u_34_out_load_reg_902 <= u_34_out_i;
                u_reg_907 <= u_fu_634_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln157_reg_767 <= icmp_ln157_fu_225_p2;
                icmp_ln157_reg_767_pp0_iter1_reg <= icmp_ln157_reg_767;
                j_reg_761 <= ap_sig_allocacmp_j;
                    zext_ln156_1_cast_reg_756(3 downto 0) <= zext_ln156_1_cast_fu_189_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln156_1_cast_reg_756(4) <= '0';
    add_ln133_reg_888(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_888_pp0_iter8_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    PKB_address0 <= zext_ln158_2_fu_310_p1(6 - 1 downto 0);
    PKB_address1 <= zext_ln158_1_fu_272_p1(6 - 1 downto 0);
    PKB_ce0 <= PKB_ce0_local;

    PKB_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            PKB_ce0_local <= ap_const_logic_1;
        else 
            PKB_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    PKB_ce1 <= PKB_ce1_local;

    PKB_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            PKB_ce1_local <= ap_const_logic_1;
        else 
            PKB_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_498_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_490_p1) + unsigned(add_ln130_fu_470_p2));
    add_ln123_fu_428_p2 <= std_logic_vector(unsigned(zext_ln123_fu_422_p1) + unsigned(zext_ln123_43_fu_425_p1));
    add_ln130_46_fu_474_p2 <= std_logic_vector(unsigned(zext_ln130_fu_467_p1) + unsigned(zext_ln106_46_fu_461_p1));
    add_ln130_47_fu_484_p2 <= std_logic_vector(unsigned(zext_ln106_47_fu_464_p1) + unsigned(zext_ln106_45_fu_458_p1));
    add_ln130_fu_470_p2 <= std_logic_vector(unsigned(trunc_ln106_80_reg_840_pp0_iter5_reg) + unsigned(tmp_119_reg_851_pp0_iter5_reg));
    add_ln133_fu_548_p2 <= std_logic_vector(unsigned(zext_ln133_fu_544_p1) + unsigned(and_ln133_2_fu_530_p3));
    add_ln157_fu_231_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln158_1_fu_294_p2 <= std_logic_vector(signed(sext_ln158_fu_290_p1) + signed(ap_const_lv9_C0));
    add_ln158_fu_256_p2 <= std_logic_vector(unsigned(zext_ln158_fu_252_p1) + unsigned(ap_const_lv8_40));
    al_fu_315_p1 <= PKB_q1(32 - 1 downto 0);
    and_ln133_2_fu_530_p3 <= (tmp_121_reg_862_pp0_iter6_reg & ap_const_lv32_0);
    and_ln133_3_fu_537_p3 <= (tmp_122_reg_883 & ap_const_lv32_0);
    and_ln160_fu_686_p2 <= (xor_ln160_2_fu_678_p3 and add_ln133_reg_888_pp0_iter8_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln157_fu_225_p2)
    begin
        if (((icmp_ln157_fu_225_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_7_fu_106, indvars_iv_cast_fu_197_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_197_p1;
        else 
            ap_sig_allocacmp_j <= j_7_fu_106;
        end if; 
    end process;

    bit_sel1_fu_662_p3 <= tempReg_reg_893_pp0_iter8_reg(63 downto 63);
    bl_fu_319_p1 <= PKB_q0(32 - 1 downto 0);
    carry_fu_590_p3 <= xor_ln105_5_fu_584_p2(63 downto 63);
    grp_fu_418_p_ce <= ap_const_logic_1;
    grp_fu_418_p_din0 <= zext_ln105_fu_353_p1(32 - 1 downto 0);
    grp_fu_418_p_din1 <= zext_ln105_58_fu_343_p1(32 - 1 downto 0);
    grp_fu_422_p_ce <= ap_const_logic_1;
    grp_fu_422_p_din0 <= zext_ln112_fu_358_p1(32 - 1 downto 0);
    grp_fu_422_p_din1 <= zext_ln105_58_fu_343_p1(32 - 1 downto 0);
    grp_fu_426_p_ce <= ap_const_logic_1;
    grp_fu_426_p_din0 <= zext_ln105_fu_353_p1(32 - 1 downto 0);
    grp_fu_426_p_din1 <= zext_ln110_fu_348_p1(32 - 1 downto 0);
    grp_fu_430_p_ce <= ap_const_logic_1;
    grp_fu_430_p_din0 <= zext_ln112_fu_358_p1(32 - 1 downto 0);
    grp_fu_430_p_din1 <= zext_ln110_fu_348_p1(32 - 1 downto 0);
    icmp_ln157_fu_225_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    indvars_iv_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    lshr_ln158_1_fu_300_p4 <= add_ln158_1_fu_294_p2(8 downto 3);
    lshr_ln_fu_262_p4 <= add_ln158_fu_256_p2(7 downto 3);
    or_ln105_1_fu_578_p2 <= (xor_ln105_4_fu_572_p2 or xor_ln105_3_fu_566_p2);
    or_ln160_1_fu_696_p2 <= (xor_ln160_3_fu_691_p2 or and_ln160_fu_686_p2);
    or_ln160_fu_656_p2 <= (xor_ln160_fu_648_p2 or xor_ln160_1_fu_652_p2);
    or_ln2_fu_554_p3 <= (trunc_ln125_reg_872_pp0_iter6_reg & trunc_ln106_reg_825_pp0_iter6_reg);
    or_ln3_fu_612_p3 <= (tmp_2_fu_602_p4 & add_ln105_reg_878);
        sext_ln158_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_282_p3),9));

    shl_ln125_7_fu_523_p3 <= (trunc_ln125_reg_872_pp0_iter6_reg & ap_const_lv32_0);
    shl_ln6_fu_245_p3 <= (j_reg_761 & ap_const_lv3_0);
    sub_ln158_fu_277_p2 <= std_logic_vector(unsigned(zext_ln156_1_cast_reg_756) - unsigned(zext_ln157_fu_242_p1));
    t_33_out <= t_33_fu_98;

    t_33_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_767_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_767_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_33_out_ap_vld <= ap_const_logic_1;
        else 
            t_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_714_p2 <= std_logic_vector(unsigned(zext_ln161_fu_710_p1) + unsigned(t_33_fu_98));
    tempReg_fu_619_p2 <= std_logic_vector(unsigned(or_ln3_fu_612_p3) + unsigned(zext_ln105_59_fu_598_p1));
    temp_25_fu_504_p2 <= std_logic_vector(unsigned(zext_ln130_44_fu_494_p1) + unsigned(zext_ln130_43_fu_480_p1));
    temp_fu_438_p2 <= std_logic_vector(unsigned(zext_ln123_44_fu_434_p1) + unsigned(zext_ln106_fu_419_p1));
    tmp_2_fu_602_p4 <= add_ln133_fu_548_p2(63 downto 32);
    tmp_fu_702_p3 <= or_ln160_1_fu_696_p2(63 downto 63);
    tmp_s_fu_282_p3 <= (sub_ln158_fu_277_p2 & ap_const_lv3_0);
    trunc_ln106_78_fu_367_p1 <= grp_fu_422_p_dout0(32 - 1 downto 0);
    trunc_ln106_79_fu_371_p1 <= grp_fu_426_p_dout0(32 - 1 downto 0);
    trunc_ln106_80_fu_375_p1 <= grp_fu_430_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_363_p1 <= grp_fu_418_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_454_p1 <= temp_fu_438_p2(32 - 1 downto 0);
    trunc_ln130_fu_490_p1 <= add_ln130_47_fu_484_p2(32 - 1 downto 0);
    trunc_ln160_fu_675_p1 <= tempReg_reg_893_pp0_iter8_reg(63 - 1 downto 0);

    u_34_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, u_34_out_i, u_fu_634_p2, ap_block_pp0_stage0, zext_ln156_cast_fu_193_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                u_34_out_o <= zext_ln156_cast_fu_193_p1;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                u_34_out_o <= u_fu_634_p2;
            else 
                u_34_out_o <= u_34_out_i;
            end if;
        else 
            u_34_out_o <= u_34_out_i;
        end if; 
    end process;


    u_34_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            u_34_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_34_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_634_p2 <= std_logic_vector(unsigned(tempReg_reg_893) + unsigned(u_34_out_i));
    v_110_fu_560_p2 <= std_logic_vector(unsigned(or_ln2_fu_554_p3) + unsigned(v_35_fu_102));
    v_35_out <= v_35_fu_102;

    v_35_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_767_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_767_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_35_out_ap_vld <= ap_const_logic_1;
        else 
            v_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_3_fu_566_p2 <= (v_110_fu_560_p2 xor shl_ln125_7_fu_523_p3);
    xor_ln105_4_fu_572_p2 <= (v_35_fu_102 xor shl_ln125_7_fu_523_p3);
    xor_ln105_5_fu_584_p2 <= (v_110_fu_560_p2 xor or_ln105_1_fu_578_p2);
    xor_ln160_1_fu_652_p2 <= (u_34_out_load_reg_902 xor tempReg_reg_893_pp0_iter8_reg);
    xor_ln160_2_fu_678_p3 <= (xor_ln160_4_fu_669_p2 & trunc_ln160_fu_675_p1);
    xor_ln160_3_fu_691_p2 <= (u_reg_907 xor or_ln160_fu_656_p2);
    xor_ln160_4_fu_669_p2 <= (bit_sel1_fu_662_p3 xor ap_const_lv1_1);
    xor_ln160_fu_648_p2 <= (u_reg_907 xor tempReg_reg_893_pp0_iter8_reg);
    zext_ln105_58_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_781),64));
    zext_ln105_59_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_590_p3),64));
    zext_ln105_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_786),64));
    zext_ln106_45_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_reg_867),33));
    zext_ln106_46_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_reg_851_pp0_iter5_reg),33));
    zext_ln106_47_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_reg_857_pp0_iter5_reg),33));
    zext_ln106_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_reg_846),34));
    zext_ln110_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_791),64));
    zext_ln112_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_796),64));
    zext_ln123_43_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_78_reg_830),33));
    zext_ln123_44_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_428_p2),34));
    zext_ln123_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_79_reg_835),33));
    zext_ln130_43_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_46_fu_474_p2),34));
    zext_ln130_44_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_47_fu_484_p2),34));
    zext_ln130_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_80_reg_840_pp0_iter5_reg),33));
    zext_ln133_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_3_fu_537_p3),64));
    zext_ln156_1_cast_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156_1),5));
    zext_ln156_cast_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156),64));
    zext_ln157_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_761),5));
    zext_ln158_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_262_p4),32));
    zext_ln158_2_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln158_1_fu_300_p4),32));
    zext_ln158_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln6_fu_245_p3),8));
    zext_ln161_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_702_p3),3));
end behav;
