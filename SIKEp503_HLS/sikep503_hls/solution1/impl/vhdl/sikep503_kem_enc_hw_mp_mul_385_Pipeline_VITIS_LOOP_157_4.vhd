-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_385_Pipeline_VITIS_LOOP_157_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156_3 : IN STD_LOGIC_VECTOR (3 downto 0);
    coeff_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    coeff_ce0 : OUT STD_LOGIC;
    coeff_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_35_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_35_out_ap_vld : OUT STD_LOGIC;
    u_34_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o_ap_vld : OUT STD_LOGIC;
    t_33_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    t_33_out_ap_vld : OUT STD_LOGIC;
    grp_fu_424_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_424_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_424_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_424_p_ce : OUT STD_LOGIC;
    grp_fu_428_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_428_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_428_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_428_p_ce : OUT STD_LOGIC;
    grp_fu_432_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_432_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_432_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_432_p_ce : OUT STD_LOGIC;
    grp_fu_436_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_436_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_436_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_436_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_385_Pipeline_VITIS_LOOP_157_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln156_3_cast_fu_184_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln156_3_cast_reg_727 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln157_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_738_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_101_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_796_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_150_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_150_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_151_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_151_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_152_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_152_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_152_reg_811_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_257_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_259_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_259_reg_822_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_260_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_260_reg_828_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_261_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_261_reg_833_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_261_reg_833_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_258_reg_838 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_843_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_262_reg_854 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_859 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_859_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_864 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_864_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_34_out_load_reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_605_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln158_15_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_cast_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t_33_fu_92 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal t_fu_685_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal v_35_fu_96 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_145_fu_531_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_15_fu_100 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_192_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln157_fu_226_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_ce0_local : STD_LOGIC;
    signal coeff_ce0_local : STD_LOGIC;
    signal trunc_ln158_fu_240_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln157_fu_237_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln158_fu_248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln158_fu_261_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln158_fu_265_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_fu_271_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln123_fu_393_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_91_fu_396_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_399_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_92_fu_405_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_390_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_409_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_438_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_116_fu_432_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_112_fu_445_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_117_fu_435_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_115_fu_429_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_113_fu_455_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_92_fu_465_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_91_fu_451_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_49_fu_475_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_5_fu_508_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln133_s_fu_501_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_525_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_s_fu_494_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_43_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_44_fu_543_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_9_fu_549_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_45_fu_555_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_561_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_573_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln17_fu_583_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_102_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_fu_619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_25_fu_623_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel1_fu_633_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_28_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_fu_646_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln160_s_fu_649_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_fu_627_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_27_fu_662_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln160_fu_657_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_12_fu_667_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln161_fu_681_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_15_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln157_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_15_fu_100 <= add_ln157_fu_226_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_15_fu_100 <= indvars_iv_cast_fu_192_p1;
                end if;
            end if; 
        end if;
    end process;

    t_33_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_33_fu_92 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_33_fu_92 <= t_fu_685_p2;
                end if;
            end if; 
        end if;
    end process;

    v_35_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_35_fu_96 <= v;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_35_fu_96 <= v_145_fu_531_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_849 <= add_ln105_fu_469_p2;
                    add_ln133_reg_859(63 downto 32) <= add_ln133_fu_519_p2(63 downto 32);
                    add_ln133_reg_859_pp0_iter8_reg(63 downto 32) <= add_ln133_reg_859(63 downto 32);
                ah_reg_762 <= a_q0(63 downto 32);
                al_reg_752 <= al_fu_286_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                bh_reg_767 <= coeff_q0(63 downto 32);
                bl_reg_757 <= bl_fu_290_p1;
                icmp_ln157_reg_738_pp0_iter2_reg <= icmp_ln157_reg_738_pp0_iter1_reg;
                icmp_ln157_reg_738_pp0_iter3_reg <= icmp_ln157_reg_738_pp0_iter2_reg;
                icmp_ln157_reg_738_pp0_iter4_reg <= icmp_ln157_reg_738_pp0_iter3_reg;
                icmp_ln157_reg_738_pp0_iter5_reg <= icmp_ln157_reg_738_pp0_iter4_reg;
                icmp_ln157_reg_738_pp0_iter6_reg <= icmp_ln157_reg_738_pp0_iter5_reg;
                icmp_ln157_reg_738_pp0_iter7_reg <= icmp_ln157_reg_738_pp0_iter6_reg;
                tempReg_reg_864 <= tempReg_fu_590_p2;
                tempReg_reg_864_pp0_iter8_reg <= tempReg_reg_864;
                tmp_257_reg_817 <= grp_fu_424_p_dout0(63 downto 32);
                tmp_258_reg_838 <= temp_fu_409_p2(33 downto 32);
                tmp_259_reg_822 <= grp_fu_432_p_dout0(63 downto 32);
                tmp_259_reg_822_pp0_iter5_reg <= tmp_259_reg_822;
                tmp_260_reg_828 <= grp_fu_428_p_dout0(63 downto 32);
                tmp_260_reg_828_pp0_iter5_reg <= tmp_260_reg_828;
                tmp_261_reg_833 <= grp_fu_436_p_dout0(63 downto 32);
                tmp_261_reg_833_pp0_iter5_reg <= tmp_261_reg_833;
                tmp_261_reg_833_pp0_iter6_reg <= tmp_261_reg_833_pp0_iter5_reg;
                tmp_262_reg_854 <= temp_49_fu_475_p2(33 downto 32);
                trunc_ln106_150_reg_801 <= trunc_ln106_150_fu_338_p1;
                trunc_ln106_151_reg_806 <= trunc_ln106_151_fu_342_p1;
                trunc_ln106_152_reg_811 <= trunc_ln106_152_fu_346_p1;
                trunc_ln106_152_reg_811_pp0_iter5_reg <= trunc_ln106_152_reg_811;
                trunc_ln106_reg_796 <= trunc_ln106_fu_334_p1;
                trunc_ln106_reg_796_pp0_iter5_reg <= trunc_ln106_reg_796;
                trunc_ln106_reg_796_pp0_iter6_reg <= trunc_ln106_reg_796_pp0_iter5_reg;
                trunc_ln125_reg_843 <= trunc_ln125_fu_425_p1;
                trunc_ln125_reg_843_pp0_iter6_reg <= trunc_ln125_reg_843;
                u_34_out_load_reg_873 <= u_34_out_i;
                u_reg_878 <= u_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln157_reg_738 <= icmp_ln157_fu_220_p2;
                icmp_ln157_reg_738_pp0_iter1_reg <= icmp_ln157_reg_738;
                j_reg_732 <= ap_sig_allocacmp_j;
                    zext_ln156_3_cast_reg_727(3 downto 0) <= zext_ln156_3_cast_fu_184_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln156_3_cast_reg_727(4) <= '0';
    add_ln133_reg_859(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_859_pp0_iter8_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln158_fu_243_p1(3 - 1 downto 0);
    a_ce0 <= a_ce0_local;

    a_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce0_local <= ap_const_logic_1;
        else 
            a_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_469_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_461_p1) + unsigned(add_ln130_fu_441_p2));
    add_ln123_fu_399_p2 <= std_logic_vector(unsigned(zext_ln123_fu_393_p1) + unsigned(zext_ln123_91_fu_396_p1));
    add_ln130_112_fu_445_p2 <= std_logic_vector(unsigned(zext_ln130_fu_438_p1) + unsigned(zext_ln106_116_fu_432_p1));
    add_ln130_113_fu_455_p2 <= std_logic_vector(unsigned(zext_ln106_117_fu_435_p1) + unsigned(zext_ln106_115_fu_429_p1));
    add_ln130_fu_441_p2 <= std_logic_vector(unsigned(trunc_ln106_152_reg_811_pp0_iter5_reg) + unsigned(tmp_259_reg_822_pp0_iter5_reg));
    add_ln133_fu_519_p2 <= std_logic_vector(unsigned(zext_ln133_fu_515_p1) + unsigned(and_ln133_s_fu_501_p3));
    add_ln157_fu_226_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln158_fu_265_p2 <= std_logic_vector(signed(sext_ln158_fu_261_p1) + signed(ap_const_lv9_40));
    al_fu_286_p1 <= a_q0(32 - 1 downto 0);
    and_ln133_5_fu_508_p3 <= (tmp_262_reg_854 & ap_const_lv32_0);
    and_ln133_s_fu_501_p3 <= (tmp_261_reg_833_pp0_iter6_reg & ap_const_lv32_0);
    and_ln160_fu_657_p2 <= (xor_ln160_s_fu_649_p3 and add_ln133_reg_859_pp0_iter8_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln157_fu_220_p2)
    begin
        if (((icmp_ln157_fu_220_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_15_fu_100, indvars_iv_cast_fu_192_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_192_p1;
        else 
            ap_sig_allocacmp_j <= j_15_fu_100;
        end if; 
    end process;

    bit_sel1_fu_633_p3 <= tempReg_reg_864_pp0_iter8_reg(63 downto 63);
    bl_fu_290_p1 <= coeff_q0(32 - 1 downto 0);
    carry_fu_561_p3 <= xor_ln105_45_fu_555_p2(63 downto 63);
    coeff_address0 <= zext_ln158_15_fu_281_p1(6 - 1 downto 0);
    coeff_ce0 <= coeff_ce0_local;

    coeff_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            coeff_ce0_local <= ap_const_logic_1;
        else 
            coeff_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_424_p_ce <= ap_const_logic_1;
    grp_fu_424_p_din0 <= zext_ln105_101_fu_324_p1(32 - 1 downto 0);
    grp_fu_424_p_din1 <= zext_ln105_fu_314_p1(32 - 1 downto 0);
    grp_fu_428_p_ce <= ap_const_logic_1;
    grp_fu_428_p_din0 <= zext_ln112_fu_329_p1(32 - 1 downto 0);
    grp_fu_428_p_din1 <= zext_ln105_fu_314_p1(32 - 1 downto 0);
    grp_fu_432_p_ce <= ap_const_logic_1;
    grp_fu_432_p_din0 <= zext_ln105_101_fu_324_p1(32 - 1 downto 0);
    grp_fu_432_p_din1 <= zext_ln110_fu_319_p1(32 - 1 downto 0);
    grp_fu_436_p_ce <= ap_const_logic_1;
    grp_fu_436_p_din0 <= zext_ln112_fu_329_p1(32 - 1 downto 0);
    grp_fu_436_p_din1 <= zext_ln110_fu_319_p1(32 - 1 downto 0);
    icmp_ln157_fu_220_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    indvars_iv_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    lshr_ln_fu_271_p4 <= add_ln158_fu_265_p2(8 downto 3);
    or_ln105_9_fu_549_p2 <= (xor_ln105_44_fu_543_p2 or xor_ln105_43_fu_537_p2);
    or_ln160_12_fu_667_p2 <= (xor_ln160_27_fu_662_p2 or and_ln160_fu_657_p2);
    or_ln160_fu_627_p2 <= (xor_ln160_fu_619_p2 or xor_ln160_25_fu_623_p2);
    or_ln17_fu_583_p3 <= (tmp_24_fu_573_p4 & add_ln105_reg_849);
    or_ln_fu_525_p3 <= (trunc_ln125_reg_843_pp0_iter6_reg & trunc_ln106_reg_796_pp0_iter6_reg);
        sext_ln158_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_253_p3),9));

    shl_ln125_s_fu_494_p3 <= (trunc_ln125_reg_843_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln158_fu_248_p2 <= std_logic_vector(unsigned(zext_ln156_3_cast_reg_727) - unsigned(zext_ln157_fu_237_p1));
    t_33_out <= t_33_fu_92;

    t_33_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_738_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_738_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_33_out_ap_vld <= ap_const_logic_1;
        else 
            t_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_685_p2 <= std_logic_vector(unsigned(zext_ln161_fu_681_p1) + unsigned(t_33_fu_92));
    tempReg_fu_590_p2 <= std_logic_vector(unsigned(or_ln17_fu_583_p3) + unsigned(zext_ln105_102_fu_569_p1));
    temp_49_fu_475_p2 <= std_logic_vector(unsigned(zext_ln130_92_fu_465_p1) + unsigned(zext_ln130_91_fu_451_p1));
    temp_fu_409_p2 <= std_logic_vector(unsigned(zext_ln123_92_fu_405_p1) + unsigned(zext_ln106_fu_390_p1));
    tmp_24_fu_573_p4 <= add_ln133_fu_519_p2(63 downto 32);
    tmp_fu_673_p3 <= or_ln160_12_fu_667_p2(63 downto 63);
    tmp_s_fu_253_p3 <= (sub_ln158_fu_248_p2 & ap_const_lv3_0);
    trunc_ln106_150_fu_338_p1 <= grp_fu_428_p_dout0(32 - 1 downto 0);
    trunc_ln106_151_fu_342_p1 <= grp_fu_432_p_dout0(32 - 1 downto 0);
    trunc_ln106_152_fu_346_p1 <= grp_fu_436_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_334_p1 <= grp_fu_424_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_425_p1 <= temp_fu_409_p2(32 - 1 downto 0);
    trunc_ln130_fu_461_p1 <= add_ln130_113_fu_455_p2(32 - 1 downto 0);
    trunc_ln158_fu_240_p1 <= j_reg_732(3 - 1 downto 0);
    trunc_ln160_fu_646_p1 <= tempReg_reg_864_pp0_iter8_reg(63 - 1 downto 0);

    u_34_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, u_34_out_i, u_fu_605_p2, ap_block_pp0_stage0, zext_ln156_cast_fu_188_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                u_34_out_o <= zext_ln156_cast_fu_188_p1;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                u_34_out_o <= u_fu_605_p2;
            else 
                u_34_out_o <= u_34_out_i;
            end if;
        else 
            u_34_out_o <= u_34_out_i;
        end if; 
    end process;


    u_34_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            u_34_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_34_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_605_p2 <= std_logic_vector(unsigned(tempReg_reg_864) + unsigned(u_34_out_i));
    v_145_fu_531_p2 <= std_logic_vector(unsigned(or_ln_fu_525_p3) + unsigned(v_35_fu_96));
    v_35_out <= v_35_fu_96;

    v_35_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_738_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_738_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_35_out_ap_vld <= ap_const_logic_1;
        else 
            v_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_43_fu_537_p2 <= (v_145_fu_531_p2 xor shl_ln125_s_fu_494_p3);
    xor_ln105_44_fu_543_p2 <= (v_35_fu_96 xor shl_ln125_s_fu_494_p3);
    xor_ln105_45_fu_555_p2 <= (v_145_fu_531_p2 xor or_ln105_9_fu_549_p2);
    xor_ln160_25_fu_623_p2 <= (u_34_out_load_reg_873 xor tempReg_reg_864_pp0_iter8_reg);
    xor_ln160_27_fu_662_p2 <= (u_reg_878 xor or_ln160_fu_627_p2);
    xor_ln160_28_fu_640_p2 <= (bit_sel1_fu_633_p3 xor ap_const_lv1_1);
    xor_ln160_fu_619_p2 <= (u_reg_878 xor tempReg_reg_864_pp0_iter8_reg);
    xor_ln160_s_fu_649_p3 <= (xor_ln160_28_fu_640_p2 & trunc_ln160_fu_646_p1);
    zext_ln105_101_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_757),64));
    zext_ln105_102_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_561_p3),64));
    zext_ln105_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_752),64));
    zext_ln106_115_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_258_reg_838),33));
    zext_ln106_116_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_259_reg_822_pp0_iter5_reg),33));
    zext_ln106_117_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_260_reg_828_pp0_iter5_reg),33));
    zext_ln106_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_257_reg_817),34));
    zext_ln110_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_762),64));
    zext_ln112_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_767),64));
    zext_ln123_91_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_150_reg_801),33));
    zext_ln123_92_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_399_p2),34));
    zext_ln123_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_151_reg_806),33));
    zext_ln130_91_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_112_fu_445_p2),34));
    zext_ln130_92_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_113_fu_455_p2),34));
    zext_ln130_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_152_reg_811_pp0_iter5_reg),33));
    zext_ln133_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_5_fu_508_p3),64));
    zext_ln156_3_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156_3),5));
    zext_ln156_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156),64));
    zext_ln157_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_732),5));
    zext_ln158_15_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_271_p4),32));
    zext_ln158_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln158_fu_240_p1),32));
    zext_ln161_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_673_p3),3));
end behav;
