-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_382_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    c_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    c_1_ce0 : OUT STD_LOGIC;
    c_1_we0 : OUT STD_LOGIC;
    c_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    c_1_ce1 : OUT STD_LOGIC;
    c_1_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    c_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    c_0_ce0 : OUT STD_LOGIC;
    c_0_we0 : OUT STD_LOGIC;
    c_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    c_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    c_0_ce1 : OUT STD_LOGIC;
    c_0_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_382_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln382_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln383_fu_106_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln383_reg_214 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln382_fu_112_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln382_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_addr_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_addr_reg_231 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln383_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln383_1_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_240_fu_38 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_ce1_local : STD_LOGIC;
    signal c_0_ce0_local : STD_LOGIC;
    signal c_0_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_we0_local : STD_LOGIC;
    signal or_ln_fu_190_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_1_ce1_local : STD_LOGIC;
    signal c_1_ce0_local : STD_LOGIC;
    signal c_1_address0_local : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_we0_local : STD_LOGIC;
    signal lshr_ln_fu_116_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln383_1_fu_132_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_148_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_s_fu_158_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln383_fu_175_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln383_2_fu_179_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln383_2_fu_183_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln383_fu_168_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_240_fu_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_240_fu_38 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_240_fu_38 <= add_ln383_reg_214;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln383_reg_214 <= add_ln383_fu_106_p2;
                    c_0_addr_reg_225(1 downto 0) <= zext_ln383_fu_126_p1(3 - 1 downto 0)(1 downto 0);
                    c_1_addr_reg_231(1 downto 0) <= zext_ln383_fu_126_p1(3 - 1 downto 0)(1 downto 0);
                trunc_ln382_reg_219 <= trunc_ln382_fu_112_p1;
            end if;
        end if;
    end process;
    c_0_addr_reg_225(2) <= '0';
    c_1_addr_reg_231(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln382_fu_100_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln382_fu_100_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln383_fu_106_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln382_fu_100_p2)
    begin
        if (((icmp_ln382_fu_100_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_240_fu_38, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_240_fu_38;
        end if; 
    end process;

    c_0_address0 <= c_0_address0_local;

    c_0_address0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln382_fu_100_p2, ap_CS_fsm_state2, trunc_ln382_reg_219, c_0_addr_reg_225, zext_ln383_1_fu_142_p1)
    begin
        if (((trunc_ln382_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_0_address0_local <= c_0_addr_reg_225;
        elsif (((icmp_ln382_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_0_address0_local <= zext_ln383_1_fu_142_p1(3 - 1 downto 0);
        else 
            c_0_address0_local <= "XXX";
        end if; 
    end process;

    c_0_address1 <= zext_ln383_fu_126_p1(3 - 1 downto 0);
    c_0_ce0 <= c_0_ce0_local;

    c_0_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln382_fu_100_p2, ap_CS_fsm_state2, trunc_ln382_reg_219)
    begin
        if ((((icmp_ln382_fu_100_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln382_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            c_0_ce0_local <= ap_const_logic_1;
        else 
            c_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    c_0_ce1 <= c_0_ce1_local;

    c_0_ce1_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_0_ce1_local <= ap_const_logic_1;
        else 
            c_0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    c_0_d0 <= or_ln_fu_190_p3;
    c_0_we0 <= c_0_we0_local;

    c_0_we0_local_assign_proc : process(ap_CS_fsm_state2, trunc_ln382_reg_219)
    begin
        if (((trunc_ln382_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_0_we0_local <= ap_const_logic_1;
        else 
            c_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    c_1_address0 <= c_1_address0_local;

    c_1_address0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln382_fu_100_p2, ap_CS_fsm_state2, trunc_ln382_reg_219, c_1_addr_reg_231, zext_ln383_1_fu_142_p1)
    begin
        if (((trunc_ln382_reg_219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_1_address0_local <= c_1_addr_reg_231;
        elsif (((icmp_ln382_fu_100_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_1_address0_local <= zext_ln383_1_fu_142_p1(3 - 1 downto 0);
        else 
            c_1_address0_local <= "XXX";
        end if; 
    end process;

    c_1_address1 <= zext_ln383_fu_126_p1(3 - 1 downto 0);
    c_1_ce0 <= c_1_ce0_local;

    c_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln382_fu_100_p2, ap_CS_fsm_state2, trunc_ln382_reg_219)
    begin
        if ((((icmp_ln382_fu_100_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((trunc_ln382_reg_219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            c_1_ce0_local <= ap_const_logic_1;
        else 
            c_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    c_1_ce1 <= c_1_ce1_local;

    c_1_ce1_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            c_1_ce1_local <= ap_const_logic_1;
        else 
            c_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    c_1_d0 <= or_ln_fu_190_p3;
    c_1_we0 <= c_1_we0_local;

    c_1_we0_local_assign_proc : process(ap_CS_fsm_state2, trunc_ln382_reg_219)
    begin
        if (((trunc_ln382_reg_219 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_1_we0_local <= ap_const_logic_1;
        else 
            c_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln382_fu_100_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_7) else "0";
    lshr_ln383_1_fu_132_p4 <= add_ln383_fu_106_p2(2 downto 1);
    lshr_ln_fu_116_p4 <= ap_sig_allocacmp_i(2 downto 1);
    or_ln_fu_190_p3 <= (select_ln383_2_fu_183_p3 & select_ln383_fu_168_p3);
    select_ln383_2_fu_183_p3 <= 
        trunc_ln383_fu_175_p1 when (trunc_ln382_reg_219(0) = '1') else 
        trunc_ln383_2_fu_179_p1;
    select_ln383_fu_168_p3 <= 
        tmp_fu_148_p4 when (trunc_ln382_reg_219(0) = '1') else 
        tmp_s_fu_158_p4;
    tmp_fu_148_p4 <= c_1_q1(63 downto 1);
    tmp_s_fu_158_p4 <= c_0_q1(63 downto 1);
    trunc_ln382_fu_112_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    trunc_ln383_2_fu_179_p1 <= c_1_q0(1 - 1 downto 0);
    trunc_ln383_fu_175_p1 <= c_0_q0(1 - 1 downto 0);
    zext_ln383_1_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln383_1_fu_132_p4),32));
    zext_ln383_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_116_p4),32));
end behav;
