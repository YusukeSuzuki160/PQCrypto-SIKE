-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_9_Pipeline_VITIS_LOOP_144_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_017 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln143 : IN STD_LOGIC_VECTOR (3 downto 0);
    indvars_iv31 : IN STD_LOGIC_VECTOR (3 downto 0);
    PKB_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    PKB_ce0 : OUT STD_LOGIC;
    PKB_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    PKB_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    PKB_ce1 : OUT STD_LOGIC;
    PKB_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    v_66_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_66_out_ap_vld : OUT STD_LOGIC;
    u_59_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_59_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_59_out_o_ap_vld : OUT STD_LOGIC;
    t_out_i : IN STD_LOGIC_VECTOR (3 downto 0);
    t_out_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    t_out_o_ap_vld : OUT STD_LOGIC;
    grp_fu_418_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_418_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_418_p_ce : OUT STD_LOGIC;
    grp_fu_422_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_422_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_422_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_422_p_ce : OUT STD_LOGIC;
    grp_fu_426_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_426_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_426_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_426_p_ce : OUT STD_LOGIC;
    grp_fu_430_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_430_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_430_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_430_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_9_Pipeline_VITIS_LOOP_144_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln144_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_cast_fu_170_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_704 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_15_reg_709 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln144_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_715_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_56_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_773_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_773_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_81_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_81_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_82_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_82_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_83_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_83_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_83_reg_788_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_126_reg_799_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_reg_805_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_reg_810_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_reg_810_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_125_reg_815 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_820_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_129_reg_831 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_836 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_836_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_841 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_841_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_59_out_load_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_592_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_855 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln145_1_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln143_cast_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal u_fu_673_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_66_fu_90 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_111_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal j_fu_94 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln144_fu_209_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_15 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal PKB_ce1_local : STD_LOGIC;
    signal PKB_ce0_local : STD_LOGIC;
    signal trunc_ln145_fu_220_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln_fu_223_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln145_fu_236_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_123_fu_240_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln145_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln145_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_258_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln123_fu_380_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_45_fu_383_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_386_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_46_fu_392_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_377_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_396_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_425_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_49_fu_419_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_fu_432_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_50_fu_422_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_48_fu_416_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_50_fu_442_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_49_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_46_fu_452_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_45_fu_438_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_26_fu_462_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_1_fu_495_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_488_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_512_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_481_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_1_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_2_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_560_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1_fu_570_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_60_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_1_fu_611_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_4_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln147_fu_634_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln147_2_fu_637_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_3_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln147_fu_645_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_1_fu_655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_fu_669_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln144_fu_203_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_94 <= add_ln144_fu_209_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v_66_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    v_66_fu_90 <= v_017;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_66_fu_90 <= v_111_fu_518_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_826 <= add_ln105_fu_456_p2;
                    add_ln133_reg_836(63 downto 32) <= add_ln133_fu_506_p2(63 downto 32);
                    add_ln133_reg_836_pp0_iter8_reg(63 downto 32) <= add_ln133_reg_836(63 downto 32);
                ah_reg_739 <= PKB_q1(63 downto 32);
                al_reg_729 <= al_fu_273_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                bh_reg_744 <= PKB_q0(63 downto 32);
                bl_reg_734 <= bl_fu_277_p1;
                icmp_ln144_reg_715_pp0_iter2_reg <= icmp_ln144_reg_715_pp0_iter1_reg;
                icmp_ln144_reg_715_pp0_iter3_reg <= icmp_ln144_reg_715_pp0_iter2_reg;
                icmp_ln144_reg_715_pp0_iter4_reg <= icmp_ln144_reg_715_pp0_iter3_reg;
                icmp_ln144_reg_715_pp0_iter5_reg <= icmp_ln144_reg_715_pp0_iter4_reg;
                icmp_ln144_reg_715_pp0_iter6_reg <= icmp_ln144_reg_715_pp0_iter5_reg;
                icmp_ln144_reg_715_pp0_iter7_reg <= icmp_ln144_reg_715_pp0_iter6_reg;
                tempReg_reg_841 <= tempReg_fu_577_p2;
                tempReg_reg_841_pp0_iter8_reg <= tempReg_reg_841;
                tmp_124_reg_794 <= grp_fu_418_p_dout0(63 downto 32);
                tmp_125_reg_815 <= temp_fu_396_p2(33 downto 32);
                tmp_126_reg_799 <= grp_fu_426_p_dout0(63 downto 32);
                tmp_126_reg_799_pp0_iter5_reg <= tmp_126_reg_799;
                tmp_127_reg_805 <= grp_fu_422_p_dout0(63 downto 32);
                tmp_127_reg_805_pp0_iter5_reg <= tmp_127_reg_805;
                tmp_128_reg_810 <= grp_fu_430_p_dout0(63 downto 32);
                tmp_128_reg_810_pp0_iter5_reg <= tmp_128_reg_810;
                tmp_128_reg_810_pp0_iter6_reg <= tmp_128_reg_810_pp0_iter5_reg;
                tmp_129_reg_831 <= temp_26_fu_462_p2(33 downto 32);
                trunc_ln106_81_reg_778 <= trunc_ln106_81_fu_325_p1;
                trunc_ln106_82_reg_783 <= trunc_ln106_82_fu_329_p1;
                trunc_ln106_83_reg_788 <= trunc_ln106_83_fu_333_p1;
                trunc_ln106_83_reg_788_pp0_iter5_reg <= trunc_ln106_83_reg_788;
                trunc_ln106_reg_773 <= trunc_ln106_fu_321_p1;
                trunc_ln106_reg_773_pp0_iter5_reg <= trunc_ln106_reg_773;
                trunc_ln106_reg_773_pp0_iter6_reg <= trunc_ln106_reg_773_pp0_iter5_reg;
                trunc_ln125_reg_820 <= trunc_ln125_fu_412_p1;
                trunc_ln125_reg_820_pp0_iter6_reg <= trunc_ln125_reg_820;
                u_59_out_load_reg_850 <= u_59_out_i;
                v_reg_855 <= v_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    i_cast_reg_704(2 downto 0) <= i_cast_fu_170_p1(2 downto 0);
                icmp_ln144_reg_715 <= icmp_ln144_fu_203_p2;
                icmp_ln144_reg_715_pp0_iter1_reg <= icmp_ln144_reg_715;
                j_15_reg_709 <= ap_sig_allocacmp_j_15;
            end if;
        end if;
    end process;
    i_cast_reg_704(3) <= '0';
    add_ln133_reg_836(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_836_pp0_iter8_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    PKB_address0 <= zext_ln145_1_fu_268_p1(6 - 1 downto 0);
    PKB_address1 <= zext_ln145_fu_231_p1(6 - 1 downto 0);
    PKB_ce0 <= PKB_ce0_local;

    PKB_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            PKB_ce0_local <= ap_const_logic_1;
        else 
            PKB_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    PKB_ce1 <= PKB_ce1_local;

    PKB_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            PKB_ce1_local <= ap_const_logic_1;
        else 
            PKB_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_456_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_448_p1) + unsigned(add_ln130_49_fu_428_p2));
    add_ln123_fu_386_p2 <= std_logic_vector(unsigned(zext_ln123_fu_380_p1) + unsigned(zext_ln123_45_fu_383_p1));
    add_ln130_49_fu_428_p2 <= std_logic_vector(unsigned(trunc_ln106_83_reg_788_pp0_iter5_reg) + unsigned(tmp_126_reg_799_pp0_iter5_reg));
    add_ln130_50_fu_442_p2 <= std_logic_vector(unsigned(zext_ln106_50_fu_422_p1) + unsigned(zext_ln106_48_fu_416_p1));
    add_ln130_fu_432_p2 <= std_logic_vector(unsigned(zext_ln130_fu_425_p1) + unsigned(zext_ln106_49_fu_419_p1));
    add_ln133_fu_506_p2 <= std_logic_vector(unsigned(zext_ln133_fu_502_p1) + unsigned(and_ln_fu_488_p3));
    add_ln144_fu_209_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_15) + unsigned(ap_const_lv4_1));
    add_ln145_fu_252_p2 <= std_logic_vector(signed(sext_ln145_fu_248_p1) + signed(ap_const_lv8_C0));
    al_fu_273_p1 <= PKB_q1(32 - 1 downto 0);
    and_ln133_1_fu_495_p3 <= (tmp_129_reg_831 & ap_const_lv32_0);
    and_ln147_fu_645_p2 <= (xor_ln147_2_fu_637_p3 and add_ln133_reg_836_pp0_iter8_reg);
    and_ln_fu_488_p3 <= (tmp_128_reg_810_pp0_iter6_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln144_fu_203_p2)
    begin
        if (((icmp_ln144_fu_203_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_15 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_15 <= j_fu_94;
        end if; 
    end process;

    bit_sel_fu_621_p3 <= tempReg_reg_841_pp0_iter8_reg(63 downto 63);
    bl_fu_277_p1 <= PKB_q0(32 - 1 downto 0);
    carry_fu_548_p3 <= xor_ln105_2_fu_542_p2(63 downto 63);
    grp_fu_418_p_ce <= ap_const_logic_1;
    grp_fu_418_p_din0 <= zext_ln105_56_fu_311_p1(32 - 1 downto 0);
    grp_fu_418_p_din1 <= zext_ln105_fu_301_p1(32 - 1 downto 0);
    grp_fu_422_p_ce <= ap_const_logic_1;
    grp_fu_422_p_din0 <= zext_ln112_fu_316_p1(32 - 1 downto 0);
    grp_fu_422_p_din1 <= zext_ln105_fu_301_p1(32 - 1 downto 0);
    grp_fu_426_p_ce <= ap_const_logic_1;
    grp_fu_426_p_din0 <= zext_ln105_56_fu_311_p1(32 - 1 downto 0);
    grp_fu_426_p_din1 <= zext_ln110_fu_306_p1(32 - 1 downto 0);
    grp_fu_430_p_ce <= ap_const_logic_1;
    grp_fu_430_p_din0 <= zext_ln112_fu_316_p1(32 - 1 downto 0);
    grp_fu_430_p_din1 <= zext_ln110_fu_306_p1(32 - 1 downto 0);
    i_cast_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),4));
    icmp_ln144_fu_203_p2 <= "1" when (ap_sig_allocacmp_j_15 = indvars_iv31) else "0";
    or_ln105_fu_536_p2 <= (xor_ln105_fu_524_p2 or xor_ln105_1_fu_530_p2);
    or_ln147_1_fu_655_p2 <= (xor_ln147_3_fu_650_p2 or and_ln147_fu_645_p2);
    or_ln147_fu_615_p2 <= (xor_ln147_fu_607_p2 or xor_ln147_1_fu_611_p2);
    or_ln1_fu_570_p3 <= (tmp_s_fu_560_p4 & add_ln105_reg_826);
    or_ln_fu_512_p3 <= (trunc_ln125_reg_820_pp0_iter6_reg & trunc_ln106_reg_773_pp0_iter6_reg);
        sext_ln145_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_123_fu_240_p3),8));

    shl_ln_fu_481_p3 <= (trunc_ln125_reg_820_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln145_fu_236_p2 <= std_logic_vector(unsigned(i_cast_reg_704) - unsigned(j_15_reg_709));

    t_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, t_out_i, ap_block_pp0_stage0, ap_loop_init, u_fu_673_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                t_out_o <= ap_const_lv4_0;
            elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                t_out_o <= u_fu_673_p2;
            else 
                t_out_o <= t_out_i;
            end if;
        else 
            t_out_o <= t_out_i;
        end if; 
    end process;


    t_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            t_out_o_ap_vld <= ap_const_logic_1;
        else 
            t_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempReg_fu_577_p2 <= std_logic_vector(unsigned(or_ln1_fu_570_p3) + unsigned(zext_ln105_60_fu_556_p1));
    temp_26_fu_462_p2 <= std_logic_vector(unsigned(zext_ln130_46_fu_452_p1) + unsigned(zext_ln130_45_fu_438_p1));
    temp_fu_396_p2 <= std_logic_vector(unsigned(zext_ln123_46_fu_392_p1) + unsigned(zext_ln106_fu_377_p1));
    tmp_120_fu_661_p3 <= or_ln147_1_fu_655_p2(63 downto 63);
    tmp_123_fu_240_p3 <= (sub_ln145_fu_236_p2 & ap_const_lv3_0);
    tmp_fu_258_p4 <= add_ln145_fu_252_p2(7 downto 3);
    tmp_s_fu_560_p4 <= add_ln133_fu_506_p2(63 downto 32);
    trunc_ln106_81_fu_325_p1 <= grp_fu_422_p_dout0(32 - 1 downto 0);
    trunc_ln106_82_fu_329_p1 <= grp_fu_426_p_dout0(32 - 1 downto 0);
    trunc_ln106_83_fu_333_p1 <= grp_fu_430_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_321_p1 <= grp_fu_418_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_412_p1 <= temp_fu_396_p2(32 - 1 downto 0);
    trunc_ln130_fu_448_p1 <= add_ln130_50_fu_442_p2(32 - 1 downto 0);
    trunc_ln145_fu_220_p1 <= j_15_reg_709(3 - 1 downto 0);
    trunc_ln147_fu_634_p1 <= tempReg_reg_841_pp0_iter8_reg(63 - 1 downto 0);

    u_59_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, u_59_out_i, v_fu_592_p2, ap_block_pp0_stage0, zext_ln143_cast_fu_174_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                u_59_out_o <= zext_ln143_cast_fu_174_p1;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                u_59_out_o <= v_fu_592_p2;
            else 
                u_59_out_o <= u_59_out_i;
            end if;
        else 
            u_59_out_o <= u_59_out_i;
        end if; 
    end process;


    u_59_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            u_59_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_59_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_673_p2 <= std_logic_vector(unsigned(zext_ln148_fu_669_p1) + unsigned(t_out_i));
    v_111_fu_518_p2 <= std_logic_vector(unsigned(or_ln_fu_512_p3) + unsigned(v_66_fu_90));
    v_66_out <= v_66_fu_90;

    v_66_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln144_reg_715_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln144_reg_715_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_66_out_ap_vld <= ap_const_logic_1;
        else 
            v_66_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    v_fu_592_p2 <= std_logic_vector(unsigned(tempReg_reg_841) + unsigned(u_59_out_i));
    xor_ln105_1_fu_530_p2 <= (v_66_fu_90 xor shl_ln_fu_481_p3);
    xor_ln105_2_fu_542_p2 <= (v_111_fu_518_p2 xor or_ln105_fu_536_p2);
    xor_ln105_fu_524_p2 <= (v_111_fu_518_p2 xor shl_ln_fu_481_p3);
    xor_ln147_1_fu_611_p2 <= (u_59_out_load_reg_850 xor tempReg_reg_841_pp0_iter8_reg);
    xor_ln147_2_fu_637_p3 <= (xor_ln147_4_fu_628_p2 & trunc_ln147_fu_634_p1);
    xor_ln147_3_fu_650_p2 <= (v_reg_855 xor or_ln147_fu_615_p2);
    xor_ln147_4_fu_628_p2 <= (bit_sel_fu_621_p3 xor ap_const_lv1_1);
    xor_ln147_fu_607_p2 <= (v_reg_855 xor tempReg_reg_841_pp0_iter8_reg);
    zext_ln105_56_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_734),64));
    zext_ln105_60_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_548_p3),64));
    zext_ln105_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_729),64));
    zext_ln106_48_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_reg_815),33));
    zext_ln106_49_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_reg_799_pp0_iter5_reg),33));
    zext_ln106_50_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_reg_805_pp0_iter5_reg),33));
    zext_ln106_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_124_reg_794),34));
    zext_ln110_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_739),64));
    zext_ln112_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_744),64));
    zext_ln123_45_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_81_reg_778),33));
    zext_ln123_46_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_386_p2),34));
    zext_ln123_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_82_reg_783),33));
    zext_ln130_45_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_fu_432_p2),34));
    zext_ln130_46_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_50_fu_442_p2),34));
    zext_ln130_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_83_reg_788_pp0_iter5_reg),33));
    zext_ln133_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_1_fu_495_p3),64));
    zext_ln143_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln143),64));
    zext_ln145_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_258_p4),32));
    zext_ln145_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_223_p3),32));
    zext_ln148_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_fu_661_p3),4));
    zext_ln_fu_223_p3 <= (ap_const_lv1_1 & trunc_ln145_fu_220_p1);
end behav;
