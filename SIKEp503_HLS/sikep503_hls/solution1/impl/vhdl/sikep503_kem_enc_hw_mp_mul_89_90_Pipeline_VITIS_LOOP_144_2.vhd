-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_89_90_Pipeline_VITIS_LOOP_144_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_017 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln143 : IN STD_LOGIC_VECTOR (3 downto 0);
    indvars_iv31 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_0_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    a_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    a_1_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    i : IN STD_LOGIC_VECTOR (2 downto 0);
    zext_ln145 : IN STD_LOGIC_VECTOR (3 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_73_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_73_out_ap_vld : OUT STD_LOGIC;
    u_62_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_62_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_62_out_o_ap_vld : OUT STD_LOGIC;
    t_out_i : IN STD_LOGIC_VECTOR (3 downto 0);
    t_out_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    t_out_o_ap_vld : OUT STD_LOGIC;
    grp_fu_518_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_518_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_518_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_518_p_ce : OUT STD_LOGIC;
    grp_fu_522_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_522_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_522_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_522_p_ce : OUT STD_LOGIC;
    grp_fu_526_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_526_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_526_p_ce : OUT STD_LOGIC;
    grp_fu_530_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_530_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_530_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_530_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_89_90_Pipeline_VITIS_LOOP_144_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln144_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_cast_fu_204_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_17_reg_762 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln144_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_769_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln144_fu_254_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln144_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_61_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_837_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_837_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_93_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_93_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_94_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_94_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_95_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_95_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_95_reg_852_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_149_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_151_reg_863_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_reg_869_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_reg_874_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_reg_874_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_150_reg_879 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_884_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_154_reg_895 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_544_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_900 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_900_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_905_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_62_out_load_reg_914 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_919 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_3_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln145_4_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln145_5_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln143_cast_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal u_fu_711_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_73_fu_92 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_116_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal j_fu_96 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln144_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_17 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_0_ce0_local : STD_LOGIC;
    signal a_1_ce0_local : STD_LOGIC;
    signal b_ce0_local : STD_LOGIC;
    signal lshr_ln_fu_257_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_147_fu_266_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_148_fu_278_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln145_fu_290_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln145_fu_294_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln145_fu_304_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_418_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_53_fu_421_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_424_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_54_fu_430_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_415_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_434_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_463_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_61_fu_457_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_fu_470_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_62_fu_460_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_60_fu_454_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_61_fu_480_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_62_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_54_fu_490_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_53_fu_476_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_30_fu_500_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_4_fu_533_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_526_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_550_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_519_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_6_fu_568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_574_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_7_fu_580_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_598_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln4_fu_608_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_65_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_645_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_4_fu_649_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_659_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_7_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln147_fu_672_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln147_5_fu_675_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_6_fu_688_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln147_fu_683_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_2_fu_693_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_fu_707_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln144_fu_237_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_96 <= add_ln144_fu_243_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v_73_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_73_fu_92 <= v_017;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_73_fu_92 <= v_116_fu_556_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_890 <= add_ln105_fu_494_p2;
                    add_ln133_reg_900(63 downto 32) <= add_ln133_fu_544_p2(63 downto 32);
                    add_ln133_reg_900_pp0_iter8_reg(63 downto 32) <= add_ln133_reg_900(63 downto 32);
                ah_reg_803 <= select_ln145_fu_304_p3(63 downto 32);
                al_reg_793 <= al_fu_311_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                bh_reg_808 <= b_q0(63 downto 32);
                bl_reg_798 <= bl_fu_315_p1;
                icmp_ln144_reg_769_pp0_iter2_reg <= icmp_ln144_reg_769_pp0_iter1_reg;
                icmp_ln144_reg_769_pp0_iter3_reg <= icmp_ln144_reg_769_pp0_iter2_reg;
                icmp_ln144_reg_769_pp0_iter4_reg <= icmp_ln144_reg_769_pp0_iter3_reg;
                icmp_ln144_reg_769_pp0_iter5_reg <= icmp_ln144_reg_769_pp0_iter4_reg;
                icmp_ln144_reg_769_pp0_iter6_reg <= icmp_ln144_reg_769_pp0_iter5_reg;
                icmp_ln144_reg_769_pp0_iter7_reg <= icmp_ln144_reg_769_pp0_iter6_reg;
                tempReg_reg_905 <= tempReg_fu_615_p2;
                tempReg_reg_905_pp0_iter8_reg <= tempReg_reg_905;
                tmp_149_reg_858 <= grp_fu_518_p_dout0(63 downto 32);
                tmp_150_reg_879 <= temp_fu_434_p2(33 downto 32);
                tmp_151_reg_863 <= grp_fu_526_p_dout0(63 downto 32);
                tmp_151_reg_863_pp0_iter5_reg <= tmp_151_reg_863;
                tmp_152_reg_869 <= grp_fu_522_p_dout0(63 downto 32);
                tmp_152_reg_869_pp0_iter5_reg <= tmp_152_reg_869;
                tmp_153_reg_874 <= grp_fu_530_p_dout0(63 downto 32);
                tmp_153_reg_874_pp0_iter5_reg <= tmp_153_reg_874;
                tmp_153_reg_874_pp0_iter6_reg <= tmp_153_reg_874_pp0_iter5_reg;
                tmp_154_reg_895 <= temp_30_fu_500_p2(33 downto 32);
                trunc_ln106_93_reg_842 <= trunc_ln106_93_fu_363_p1;
                trunc_ln106_94_reg_847 <= trunc_ln106_94_fu_367_p1;
                trunc_ln106_95_reg_852 <= trunc_ln106_95_fu_371_p1;
                trunc_ln106_95_reg_852_pp0_iter5_reg <= trunc_ln106_95_reg_852;
                trunc_ln106_reg_837 <= trunc_ln106_fu_359_p1;
                trunc_ln106_reg_837_pp0_iter5_reg <= trunc_ln106_reg_837;
                trunc_ln106_reg_837_pp0_iter6_reg <= trunc_ln106_reg_837_pp0_iter5_reg;
                trunc_ln125_reg_884 <= trunc_ln125_fu_450_p1;
                trunc_ln125_reg_884_pp0_iter6_reg <= trunc_ln125_reg_884;
                u_62_out_load_reg_914 <= u_62_out_i;
                v_reg_919 <= v_fu_630_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    i_cast_reg_757(2 downto 0) <= i_cast_fu_204_p1(2 downto 0);
                icmp_ln144_reg_769 <= icmp_ln144_fu_237_p2;
                icmp_ln144_reg_769_pp0_iter1_reg <= icmp_ln144_reg_769;
                j_17_reg_762 <= ap_sig_allocacmp_j_17;
                trunc_ln144_reg_773 <= trunc_ln144_fu_254_p1;
            end if;
        end if;
    end process;
    i_cast_reg_757(3) <= '0';
    add_ln133_reg_900(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_900_pp0_iter8_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_0_address0 <= zext_ln145_3_fu_273_p1(3 - 1 downto 0);
    a_0_ce0 <= a_0_ce0_local;

    a_0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_0_ce0_local <= ap_const_logic_1;
        else 
            a_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= zext_ln145_4_fu_285_p1(3 - 1 downto 0);
    a_1_ce0 <= a_1_ce0_local;

    a_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_1_ce0_local <= ap_const_logic_1;
        else 
            a_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_494_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_486_p1) + unsigned(add_ln130_62_fu_466_p2));
    add_ln123_fu_424_p2 <= std_logic_vector(unsigned(zext_ln123_fu_418_p1) + unsigned(zext_ln123_53_fu_421_p1));
    add_ln130_61_fu_480_p2 <= std_logic_vector(unsigned(zext_ln106_62_fu_460_p1) + unsigned(zext_ln106_60_fu_454_p1));
    add_ln130_62_fu_466_p2 <= std_logic_vector(unsigned(trunc_ln106_95_reg_852_pp0_iter5_reg) + unsigned(tmp_151_reg_863_pp0_iter5_reg));
    add_ln130_fu_470_p2 <= std_logic_vector(unsigned(zext_ln130_fu_463_p1) + unsigned(zext_ln106_61_fu_457_p1));
    add_ln133_fu_544_p2 <= std_logic_vector(unsigned(zext_ln133_fu_540_p1) + unsigned(and_ln_fu_526_p3));
    add_ln144_fu_243_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_17) + unsigned(ap_const_lv4_1));
    add_ln145_fu_294_p2 <= std_logic_vector(unsigned(zext_ln145) + unsigned(sub_ln145_fu_290_p2));
    al_fu_311_p1 <= select_ln145_fu_304_p3(32 - 1 downto 0);
    and_ln133_4_fu_533_p3 <= (tmp_154_reg_895 & ap_const_lv32_0);
    and_ln147_fu_683_p2 <= (xor_ln147_5_fu_675_p3 and add_ln133_reg_900_pp0_iter8_reg);
    and_ln_fu_526_p3 <= (tmp_153_reg_874_pp0_iter6_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln144_fu_237_p2)
    begin
        if (((icmp_ln144_fu_237_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_17_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_17 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_17 <= j_fu_96;
        end if; 
    end process;

    b_address0 <= zext_ln145_5_fu_299_p1(4 - 1 downto 0);
    b_ce0 <= b_ce0_local;

    b_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0_local <= ap_const_logic_1;
        else 
            b_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel_fu_659_p3 <= tempReg_reg_905_pp0_iter8_reg(63 downto 63);
    bl_fu_315_p1 <= b_q0(32 - 1 downto 0);
    carry_fu_586_p3 <= xor_ln105_7_fu_580_p2(63 downto 63);
    grp_fu_518_p_ce <= ap_const_logic_1;
    grp_fu_518_p_din0 <= zext_ln105_61_fu_349_p1(32 - 1 downto 0);
    grp_fu_518_p_din1 <= zext_ln105_fu_339_p1(32 - 1 downto 0);
    grp_fu_522_p_ce <= ap_const_logic_1;
    grp_fu_522_p_din0 <= zext_ln112_fu_354_p1(32 - 1 downto 0);
    grp_fu_522_p_din1 <= zext_ln105_fu_339_p1(32 - 1 downto 0);
    grp_fu_526_p_ce <= ap_const_logic_1;
    grp_fu_526_p_din0 <= zext_ln105_61_fu_349_p1(32 - 1 downto 0);
    grp_fu_526_p_din1 <= zext_ln110_fu_344_p1(32 - 1 downto 0);
    grp_fu_530_p_ce <= ap_const_logic_1;
    grp_fu_530_p_din0 <= zext_ln112_fu_354_p1(32 - 1 downto 0);
    grp_fu_530_p_din1 <= zext_ln110_fu_344_p1(32 - 1 downto 0);
    i_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),4));
    icmp_ln144_fu_237_p2 <= "1" when (ap_sig_allocacmp_j_17 = indvars_iv31) else "0";
    lshr_ln_fu_257_p4 <= j_17_reg_762(2 downto 1);
    or_ln105_fu_574_p2 <= (xor_ln105_fu_562_p2 or xor_ln105_6_fu_568_p2);
    or_ln147_2_fu_693_p2 <= (xor_ln147_6_fu_688_p2 or and_ln147_fu_683_p2);
    or_ln147_fu_653_p2 <= (xor_ln147_fu_645_p2 or xor_ln147_4_fu_649_p2);
    or_ln4_fu_608_p3 <= (tmp_s_fu_598_p4 & add_ln105_reg_890);
    or_ln_fu_550_p3 <= (trunc_ln125_reg_884_pp0_iter6_reg & trunc_ln106_reg_837_pp0_iter6_reg);
    select_ln145_fu_304_p3 <= 
        a_1_q0 when (trunc_ln144_reg_773(0) = '1') else 
        a_0_q0;
    shl_ln_fu_519_p3 <= (trunc_ln125_reg_884_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln145_fu_290_p2 <= std_logic_vector(unsigned(i_cast_reg_757) - unsigned(j_17_reg_762));

    t_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, t_out_i, ap_block_pp0_stage0, ap_loop_init, u_fu_711_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_out_o <= ap_const_lv4_0;
            elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                t_out_o <= u_fu_711_p2;
            else 
                t_out_o <= t_out_i;
            end if;
        else 
            t_out_o <= t_out_i;
        end if; 
    end process;


    t_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            t_out_o_ap_vld <= ap_const_logic_1;
        else 
            t_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempReg_fu_615_p2 <= std_logic_vector(unsigned(or_ln4_fu_608_p3) + unsigned(zext_ln105_65_fu_594_p1));
    temp_30_fu_500_p2 <= std_logic_vector(unsigned(zext_ln130_54_fu_490_p1) + unsigned(zext_ln130_53_fu_476_p1));
    temp_fu_434_p2 <= std_logic_vector(unsigned(zext_ln123_54_fu_430_p1) + unsigned(zext_ln106_fu_415_p1));
    tmp_147_fu_266_p3 <= (a_0_offset & lshr_ln_fu_257_p4);
    tmp_148_fu_278_p3 <= (a_1_offset & lshr_ln_fu_257_p4);
    tmp_fu_699_p3 <= or_ln147_2_fu_693_p2(63 downto 63);
    tmp_s_fu_598_p4 <= add_ln133_fu_544_p2(63 downto 32);
    trunc_ln106_93_fu_363_p1 <= grp_fu_522_p_dout0(32 - 1 downto 0);
    trunc_ln106_94_fu_367_p1 <= grp_fu_526_p_dout0(32 - 1 downto 0);
    trunc_ln106_95_fu_371_p1 <= grp_fu_530_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_359_p1 <= grp_fu_518_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_450_p1 <= temp_fu_434_p2(32 - 1 downto 0);
    trunc_ln130_fu_486_p1 <= add_ln130_61_fu_480_p2(32 - 1 downto 0);
    trunc_ln144_fu_254_p1 <= j_17_reg_762(1 - 1 downto 0);
    trunc_ln147_fu_672_p1 <= tempReg_reg_905_pp0_iter8_reg(63 - 1 downto 0);

    u_62_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, u_62_out_i, v_fu_630_p2, ap_block_pp0_stage0, zext_ln143_cast_fu_208_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                u_62_out_o <= zext_ln143_cast_fu_208_p1;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                u_62_out_o <= v_fu_630_p2;
            else 
                u_62_out_o <= u_62_out_i;
            end if;
        else 
            u_62_out_o <= u_62_out_i;
        end if; 
    end process;


    u_62_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            u_62_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_62_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_711_p2 <= std_logic_vector(unsigned(zext_ln148_fu_707_p1) + unsigned(t_out_i));
    v_116_fu_556_p2 <= std_logic_vector(unsigned(or_ln_fu_550_p3) + unsigned(v_73_fu_92));
    v_73_out <= v_73_fu_92;

    v_73_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln144_reg_769_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln144_reg_769_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_73_out_ap_vld <= ap_const_logic_1;
        else 
            v_73_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    v_fu_630_p2 <= std_logic_vector(unsigned(tempReg_reg_905) + unsigned(u_62_out_i));
    xor_ln105_6_fu_568_p2 <= (v_73_fu_92 xor shl_ln_fu_519_p3);
    xor_ln105_7_fu_580_p2 <= (v_116_fu_556_p2 xor or_ln105_fu_574_p2);
    xor_ln105_fu_562_p2 <= (v_116_fu_556_p2 xor shl_ln_fu_519_p3);
    xor_ln147_4_fu_649_p2 <= (u_62_out_load_reg_914 xor tempReg_reg_905_pp0_iter8_reg);
    xor_ln147_5_fu_675_p3 <= (xor_ln147_7_fu_666_p2 & trunc_ln147_fu_672_p1);
    xor_ln147_6_fu_688_p2 <= (v_reg_919 xor or_ln147_fu_653_p2);
    xor_ln147_7_fu_666_p2 <= (bit_sel_fu_659_p3 xor ap_const_lv1_1);
    xor_ln147_fu_645_p2 <= (v_reg_919 xor tempReg_reg_905_pp0_iter8_reg);
    zext_ln105_61_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_798),64));
    zext_ln105_65_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_586_p3),64));
    zext_ln105_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_793),64));
    zext_ln106_60_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_150_reg_879),33));
    zext_ln106_61_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_reg_863_pp0_iter5_reg),33));
    zext_ln106_62_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_152_reg_869_pp0_iter5_reg),33));
    zext_ln106_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_reg_858),34));
    zext_ln110_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_803),64));
    zext_ln112_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_808),64));
    zext_ln123_53_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_93_reg_842),33));
    zext_ln123_54_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_424_p2),34));
    zext_ln123_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_94_reg_847),33));
    zext_ln130_53_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_fu_470_p2),34));
    zext_ln130_54_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_61_fu_480_p2),34));
    zext_ln130_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_95_reg_852_pp0_iter5_reg),33));
    zext_ln133_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_4_fu_533_p3),64));
    zext_ln143_cast_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln143),64));
    zext_ln145_3_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_fu_266_p3),32));
    zext_ln145_4_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_148_fu_278_p3),32));
    zext_ln145_5_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_fu_294_p2),32));
    zext_ln148_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_699_p3),4));
end behav;
