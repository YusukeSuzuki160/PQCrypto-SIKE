-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_1_Pipeline_VITIS_LOOP_157_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    i_24 : IN STD_LOGIC_VECTOR (3 downto 0);
    R_X_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    R_X_ce0 : OUT STD_LOGIC;
    R_X_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_35_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_35_out_ap_vld : OUT STD_LOGIC;
    u_34_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o_ap_vld : OUT STD_LOGIC;
    t_33_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    t_33_out_ap_vld : OUT STD_LOGIC;
    grp_fu_422_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_422_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_422_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_422_p_ce : OUT STD_LOGIC;
    grp_fu_426_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_426_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_426_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_426_p_ce : OUT STD_LOGIC;
    grp_fu_430_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_430_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_430_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_430_p_ce : OUT STD_LOGIC;
    grp_fu_434_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_434_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_434_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_434_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_1_Pipeline_VITIS_LOOP_157_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_reg_720 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln157_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_726_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_117_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_174_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_174_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_175_fu_330_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_175_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_176_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_176_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_176_reg_799_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_306_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_306_reg_810_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_307_reg_816_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_308_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_308_reg_821_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_308_reg_821_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_305_reg_826 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_831_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_309_reg_842 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_507_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_847 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_847_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_578_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_852_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_34_out_load_reg_861 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln158_22_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_cast_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t_33_fu_86 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal t_fu_673_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal v_35_fu_90 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_158_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_18_fu_94 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_182_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln157_fu_216_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_ce0_local : STD_LOGIC;
    signal R_X_ce0_local : STD_LOGIC;
    signal trunc_ln158_fu_227_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln158_fu_235_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln158_21_fu_239_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bit_sel5_fu_243_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln158_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln158_14_fu_257_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln3_fu_261_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln123_fu_381_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_107_fu_384_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_387_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_108_fu_393_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_378_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_397_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_426_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_140_fu_420_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_133_fu_433_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_141_fu_423_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_139_fu_417_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_134_fu_443_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_108_fu_453_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_107_fu_439_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_57_fu_463_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_9_fu_496_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln133_s_fu_489_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_513_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_s_fu_482_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_58_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_59_fu_531_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_12_fu_537_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_60_fu_543_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_549_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_561_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln25_fu_571_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_118_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_fu_607_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_34_fu_611_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel8_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_35_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_fu_634_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln160_s_fu_637_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_fu_615_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_36_fu_650_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln160_fu_645_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_16_fu_655_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln161_fu_669_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_18_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln157_fu_210_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_18_fu_94 <= add_ln157_fu_216_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_18_fu_94 <= indvars_iv_cast_fu_182_p1;
                end if;
            end if; 
        end if;
    end process;

    t_33_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_33_fu_86 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_33_fu_86 <= t_fu_673_p2;
                end if;
            end if; 
        end if;
    end process;

    v_35_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_35_fu_90 <= v;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_35_fu_90 <= v_158_fu_519_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_837 <= add_ln105_fu_457_p2;
                    add_ln133_reg_847(63 downto 32) <= add_ln133_fu_507_p2(63 downto 32);
                    add_ln133_reg_847_pp0_iter8_reg(63 downto 32) <= add_ln133_reg_847(63 downto 32);
                ah_reg_750 <= a_q0(63 downto 32);
                al_reg_740 <= al_fu_274_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                bh_reg_755 <= R_X_q0(63 downto 32);
                bl_reg_745 <= bl_fu_278_p1;
                icmp_ln157_reg_726_pp0_iter2_reg <= icmp_ln157_reg_726_pp0_iter1_reg;
                icmp_ln157_reg_726_pp0_iter3_reg <= icmp_ln157_reg_726_pp0_iter2_reg;
                icmp_ln157_reg_726_pp0_iter4_reg <= icmp_ln157_reg_726_pp0_iter3_reg;
                icmp_ln157_reg_726_pp0_iter5_reg <= icmp_ln157_reg_726_pp0_iter4_reg;
                icmp_ln157_reg_726_pp0_iter6_reg <= icmp_ln157_reg_726_pp0_iter5_reg;
                icmp_ln157_reg_726_pp0_iter7_reg <= icmp_ln157_reg_726_pp0_iter6_reg;
                tempReg_reg_852 <= tempReg_fu_578_p2;
                tempReg_reg_852_pp0_iter8_reg <= tempReg_reg_852;
                tmp_305_reg_826 <= temp_fu_397_p2(33 downto 32);
                tmp_306_reg_810 <= grp_fu_430_p_dout0(63 downto 32);
                tmp_306_reg_810_pp0_iter5_reg <= tmp_306_reg_810;
                tmp_307_reg_816 <= grp_fu_426_p_dout0(63 downto 32);
                tmp_307_reg_816_pp0_iter5_reg <= tmp_307_reg_816;
                tmp_308_reg_821 <= grp_fu_434_p_dout0(63 downto 32);
                tmp_308_reg_821_pp0_iter5_reg <= tmp_308_reg_821;
                tmp_308_reg_821_pp0_iter6_reg <= tmp_308_reg_821_pp0_iter5_reg;
                tmp_309_reg_842 <= temp_57_fu_463_p2(33 downto 32);
                tmp_s_reg_805 <= grp_fu_422_p_dout0(63 downto 32);
                trunc_ln106_174_reg_789 <= trunc_ln106_174_fu_326_p1;
                trunc_ln106_175_reg_794 <= trunc_ln106_175_fu_330_p1;
                trunc_ln106_176_reg_799 <= trunc_ln106_176_fu_334_p1;
                trunc_ln106_176_reg_799_pp0_iter5_reg <= trunc_ln106_176_reg_799;
                trunc_ln106_reg_784 <= trunc_ln106_fu_322_p1;
                trunc_ln106_reg_784_pp0_iter5_reg <= trunc_ln106_reg_784;
                trunc_ln106_reg_784_pp0_iter6_reg <= trunc_ln106_reg_784_pp0_iter5_reg;
                trunc_ln125_reg_831 <= trunc_ln125_fu_413_p1;
                trunc_ln125_reg_831_pp0_iter6_reg <= trunc_ln125_reg_831;
                u_34_out_load_reg_861 <= u_34_out_i;
                u_reg_866 <= u_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln157_reg_726 <= icmp_ln157_fu_210_p2;
                icmp_ln157_reg_726_pp0_iter1_reg <= icmp_ln157_reg_726;
                j_reg_720 <= ap_sig_allocacmp_j;
            end if;
        end if;
    end process;
    add_ln133_reg_847(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_847_pp0_iter8_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    R_X_address0 <= zext_ln158_22_fu_269_p1(4 - 1 downto 0);
    R_X_ce0 <= R_X_ce0_local;

    R_X_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            R_X_ce0_local <= ap_const_logic_1;
        else 
            R_X_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    a_address0 <= zext_ln158_fu_230_p1(3 - 1 downto 0);
    a_ce0 <= a_ce0_local;

    a_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce0_local <= ap_const_logic_1;
        else 
            a_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_457_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_449_p1) + unsigned(add_ln130_fu_429_p2));
    add_ln123_fu_387_p2 <= std_logic_vector(unsigned(zext_ln123_fu_381_p1) + unsigned(zext_ln123_107_fu_384_p1));
    add_ln130_133_fu_433_p2 <= std_logic_vector(unsigned(zext_ln130_fu_426_p1) + unsigned(zext_ln106_140_fu_420_p1));
    add_ln130_134_fu_443_p2 <= std_logic_vector(unsigned(zext_ln106_141_fu_423_p1) + unsigned(zext_ln106_139_fu_417_p1));
    add_ln130_fu_429_p2 <= std_logic_vector(unsigned(trunc_ln106_176_reg_799_pp0_iter5_reg) + unsigned(tmp_306_reg_810_pp0_iter5_reg));
    add_ln133_fu_507_p2 <= std_logic_vector(unsigned(zext_ln133_fu_503_p1) + unsigned(and_ln133_s_fu_489_p3));
    add_ln157_fu_216_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    al_fu_274_p1 <= a_q0(32 - 1 downto 0);
    and_ln133_9_fu_496_p3 <= (tmp_309_reg_842 & ap_const_lv32_0);
    and_ln133_s_fu_489_p3 <= (tmp_308_reg_821_pp0_iter6_reg & ap_const_lv32_0);
    and_ln160_fu_645_p2 <= (xor_ln160_s_fu_637_p3 and add_ln133_reg_847_pp0_iter8_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln157_fu_210_p2)
    begin
        if (((icmp_ln157_fu_210_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_18_fu_94, indvars_iv_cast_fu_182_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_182_p1;
        else 
            ap_sig_allocacmp_j <= j_18_fu_94;
        end if; 
    end process;

    bit_sel5_fu_243_p3 <= zext_ln158_21_fu_239_p1(3 downto 3);
    bit_sel8_fu_621_p3 <= tempReg_reg_852_pp0_iter8_reg(63 downto 63);
    bl_fu_278_p1 <= R_X_q0(32 - 1 downto 0);
    carry_fu_549_p3 <= xor_ln105_60_fu_543_p2(63 downto 63);
    grp_fu_422_p_ce <= ap_const_logic_1;
    grp_fu_422_p_din0 <= zext_ln105_117_fu_312_p1(32 - 1 downto 0);
    grp_fu_422_p_din1 <= zext_ln105_fu_302_p1(32 - 1 downto 0);
    grp_fu_426_p_ce <= ap_const_logic_1;
    grp_fu_426_p_din0 <= zext_ln112_fu_317_p1(32 - 1 downto 0);
    grp_fu_426_p_din1 <= zext_ln105_fu_302_p1(32 - 1 downto 0);
    grp_fu_430_p_ce <= ap_const_logic_1;
    grp_fu_430_p_din0 <= zext_ln105_117_fu_312_p1(32 - 1 downto 0);
    grp_fu_430_p_din1 <= zext_ln110_fu_307_p1(32 - 1 downto 0);
    grp_fu_434_p_ce <= ap_const_logic_1;
    grp_fu_434_p_din0 <= zext_ln112_fu_317_p1(32 - 1 downto 0);
    grp_fu_434_p_din1 <= zext_ln110_fu_307_p1(32 - 1 downto 0);
    icmp_ln157_fu_210_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    indvars_iv_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    or_ln105_12_fu_537_p2 <= (xor_ln105_59_fu_531_p2 or xor_ln105_58_fu_525_p2);
    or_ln160_16_fu_655_p2 <= (xor_ln160_36_fu_650_p2 or and_ln160_fu_645_p2);
    or_ln160_fu_615_p2 <= (xor_ln160_fu_607_p2 or xor_ln160_34_fu_611_p2);
    or_ln25_fu_571_p3 <= (tmp_66_fu_561_p4 & add_ln105_reg_837);
    or_ln_fu_513_p3 <= (trunc_ln125_reg_831_pp0_iter6_reg & trunc_ln106_reg_784_pp0_iter6_reg);
    shl_ln125_s_fu_482_p3 <= (trunc_ln125_reg_831_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln158_fu_235_p2 <= std_logic_vector(unsigned(i_24) - unsigned(j_reg_720));
    t_33_out <= t_33_fu_86;

    t_33_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_726_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_726_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_33_out_ap_vld <= ap_const_logic_1;
        else 
            t_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_673_p2 <= std_logic_vector(unsigned(zext_ln161_fu_669_p1) + unsigned(t_33_fu_86));
    tempReg_fu_578_p2 <= std_logic_vector(unsigned(or_ln25_fu_571_p3) + unsigned(zext_ln105_118_fu_557_p1));
    temp_57_fu_463_p2 <= std_logic_vector(unsigned(zext_ln130_108_fu_453_p1) + unsigned(zext_ln130_107_fu_439_p1));
    temp_fu_397_p2 <= std_logic_vector(unsigned(zext_ln123_108_fu_393_p1) + unsigned(zext_ln106_fu_378_p1));
    tmp_66_fu_561_p4 <= add_ln133_fu_507_p2(63 downto 32);
    tmp_fu_661_p3 <= or_ln160_16_fu_655_p2(63 downto 63);
    trunc_ln106_174_fu_326_p1 <= grp_fu_426_p_dout0(32 - 1 downto 0);
    trunc_ln106_175_fu_330_p1 <= grp_fu_430_p_dout0(32 - 1 downto 0);
    trunc_ln106_176_fu_334_p1 <= grp_fu_434_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_322_p1 <= grp_fu_422_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_413_p1 <= temp_fu_397_p2(32 - 1 downto 0);
    trunc_ln130_fu_449_p1 <= add_ln130_134_fu_443_p2(32 - 1 downto 0);
    trunc_ln158_14_fu_257_p1 <= sub_ln158_fu_235_p2(3 - 1 downto 0);
    trunc_ln158_fu_227_p1 <= j_reg_720(3 - 1 downto 0);
    trunc_ln160_fu_634_p1 <= tempReg_reg_852_pp0_iter8_reg(63 - 1 downto 0);

    u_34_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, u_34_out_i, u_fu_593_p2, ap_block_pp0_stage0, zext_ln156_cast_fu_178_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                u_34_out_o <= zext_ln156_cast_fu_178_p1;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                u_34_out_o <= u_fu_593_p2;
            else 
                u_34_out_o <= u_34_out_i;
            end if;
        else 
            u_34_out_o <= u_34_out_i;
        end if; 
    end process;


    u_34_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            u_34_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_34_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_593_p2 <= std_logic_vector(unsigned(tempReg_reg_852) + unsigned(u_34_out_i));
    v_158_fu_519_p2 <= std_logic_vector(unsigned(or_ln_fu_513_p3) + unsigned(v_35_fu_90));
    v_35_out <= v_35_fu_90;

    v_35_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_726_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_726_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_35_out_ap_vld <= ap_const_logic_1;
        else 
            v_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_58_fu_525_p2 <= (v_158_fu_519_p2 xor shl_ln125_s_fu_482_p3);
    xor_ln105_59_fu_531_p2 <= (v_35_fu_90 xor shl_ln125_s_fu_482_p3);
    xor_ln105_60_fu_543_p2 <= (v_158_fu_519_p2 xor or_ln105_12_fu_537_p2);
    xor_ln158_fu_251_p2 <= (bit_sel5_fu_243_p3 xor ap_const_lv1_1);
    xor_ln160_34_fu_611_p2 <= (u_34_out_load_reg_861 xor tempReg_reg_852_pp0_iter8_reg);
    xor_ln160_35_fu_628_p2 <= (bit_sel8_fu_621_p3 xor ap_const_lv1_1);
    xor_ln160_36_fu_650_p2 <= (u_reg_866 xor or_ln160_fu_615_p2);
    xor_ln160_fu_607_p2 <= (u_reg_866 xor tempReg_reg_852_pp0_iter8_reg);
    xor_ln160_s_fu_637_p3 <= (xor_ln160_35_fu_628_p2 & trunc_ln160_fu_634_p1);
    xor_ln3_fu_261_p3 <= (xor_ln158_fu_251_p2 & trunc_ln158_14_fu_257_p1);
    zext_ln105_117_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_745),64));
    zext_ln105_118_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_549_p3),64));
    zext_ln105_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_740),64));
    zext_ln106_139_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_305_reg_826),33));
    zext_ln106_140_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_306_reg_810_pp0_iter5_reg),33));
    zext_ln106_141_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_307_reg_816_pp0_iter5_reg),33));
    zext_ln106_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_805),34));
    zext_ln110_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_750),64));
    zext_ln112_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_755),64));
    zext_ln123_107_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_174_reg_789),33));
    zext_ln123_108_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_387_p2),34));
    zext_ln123_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_175_reg_794),33));
    zext_ln130_107_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_133_fu_433_p2),34));
    zext_ln130_108_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_134_fu_443_p2),34));
    zext_ln130_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_176_reg_799_pp0_iter5_reg),33));
    zext_ln133_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_9_fu_496_p3),64));
    zext_ln156_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156),64));
    zext_ln158_21_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln158_fu_235_p2),7));
    zext_ln158_22_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln3_fu_261_p3),32));
    zext_ln158_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln158_fu_227_p1),32));
    zext_ln161_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_661_p3),3));
end behav;
