-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity sikep503_kem_enc_hw_EphemeralKeyGeneration_A_1_B_gen_1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 40
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of sikep503_kem_enc_hw_EphemeralKeyGeneration_A_1_B_gen_1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0111111011011110001101111111010011111010000010111100011100100111", 1 => "1111011111111000111011000101110010000101100110001001010000011100", 2 => "1101000101010101000110011011010100010110101101011111010111001000", 3 => "1111011011010101101011001001101110000111101000110110001010000010", 
    4 => "0111101100011001111100010000010110110011000011101001010100101110", 5 => "0001001110111101100010110010000000100101101101001110101111101110", 6 => "0111101110010110110100100111111101001110110001010111100110100010", 7 => "0000000000010100000010000101000011001010101101111110010111011110", 
    8 => "0111011101100100100100001001110110101110011110110111101100101101", 9 => "0101011110001010101110110001011000101000010010010001000110101011", 10 => "0111011011100010101111111101000101000110101001101011111101001101", 11 => "0100100000100100000001000100101100100011101010100000001011110000", 
    12 => "0001000100000101000001001000100100010010101000110010000111110011", 13 => "1011100010100010111001001000001011001111000011110001000011000001", 14 => "0100001011111111011111010000101111100010000101010010000010000101", 15 => "0000000000011000111001011001100111000101001000100011001101010010", 
    16 => "0100001001010110110001010010000011111011001110001000100000100000", 17 => "0111010001001111110101111100001110111010101011110000101000010011", 18 => "0100101101101010001011011101110110110001001011001011110010111000", 19 => "1110010001101000001001101110001001111111010000100111110111111000", 
    20 => "1111111001001010011001100011110011010101000001011010011000011011", 21 => "1101011010110011101000011011101011110000001001011100011010010101", 22 => "0111110000111011101101100010101110001111110011000000000010111101", 23 => "0000000000111010111111011101111001001010001101010111010001101100", 
    24 => "0111010101100000000111001101000111100110110000001101111111001011", 25 => "0001101010010000000001110010001110011011010110001111100100111110", 26 => "1100000111110001101111101000000011000110001000010000011110101100", 27 => "0111111101010001001110111000100110001111001010011111111100001000", 
    28 => "1110101000001011111011011111111101000011111000011111011110110010", 29 => "0010110001101101100101000000000110001100101110101110011011010000", 30 => "0011101001000011000011010011000110111100110110000100011001110010", 31 => "0000000000001101001001101000100100101110110011001111111010000011", 
    32 => "0001000100011001110101100010101011101010001100000000011110100001", 33 => "1110001101110000001010101010010011100000010010111010111000011011", 34 => "1001101010111001011011110111110101011001111110011001000011100111", 35 => "1111010110000100010000001110100010110100001100110001100111000000", 
    36 => "1010111110000001001101001011111011100001010010001001011101110101", 37 => "1110011111110111011101110100111010010000010100011001001010101010", 38 => "1111010101001010111000001001001100001000111010011000000000111001", 39 => "0000000000011110111101111010000001000001101010000110000100010010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

