-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_rdc_mont_139_Pipeline_VITIS_LOOP_206_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v_56 : IN STD_LOGIC_VECTOR (63 downto 0);
    u : IN STD_LOGIC_VECTOR (63 downto 0);
    sub66 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln181 : IN STD_LOGIC_VECTOR (6 downto 0);
    mc_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mc_ce0 : OUT STD_LOGIC;
    mc_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    v_81_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_81_out_ap_vld : OUT STD_LOGIC;
    u_46_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_46_out_ap_vld : OUT STD_LOGIC;
    t_30_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    t_30_out_ap_vld : OUT STD_LOGIC;
    grp_fu_901_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_901_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_901_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_901_p_ce : OUT STD_LOGIC;
    grp_fu_905_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_905_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_905_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_905_p_ce : OUT STD_LOGIC;
    grp_fu_909_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_909_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_909_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_909_p_ce : OUT STD_LOGIC;
    grp_fu_913_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_913_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_913_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_913_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_rdc_mont_139_Pipeline_VITIS_LOOP_206_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln206_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p503p1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503p1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln206_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_741_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_745_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_38_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_39_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_806 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_806_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_806_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_806_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_59_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_59_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_60_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_60_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_62_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_62_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_81_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_836_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_reg_841_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_reg_841_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_reg_846 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_851 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_851_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_851_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_432_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_reg_857 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln105_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_reg_867 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln210_fu_500_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln210_reg_872 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln210_reg_872_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln210_reg_872_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_19_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_19_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_19_reg_878_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln208_8_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln208_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_84 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_5_fu_686_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal u_46_fu_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal u_5_fu_619_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_92 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_5_fu_569_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_6_fu_96 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_199_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln206_fu_272_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mc_ce0_local : STD_LOGIC;
    signal p503p1_1_ce0_local : STD_LOGIC;
    signal zext_ln206_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln206_2_fu_236_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln208_fu_250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln206_fu_240_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln208_fu_261_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_390_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_31_fu_393_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_396_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_32_fu_402_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_387_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_406_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_429_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_32_fu_426_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_31_fu_438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_32_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_32_fu_449_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_31_fu_441_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_19_fu_453_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln210_8_fu_480_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln210_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln8_fu_473_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln210_fu_494_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_8_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_516_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_6_fu_509_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_75_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_134_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_135_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_552_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln105_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_67_fu_584_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_138_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_137_fu_589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_24_fu_599_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_139_fu_605_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel4_fu_634_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_136_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_26_fu_647_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln105_s_fu_650_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln105_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_84_fu_663_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_40_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln211_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_27_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503p1_1_U : component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503p1_1_address0,
        ce0 => p503p1_1_ce0_local,
        q0 => p503p1_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_6_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln206_fu_226_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_6_fu_96 <= add_ln206_fu_272_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_6_fu_96 <= indvars_iv_cast_fu_199_p1;
                end if;
            end if; 
        end if;
    end process;

    t_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_fu_84 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_fu_84 <= t_5_fu_686_p3;
                end if;
            end if; 
        end if;
    end process;

    u_46_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    u_46_fu_88 <= u;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    u_46_fu_88 <= u_5_fu_619_p3;
                end if;
            end if; 
        end if;
    end process;

    v_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_fu_92 <= v_56;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_fu_92 <= v_5_fu_569_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln130_reg_857 <= add_ln130_fu_432_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln206_reg_741_pp0_iter2_reg <= icmp_ln206_reg_741_pp0_iter1_reg;
                icmp_ln206_reg_741_pp0_iter3_reg <= icmp_ln206_reg_741_pp0_iter2_reg;
                icmp_ln206_reg_741_pp0_iter4_reg <= icmp_ln206_reg_741_pp0_iter3_reg;
                icmp_ln206_reg_741_pp0_iter5_reg <= icmp_ln206_reg_741_pp0_iter4_reg;
                icmp_ln206_reg_741_pp0_iter6_reg <= icmp_ln206_reg_741_pp0_iter5_reg;
                icmp_ln206_reg_741_pp0_iter7_reg <= icmp_ln206_reg_741_pp0_iter6_reg;
                icmp_ln207_reg_745_pp0_iter2_reg <= icmp_ln207_reg_745_pp0_iter1_reg;
                icmp_ln207_reg_745_pp0_iter3_reg <= icmp_ln207_reg_745_pp0_iter2_reg;
                icmp_ln207_reg_745_pp0_iter4_reg <= icmp_ln207_reg_745_pp0_iter3_reg;
                icmp_ln207_reg_745_pp0_iter5_reg <= icmp_ln207_reg_745_pp0_iter4_reg;
                icmp_ln207_reg_745_pp0_iter6_reg <= icmp_ln207_reg_745_pp0_iter5_reg;
                icmp_ln207_reg_745_pp0_iter7_reg <= icmp_ln207_reg_745_pp0_iter6_reg;
                icmp_ln207_reg_745_pp0_iter8_reg <= icmp_ln207_reg_745_pp0_iter7_reg;
                tempReg_19_reg_878 <= tempReg_19_fu_564_p2;
                tempReg_19_reg_878_pp0_iter8_reg <= tempReg_19_reg_878;
                tmp_80_reg_846 <= temp_fu_406_p2(33 downto 32);
                tmp_81_reg_831 <= grp_fu_909_p_dout0(63 downto 32);
                tmp_82_reg_841 <= grp_fu_913_p_dout0(63 downto 32);
                tmp_82_reg_841_pp0_iter4_reg <= tmp_82_reg_841;
                tmp_82_reg_841_pp0_iter5_reg <= tmp_82_reg_841_pp0_iter4_reg;
                tmp_83_reg_867 <= temp_19_fu_453_p2(33 downto 32);
                tmp_85_reg_887 <= xor_ln105_139_fu_605_p2(63 downto 63);
                tmp_s_reg_826 <= grp_fu_901_p_dout0(63 downto 32);
                trunc_ln105_reg_862 <= trunc_ln105_fu_459_p1;
                trunc_ln106_59_reg_811 <= trunc_ln106_59_fu_335_p1;
                trunc_ln106_60_reg_816 <= trunc_ln106_60_fu_339_p1;
                trunc_ln106_62_reg_821 <= trunc_ln106_62_fu_343_p1;
                trunc_ln106_reg_806 <= trunc_ln106_fu_331_p1;
                trunc_ln106_reg_806_pp0_iter4_reg <= trunc_ln106_reg_806;
                trunc_ln106_reg_806_pp0_iter5_reg <= trunc_ln106_reg_806_pp0_iter4_reg;
                trunc_ln106_reg_806_pp0_iter6_reg <= trunc_ln106_reg_806_pp0_iter5_reg;
                trunc_ln106_s_reg_836 <= grp_fu_905_p_dout0(63 downto 32);
                trunc_ln106_s_reg_836_pp0_iter4_reg <= trunc_ln106_s_reg_836;
                trunc_ln125_reg_851 <= trunc_ln125_fu_422_p1;
                trunc_ln125_reg_851_pp0_iter5_reg <= trunc_ln125_reg_851;
                trunc_ln125_reg_851_pp0_iter6_reg <= trunc_ln125_reg_851_pp0_iter5_reg;
                xor_ln210_reg_872 <= xor_ln210_fu_500_p2;
                xor_ln210_reg_872_pp0_iter7_reg <= xor_ln210_reg_872;
                xor_ln210_reg_872_pp0_iter8_reg <= xor_ln210_reg_872_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_772 <= mc_q0(63 downto 32);
                al_reg_762 <= al_fu_283_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_777 <= p503p1_1_q0(63 downto 32);
                bl_reg_767 <= bl_fu_287_p1;
                icmp_ln206_reg_741 <= icmp_ln206_fu_226_p2;
                icmp_ln206_reg_741_pp0_iter1_reg <= icmp_ln206_reg_741;
                icmp_ln207_reg_745 <= icmp_ln207_fu_244_p2;
                icmp_ln207_reg_745_pp0_iter1_reg <= icmp_ln207_reg_745;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln123_fu_396_p2 <= std_logic_vector(unsigned(zext_ln123_fu_390_p1) + unsigned(zext_ln123_31_fu_393_p1));
    add_ln130_32_fu_444_p2 <= std_logic_vector(unsigned(trunc_ln106_s_reg_836_pp0_iter4_reg) + unsigned(zext_ln106_31_fu_438_p1));
    add_ln130_fu_432_p2 <= std_logic_vector(unsigned(zext_ln130_fu_429_p1) + unsigned(zext_ln106_32_fu_426_p1));
    add_ln206_fu_272_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln208_fu_250_p2 <= std_logic_vector(unsigned(zext_ln181) + unsigned(zext_ln206_2_fu_236_p1));
    add_ln210_fu_494_p2 <= std_logic_vector(unsigned(zext_ln210_fu_487_p1) + unsigned(and_ln8_fu_473_p3));
    al_fu_283_p1 <= mc_q0(32 - 1 downto 0);
    and_ln105_fu_658_p2 <= (xor_ln210_reg_872_pp0_iter8_reg and xor_ln105_s_fu_650_p3);
    and_ln210_8_fu_480_p3 <= (tmp_83_reg_867 & ap_const_lv32_0);
    and_ln8_fu_473_p3 <= (tmp_82_reg_841_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln206_fu_226_p2)
    begin
        if (((icmp_ln206_fu_226_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_6_fu_96, indvars_iv_cast_fu_199_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_199_p1;
        else 
            ap_sig_allocacmp_j <= j_6_fu_96;
        end if; 
    end process;

    bit_sel4_fu_634_p3 <= tempReg_19_reg_878_pp0_iter8_reg(63 downto 63);
    bl_fu_287_p1 <= p503p1_1_q0(32 - 1 downto 0);
    carry_40_fu_671_p2 <= (tmp_85_reg_887 or tmp_84_fu_663_p3);
    carry_fu_552_p3 <= xor_ln105_135_fu_546_p2(63 downto 63);
    grp_fu_901_p_ce <= ap_const_logic_1;
    grp_fu_901_p_din0 <= zext_ln105_39_fu_321_p1(32 - 1 downto 0);
    grp_fu_901_p_din1 <= zext_ln105_38_fu_311_p1(32 - 1 downto 0);
    grp_fu_905_p_ce <= ap_const_logic_1;
    grp_fu_905_p_din0 <= zext_ln112_fu_326_p1(32 - 1 downto 0);
    grp_fu_905_p_din1 <= zext_ln105_38_fu_311_p1(32 - 1 downto 0);
    grp_fu_909_p_ce <= ap_const_logic_1;
    grp_fu_909_p_din0 <= zext_ln105_39_fu_321_p1(32 - 1 downto 0);
    grp_fu_909_p_din1 <= zext_ln110_fu_316_p1(32 - 1 downto 0);
    grp_fu_913_p_ce <= ap_const_logic_1;
    grp_fu_913_p_din0 <= zext_ln112_fu_326_p1(32 - 1 downto 0);
    grp_fu_913_p_din1 <= zext_ln110_fu_316_p1(32 - 1 downto 0);
    icmp_ln206_fu_226_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    icmp_ln207_fu_244_p2 <= "1" when (unsigned(zext_ln206_fu_232_p1) < unsigned(sub66)) else "0";
    indvars_iv_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    mc_address0 <= zext_ln208_8_fu_256_p1(7 - 1 downto 0);
    mc_ce0 <= mc_ce0_local;

    mc_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mc_ce0_local <= ap_const_logic_1;
        else 
            mc_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln105_24_fu_599_p2 <= (xor_ln105_138_fu_594_p2 or xor_ln105_137_fu_589_p2);
    or_ln105_fu_540_p2 <= (xor_ln105_fu_528_p2 or xor_ln105_134_fu_534_p2);
    p503p1_1_address0 <= zext_ln208_fu_267_p1(3 - 1 downto 0);

    p503p1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p503p1_1_ce0_local <= ap_const_logic_1;
        else 
            p503p1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln125_6_fu_509_p3 <= (trunc_ln125_reg_851_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln208_fu_261_p2 <= std_logic_vector(unsigned(empty) - unsigned(trunc_ln206_fu_240_p1));
    t_27_fu_680_p2 <= std_logic_vector(unsigned(t_fu_84) + unsigned(zext_ln211_fu_676_p1));
    t_30_out <= t_fu_84;

    t_30_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln206_reg_741_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln206_reg_741_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_30_out_ap_vld <= ap_const_logic_1;
        else 
            t_30_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_5_fu_686_p3 <= 
        t_27_fu_680_p2 when (icmp_ln207_reg_745_pp0_iter8_reg(0) = '1') else 
        t_fu_84;
    tempReg_19_fu_564_p2 <= std_logic_vector(unsigned(xor_ln210_reg_872) + unsigned(zext_ln105_fu_560_p1));
    tempReg_fu_516_p3 <= (trunc_ln125_reg_851_pp0_iter6_reg & trunc_ln106_reg_806_pp0_iter6_reg);
    temp_19_fu_453_p2 <= std_logic_vector(unsigned(zext_ln130_32_fu_449_p1) + unsigned(zext_ln130_31_fu_441_p1));
    temp_fu_406_p2 <= std_logic_vector(unsigned(zext_ln123_32_fu_402_p1) + unsigned(zext_ln106_fu_387_p1));
    tmp_84_fu_663_p3 <= and_ln105_fu_658_p2(63 downto 63);
    trunc_ln105_26_fu_647_p1 <= tempReg_19_reg_878_pp0_iter8_reg(63 - 1 downto 0);
    trunc_ln105_fu_459_p1 <= temp_19_fu_453_p2(32 - 1 downto 0);
    trunc_ln106_59_fu_335_p1 <= grp_fu_905_p_dout0(32 - 1 downto 0);
    trunc_ln106_60_fu_339_p1 <= grp_fu_909_p_dout0(32 - 1 downto 0);
    trunc_ln106_62_fu_343_p1 <= grp_fu_913_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_331_p1 <= grp_fu_901_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_422_p1 <= temp_fu_406_p2(32 - 1 downto 0);
    trunc_ln206_fu_240_p1 <= ap_sig_allocacmp_j(3 - 1 downto 0);
    u_46_out <= u_46_fu_88;

    u_46_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln206_reg_741_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln206_reg_741_pp0_iter7_reg = ap_const_lv1_1))) then 
            u_46_out_ap_vld <= ap_const_logic_1;
        else 
            u_46_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_5_fu_619_p3 <= 
        u_67_fu_584_p2 when (icmp_ln207_reg_745_pp0_iter7_reg(0) = '1') else 
        u_46_fu_88;
    u_67_fu_584_p2 <= std_logic_vector(unsigned(tempReg_19_reg_878) + unsigned(u_46_fu_88));
    v_5_fu_569_p3 <= 
        v_75_fu_522_p2 when (icmp_ln207_reg_745_pp0_iter6_reg(0) = '1') else 
        v_fu_92;
    v_75_fu_522_p2 <= std_logic_vector(unsigned(tempReg_fu_516_p3) + unsigned(v_fu_92));
    v_81_out <= v_fu_92;

    v_81_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln206_reg_741_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln206_reg_741_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_81_out_ap_vld <= ap_const_logic_1;
        else 
            v_81_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_134_fu_534_p2 <= (v_fu_92 xor shl_ln125_6_fu_509_p3);
    xor_ln105_135_fu_546_p2 <= (v_75_fu_522_p2 xor or_ln105_fu_540_p2);
    xor_ln105_136_fu_641_p2 <= (bit_sel4_fu_634_p3 xor ap_const_lv1_1);
    xor_ln105_137_fu_589_p2 <= (u_67_fu_584_p2 xor tempReg_19_reg_878);
    xor_ln105_138_fu_594_p2 <= (u_46_fu_88 xor tempReg_19_reg_878);
    xor_ln105_139_fu_605_p2 <= (u_67_fu_584_p2 xor or_ln105_24_fu_599_p2);
    xor_ln105_fu_528_p2 <= (v_75_fu_522_p2 xor shl_ln125_6_fu_509_p3);
    xor_ln105_s_fu_650_p3 <= (xor_ln105_136_fu_641_p2 & trunc_ln105_26_fu_647_p1);
    xor_ln210_fu_500_p2 <= (zext_ln210_8_fu_491_p1 xor add_ln210_fu_494_p2);
    zext_ln105_38_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_762),64));
    zext_ln105_39_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_767),64));
    zext_ln105_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_552_p3),64));
    zext_ln106_31_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_reg_846),32));
    zext_ln106_32_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_reg_831),33));
    zext_ln106_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_826),34));
    zext_ln110_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_772),64));
    zext_ln112_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_777),64));
    zext_ln123_31_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_59_reg_811),33));
    zext_ln123_32_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_396_p2),34));
    zext_ln123_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_60_reg_816),33));
    zext_ln130_31_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_857),34));
    zext_ln130_32_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_32_fu_444_p2),34));
    zext_ln130_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_62_reg_821),33));
    zext_ln206_2_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j),7));
    zext_ln206_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j),32));
    zext_ln208_8_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln208_fu_250_p2),32));
    zext_ln208_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln208_fu_261_p2),32));
    zext_ln210_8_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln105_reg_862),64));
    zext_ln210_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln210_8_fu_480_p3),64));
    zext_ln211_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_40_fu_671_p2),64));
end behav;
