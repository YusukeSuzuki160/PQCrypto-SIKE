-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_fp2mul503_mont_4_Pipeline_VITIS_LOOP_199_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tt3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tt3_ce0 : OUT STD_LOGIC;
    tt3_we0 : OUT STD_LOGIC;
    tt3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tt3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln191 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_fp2mul503_mont_4_Pipeline_VITIS_LOOP_199_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln199_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p503_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal borrow_reg_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln191_cast_fu_107_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln191_cast_reg_304 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln199_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_314_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tt3_addr_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal tt3_addr_reg_318_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal addr_cmp_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal tt3_load_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln200_fu_180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln200_reg_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_select_fu_193_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_select_reg_344 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_203_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln200_20_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln200_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_addr_reg_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reuse_reg_fu_56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln200_fu_209_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_213_fu_60 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln199_fu_175_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tt3_ce0_local : STD_LOGIC;
    signal tt3_address0_local : STD_LOGIC_VECTOR (3 downto 0);
    signal tt3_we0_local : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p503_1_ce0_local : STD_LOGIC;
    signal trunc_ln200_fu_139_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln200_21_cast_fu_148_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln200_21_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln200_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln200_20_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel4_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln200_21_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln200_12_fu_247_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln200_s_fu_250_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln200_fu_228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln200_22_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln200_7_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln200_7_fu_269_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_318 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_78_1_p503_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503_1_U : component sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_78_1_p503_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503_1_address0,
        ce0 => p503_1_ce0_local,
        q0 => p503_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    borrow_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_318)) then 
                    borrow_reg_96 <= or_ln200_7_fu_269_p2(63 downto 63);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    borrow_reg_96 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    i_213_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_213_fu_60 <= ap_const_lv4_0;
                elsif (((icmp_ln199_reg_314 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_213_fu_60 <= add_ln199_fu_175_p2;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                reuse_addr_reg_fu_52(0) <= '1';
                reuse_addr_reg_fu_52(1) <= '1';
                reuse_addr_reg_fu_52(2) <= '1';
                reuse_addr_reg_fu_52(4) <= '1';
                reuse_addr_reg_fu_52(5) <= '1';
                reuse_addr_reg_fu_52(6) <= '1';
                reuse_addr_reg_fu_52(7) <= '1';
                reuse_addr_reg_fu_52(8) <= '1';
                reuse_addr_reg_fu_52(9) <= '1';
                reuse_addr_reg_fu_52(10) <= '1';
                reuse_addr_reg_fu_52(11) <= '1';
                reuse_addr_reg_fu_52(12) <= '1';
                reuse_addr_reg_fu_52(13) <= '1';
                reuse_addr_reg_fu_52(14) <= '1';
                reuse_addr_reg_fu_52(15) <= '1';
                reuse_addr_reg_fu_52(16) <= '1';
                reuse_addr_reg_fu_52(17) <= '1';
                reuse_addr_reg_fu_52(18) <= '1';
                reuse_addr_reg_fu_52(19) <= '1';
                reuse_addr_reg_fu_52(20) <= '1';
                reuse_addr_reg_fu_52(21) <= '1';
                reuse_addr_reg_fu_52(22) <= '1';
                reuse_addr_reg_fu_52(23) <= '1';
                reuse_addr_reg_fu_52(24) <= '1';
                reuse_addr_reg_fu_52(25) <= '1';
                reuse_addr_reg_fu_52(26) <= '1';
                reuse_addr_reg_fu_52(27) <= '1';
                reuse_addr_reg_fu_52(28) <= '1';
                reuse_addr_reg_fu_52(29) <= '1';
                reuse_addr_reg_fu_52(30) <= '1';
                reuse_addr_reg_fu_52(31) <= '1';
            elsif (((icmp_ln199_fu_133_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                                reuse_addr_reg_fu_52(2 downto 0) <= zext_ln200_20_fu_156_p1(2 downto 0);                reuse_addr_reg_fu_52(31 downto 4) <= zext_ln200_20_fu_156_p1(31 downto 4);
            end if; 
        end if;
    end process;

    reuse_reg_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg_fu_56 <= ap_const_lv64_0;
                elsif (((icmp_ln199_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    reuse_reg_fu_56 <= add_ln200_fu_209_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                addr_cmp_reg_323 <= addr_cmp_fu_164_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                i_reg_309 <= i_213_fu_60;
                icmp_ln199_reg_314 <= icmp_ln199_fu_133_p2;
                icmp_ln199_reg_314_pp0_iter1_reg <= icmp_ln199_reg_314;
                reuse_select_reg_344 <= reuse_select_fu_193_p3;
                tempReg_reg_349 <= tempReg_fu_203_p2;
                    tt3_addr_reg_318(2 downto 0) <= zext_ln200_20_fu_156_p1(4 - 1 downto 0)(2 downto 0);
                    tt3_addr_reg_318_pp0_iter1_reg(2 downto 0) <= tt3_addr_reg_318(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln200_reg_338 <= and_ln200_fu_180_p2;
                sext_ln191_cast_reg_304 <= sext_ln191_cast_fu_107_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tt3_load_reg_333 <= tt3_q0;
            end if;
        end if;
    end process;
    tt3_addr_reg_318(3) <= '1';
    tt3_addr_reg_318_pp0_iter1_reg(3) <= '1';
    reuse_addr_reg_fu_52(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln199_fu_175_p2 <= std_logic_vector(unsigned(i_reg_309) + unsigned(ap_const_lv4_1));
    add_ln200_fu_209_p2 <= std_logic_vector(unsigned(and_ln200_reg_338) + unsigned(tempReg_reg_349));
    addr_cmp_fu_164_p2 <= "1" when (reuse_addr_reg_fu_52 = zext_ln200_20_fu_156_p1) else "0";
    and_ln200_7_fu_258_p2 <= (xor_ln200_s_fu_250_p3 and reuse_select_reg_344);
    and_ln200_fu_180_p2 <= (sext_ln191_cast_reg_304 and p503_1_q0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_318_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln199_reg_314_pp0_iter1_reg)
    begin
                ap_condition_318 <= ((icmp_ln199_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln199_fu_133_p2)
    begin
        if (((icmp_ln199_fu_133_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln199_reg_314)
    begin
        if (((icmp_ln199_reg_314 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel4_fu_234_p3 <= tempReg_reg_349(63 downto 63);
    icmp_ln199_fu_133_p2 <= "1" when (i_213_fu_60 = ap_const_lv4_8) else "0";
    or_ln200_7_fu_269_p2 <= (xor_ln200_22_fu_263_p2 or and_ln200_7_fu_258_p2);
    or_ln200_fu_228_p2 <= (xor_ln200_fu_219_p2 or xor_ln200_20_fu_224_p2);
    p503_1_address0 <= zext_ln200_fu_143_p1(3 - 1 downto 0);

    p503_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            p503_1_ce0_local <= ap_const_logic_1;
        else 
            p503_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    reuse_select_fu_193_p3 <= 
        reuse_reg_fu_56 when (addr_cmp_reg_323(0) = '1') else 
        tt3_load_reg_333;
    sext_ln191_cast_fu_107_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (sext_ln191(0) = '1') else 
        ap_const_lv64_0;
    tempReg_fu_203_p2 <= std_logic_vector(unsigned(reuse_select_fu_193_p3) + unsigned(zext_ln200_21_fu_199_p1));
    trunc_ln200_12_fu_247_p1 <= tempReg_reg_349(63 - 1 downto 0);
    trunc_ln200_fu_139_p1 <= i_213_fu_60(3 - 1 downto 0);
    tt3_address0 <= tt3_address0_local;

    tt3_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, tt3_addr_reg_318_pp0_iter1_reg, zext_ln200_20_fu_156_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tt3_address0_local <= tt3_addr_reg_318_pp0_iter1_reg;
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tt3_address0_local <= zext_ln200_20_fu_156_p1(4 - 1 downto 0);
        else 
            tt3_address0_local <= "XXXX";
        end if; 
    end process;

    tt3_ce0 <= tt3_ce0_local;

    tt3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            tt3_ce0_local <= ap_const_logic_1;
        else 
            tt3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    tt3_d0 <= add_ln200_fu_209_p2;
    tt3_we0 <= tt3_we0_local;

    tt3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln199_reg_314_pp0_iter1_reg)
    begin
        if (((icmp_ln199_reg_314_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tt3_we0_local <= ap_const_logic_1;
        else 
            tt3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln200_20_fu_224_p2 <= (tempReg_reg_349 xor and_ln200_reg_338);
    xor_ln200_21_fu_241_p2 <= (bit_sel4_fu_234_p3 xor ap_const_lv1_1);
    xor_ln200_22_fu_263_p2 <= (or_ln200_fu_228_p2 xor add_ln200_fu_209_p2);
    xor_ln200_fu_219_p2 <= (tempReg_reg_349 xor add_ln200_fu_209_p2);
    xor_ln200_s_fu_250_p3 <= (xor_ln200_21_fu_241_p2 & trunc_ln200_12_fu_247_p1);
    zext_ln200_20_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln200_21_cast_fu_148_p3),32));
    zext_ln200_21_cast_fu_148_p3 <= (ap_const_lv1_1 & trunc_ln200_fu_139_p1);
    zext_ln200_21_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(borrow_reg_96),64));
    zext_ln200_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln200_fu_139_p1),32));
end behav;
