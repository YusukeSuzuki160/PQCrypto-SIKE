-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_rdc_mont_1_Pipeline_VITIS_LOOP_206_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v_46 : IN STD_LOGIC_VECTOR (63 downto 0);
    u : IN STD_LOGIC_VECTOR (63 downto 0);
    sub66 : IN STD_LOGIC_VECTOR (31 downto 0);
    PKB_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    PKB_ce0 : OUT STD_LOGIC;
    PKB_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    v_99_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_99_out_ap_vld : OUT STD_LOGIC;
    u_46_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_46_out_ap_vld : OUT STD_LOGIC;
    t_25_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    t_25_out_ap_vld : OUT STD_LOGIC;
    grp_fu_832_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_832_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_832_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_832_p_ce : OUT STD_LOGIC;
    grp_fu_836_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_836_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_836_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_836_p_ce : OUT STD_LOGIC;
    grp_fu_840_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_840_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_840_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_840_p_ce : OUT STD_LOGIC;
    grp_fu_844_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_844_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_844_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_844_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_rdc_mont_1_Pipeline_VITIS_LOOP_206_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln206_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p503p1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503p1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln206_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln206_reg_719_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_723_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_24_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_784_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_34_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_34_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_35_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_35_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_36_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_36_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_814_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_819_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_819_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_824 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_829_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_829_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_410_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_reg_835 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln105_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_845 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln210_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln210_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln210_reg_850_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln210_reg_850_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_11_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_11_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_11_reg_856_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_reg_865 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln206_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln208_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_82 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_5_fu_664_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal u_42_fu_86 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal u_5_fu_597_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_90 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_5_fu_547_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_5_fu_94 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_191_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln206_fu_250_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal PKB_ce0_local : STD_LOGIC;
    signal p503p1_1_ce0_local : STD_LOGIC;
    signal trunc_ln206_fu_229_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln208_fu_239_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_368_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_16_fu_371_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_374_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_17_fu_380_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_365_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_384_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_407_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_17_fu_404_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_16_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_17_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_17_fu_427_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_16_fu_419_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_11_fu_431_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln210_9_fu_458_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln210_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_451_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln210_fu_472_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln210_5_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_494_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_5_fu_487_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_47_fu_500_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_71_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_72_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln105_25_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_43_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_75_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_74_fu_567_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_13_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_76_fu_583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel4_fu_612_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_73_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_15_fu_625_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln105_s_fu_628_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln105_fu_636_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_23_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln211_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_16_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503p1_1_U : component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503p1_1_address0,
        ce0 => p503p1_1_ce0_local,
        q0 => p503p1_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_5_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln206_fu_218_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_5_fu_94 <= add_ln206_fu_250_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_5_fu_94 <= indvars_iv_cast_fu_191_p1;
                end if;
            end if; 
        end if;
    end process;

    t_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_fu_82 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_fu_82 <= t_5_fu_664_p3;
                end if;
            end if; 
        end if;
    end process;

    u_42_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    u_42_fu_86 <= u;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    u_42_fu_86 <= u_5_fu_597_p3;
                end if;
            end if; 
        end if;
    end process;

    v_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_fu_90 <= v_46;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_fu_90 <= v_5_fu_547_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln130_reg_835 <= add_ln130_fu_410_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln206_reg_719_pp0_iter2_reg <= icmp_ln206_reg_719_pp0_iter1_reg;
                icmp_ln206_reg_719_pp0_iter3_reg <= icmp_ln206_reg_719_pp0_iter2_reg;
                icmp_ln206_reg_719_pp0_iter4_reg <= icmp_ln206_reg_719_pp0_iter3_reg;
                icmp_ln206_reg_719_pp0_iter5_reg <= icmp_ln206_reg_719_pp0_iter4_reg;
                icmp_ln206_reg_719_pp0_iter6_reg <= icmp_ln206_reg_719_pp0_iter5_reg;
                icmp_ln206_reg_719_pp0_iter7_reg <= icmp_ln206_reg_719_pp0_iter6_reg;
                icmp_ln207_reg_723_pp0_iter2_reg <= icmp_ln207_reg_723_pp0_iter1_reg;
                icmp_ln207_reg_723_pp0_iter3_reg <= icmp_ln207_reg_723_pp0_iter2_reg;
                icmp_ln207_reg_723_pp0_iter4_reg <= icmp_ln207_reg_723_pp0_iter3_reg;
                icmp_ln207_reg_723_pp0_iter5_reg <= icmp_ln207_reg_723_pp0_iter4_reg;
                icmp_ln207_reg_723_pp0_iter6_reg <= icmp_ln207_reg_723_pp0_iter5_reg;
                icmp_ln207_reg_723_pp0_iter7_reg <= icmp_ln207_reg_723_pp0_iter6_reg;
                icmp_ln207_reg_723_pp0_iter8_reg <= icmp_ln207_reg_723_pp0_iter7_reg;
                tempReg_11_reg_856 <= tempReg_11_fu_542_p2;
                tempReg_11_reg_856_pp0_iter8_reg <= tempReg_11_reg_856;
                tmp_40_reg_824 <= temp_fu_384_p2(33 downto 32);
                tmp_41_reg_809 <= grp_fu_840_p_dout0(63 downto 32);
                tmp_42_reg_819 <= grp_fu_844_p_dout0(63 downto 32);
                tmp_42_reg_819_pp0_iter4_reg <= tmp_42_reg_819;
                tmp_42_reg_819_pp0_iter5_reg <= tmp_42_reg_819_pp0_iter4_reg;
                tmp_43_reg_845 <= temp_11_fu_431_p2(33 downto 32);
                tmp_48_reg_865 <= xor_ln105_76_fu_583_p2(63 downto 63);
                tmp_s_reg_804 <= grp_fu_832_p_dout0(63 downto 32);
                trunc_ln105_reg_840 <= trunc_ln105_fu_437_p1;
                trunc_ln106_34_reg_789 <= trunc_ln106_34_fu_313_p1;
                trunc_ln106_35_reg_794 <= trunc_ln106_35_fu_317_p1;
                trunc_ln106_36_reg_799 <= trunc_ln106_36_fu_321_p1;
                trunc_ln106_reg_784 <= trunc_ln106_fu_309_p1;
                trunc_ln106_reg_784_pp0_iter4_reg <= trunc_ln106_reg_784;
                trunc_ln106_reg_784_pp0_iter5_reg <= trunc_ln106_reg_784_pp0_iter4_reg;
                trunc_ln106_reg_784_pp0_iter6_reg <= trunc_ln106_reg_784_pp0_iter5_reg;
                trunc_ln106_s_reg_814 <= grp_fu_836_p_dout0(63 downto 32);
                trunc_ln106_s_reg_814_pp0_iter4_reg <= trunc_ln106_s_reg_814;
                trunc_ln125_reg_829 <= trunc_ln125_fu_400_p1;
                trunc_ln125_reg_829_pp0_iter5_reg <= trunc_ln125_reg_829;
                trunc_ln125_reg_829_pp0_iter6_reg <= trunc_ln125_reg_829_pp0_iter5_reg;
                xor_ln210_reg_850 <= xor_ln210_fu_478_p2;
                xor_ln210_reg_850_pp0_iter7_reg <= xor_ln210_reg_850;
                xor_ln210_reg_850_pp0_iter8_reg <= xor_ln210_reg_850_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_750 <= PKB_q0(63 downto 32);
                al_reg_740 <= al_fu_261_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_755 <= p503p1_1_q0(63 downto 32);
                bl_reg_745 <= bl_fu_265_p1;
                icmp_ln206_reg_719 <= icmp_ln206_fu_218_p2;
                icmp_ln206_reg_719_pp0_iter1_reg <= icmp_ln206_reg_719;
                icmp_ln207_reg_723 <= icmp_ln207_fu_233_p2;
                icmp_ln207_reg_723_pp0_iter1_reg <= icmp_ln207_reg_723;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    PKB_address0 <= zext_ln206_fu_224_p1(6 - 1 downto 0);
    PKB_ce0 <= PKB_ce0_local;

    PKB_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            PKB_ce0_local <= ap_const_logic_1;
        else 
            PKB_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln123_fu_374_p2 <= std_logic_vector(unsigned(zext_ln123_fu_368_p1) + unsigned(zext_ln123_16_fu_371_p1));
    add_ln130_17_fu_422_p2 <= std_logic_vector(unsigned(trunc_ln106_s_reg_814_pp0_iter4_reg) + unsigned(zext_ln106_16_fu_416_p1));
    add_ln130_fu_410_p2 <= std_logic_vector(unsigned(zext_ln130_fu_407_p1) + unsigned(zext_ln106_17_fu_404_p1));
    add_ln206_fu_250_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln210_fu_472_p2 <= std_logic_vector(unsigned(zext_ln210_fu_465_p1) + unsigned(and_ln_fu_451_p3));
    al_fu_261_p1 <= PKB_q0(32 - 1 downto 0);
    and_ln105_fu_636_p2 <= (xor_ln210_reg_850_pp0_iter8_reg and xor_ln105_s_fu_628_p3);
    and_ln210_9_fu_458_p3 <= (tmp_43_reg_845 & ap_const_lv32_0);
    and_ln_fu_451_p3 <= (tmp_42_reg_819_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln206_fu_218_p2)
    begin
        if (((icmp_ln206_fu_218_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_5_fu_94, indvars_iv_cast_fu_191_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_191_p1;
        else 
            ap_sig_allocacmp_j <= j_5_fu_94;
        end if; 
    end process;

    bit_sel4_fu_612_p3 <= tempReg_11_reg_856_pp0_iter8_reg(63 downto 63);
    bl_fu_265_p1 <= p503p1_1_q0(32 - 1 downto 0);
    carry_23_fu_649_p2 <= (tmp_48_reg_865 or tmp_47_fu_641_p3);
    carry_fu_530_p3 <= xor_ln105_72_fu_524_p2(63 downto 63);
    grp_fu_832_p_ce <= ap_const_logic_1;
    grp_fu_832_p_din0 <= zext_ln105_24_fu_299_p1(32 - 1 downto 0);
    grp_fu_832_p_din1 <= zext_ln105_fu_289_p1(32 - 1 downto 0);
    grp_fu_836_p_ce <= ap_const_logic_1;
    grp_fu_836_p_din0 <= zext_ln112_fu_304_p1(32 - 1 downto 0);
    grp_fu_836_p_din1 <= zext_ln105_fu_289_p1(32 - 1 downto 0);
    grp_fu_840_p_ce <= ap_const_logic_1;
    grp_fu_840_p_din0 <= zext_ln105_24_fu_299_p1(32 - 1 downto 0);
    grp_fu_840_p_din1 <= zext_ln110_fu_294_p1(32 - 1 downto 0);
    grp_fu_844_p_ce <= ap_const_logic_1;
    grp_fu_844_p_din0 <= zext_ln112_fu_304_p1(32 - 1 downto 0);
    grp_fu_844_p_din1 <= zext_ln110_fu_294_p1(32 - 1 downto 0);
    icmp_ln206_fu_218_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    icmp_ln207_fu_233_p2 <= "1" when (unsigned(zext_ln206_fu_224_p1) < unsigned(sub66)) else "0";
    indvars_iv_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    or_ln105_13_fu_577_p2 <= (xor_ln105_75_fu_572_p2 or xor_ln105_74_fu_567_p2);
    or_ln105_fu_518_p2 <= (xor_ln105_fu_506_p2 or xor_ln105_71_fu_512_p2);
    p503p1_1_address0 <= zext_ln208_fu_245_p1(3 - 1 downto 0);

    p503p1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p503p1_1_ce0_local <= ap_const_logic_1;
        else 
            p503p1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln125_5_fu_487_p3 <= (trunc_ln125_reg_829_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln208_fu_239_p2 <= std_logic_vector(unsigned(empty) - unsigned(trunc_ln206_fu_229_p1));
    t_16_fu_658_p2 <= std_logic_vector(unsigned(t_fu_82) + unsigned(zext_ln211_fu_654_p1));
    t_25_out <= t_fu_82;

    t_25_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln206_reg_719_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln206_reg_719_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_25_out_ap_vld <= ap_const_logic_1;
        else 
            t_25_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_5_fu_664_p3 <= 
        t_16_fu_658_p2 when (icmp_ln207_reg_723_pp0_iter8_reg(0) = '1') else 
        t_fu_82;
    tempReg_11_fu_542_p2 <= std_logic_vector(unsigned(xor_ln210_reg_850) + unsigned(zext_ln105_25_fu_538_p1));
    tempReg_fu_494_p3 <= (trunc_ln125_reg_829_pp0_iter6_reg & trunc_ln106_reg_784_pp0_iter6_reg);
    temp_11_fu_431_p2 <= std_logic_vector(unsigned(zext_ln130_17_fu_427_p1) + unsigned(zext_ln130_16_fu_419_p1));
    temp_fu_384_p2 <= std_logic_vector(unsigned(zext_ln123_17_fu_380_p1) + unsigned(zext_ln106_fu_365_p1));
    tmp_47_fu_641_p3 <= and_ln105_fu_636_p2(63 downto 63);
    trunc_ln105_15_fu_625_p1 <= tempReg_11_reg_856_pp0_iter8_reg(63 - 1 downto 0);
    trunc_ln105_fu_437_p1 <= temp_11_fu_431_p2(32 - 1 downto 0);
    trunc_ln106_34_fu_313_p1 <= grp_fu_836_p_dout0(32 - 1 downto 0);
    trunc_ln106_35_fu_317_p1 <= grp_fu_840_p_dout0(32 - 1 downto 0);
    trunc_ln106_36_fu_321_p1 <= grp_fu_844_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_309_p1 <= grp_fu_832_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_400_p1 <= temp_fu_384_p2(32 - 1 downto 0);
    trunc_ln206_fu_229_p1 <= ap_sig_allocacmp_j(3 - 1 downto 0);
    u_43_fu_562_p2 <= std_logic_vector(unsigned(tempReg_11_reg_856) + unsigned(u_42_fu_86));
    u_46_out <= u_42_fu_86;

    u_46_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln206_reg_719_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln206_reg_719_pp0_iter7_reg = ap_const_lv1_1))) then 
            u_46_out_ap_vld <= ap_const_logic_1;
        else 
            u_46_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_5_fu_597_p3 <= 
        u_43_fu_562_p2 when (icmp_ln207_reg_723_pp0_iter7_reg(0) = '1') else 
        u_42_fu_86;
    v_47_fu_500_p2 <= std_logic_vector(unsigned(tempReg_fu_494_p3) + unsigned(v_fu_90));
    v_5_fu_547_p3 <= 
        v_47_fu_500_p2 when (icmp_ln207_reg_723_pp0_iter6_reg(0) = '1') else 
        v_fu_90;
    v_99_out <= v_fu_90;

    v_99_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln206_reg_719_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln206_reg_719_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_99_out_ap_vld <= ap_const_logic_1;
        else 
            v_99_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_71_fu_512_p2 <= (v_fu_90 xor shl_ln125_5_fu_487_p3);
    xor_ln105_72_fu_524_p2 <= (v_47_fu_500_p2 xor or_ln105_fu_518_p2);
    xor_ln105_73_fu_619_p2 <= (bit_sel4_fu_612_p3 xor ap_const_lv1_1);
    xor_ln105_74_fu_567_p2 <= (u_43_fu_562_p2 xor tempReg_11_reg_856);
    xor_ln105_75_fu_572_p2 <= (u_42_fu_86 xor tempReg_11_reg_856);
    xor_ln105_76_fu_583_p2 <= (u_43_fu_562_p2 xor or_ln105_13_fu_577_p2);
    xor_ln105_fu_506_p2 <= (v_47_fu_500_p2 xor shl_ln125_5_fu_487_p3);
    xor_ln105_s_fu_628_p3 <= (xor_ln105_73_fu_619_p2 & trunc_ln105_15_fu_625_p1);
    xor_ln210_fu_478_p2 <= (zext_ln210_5_fu_469_p1 xor add_ln210_fu_472_p2);
    zext_ln105_24_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_745),64));
    zext_ln105_25_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_530_p3),64));
    zext_ln105_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_740),64));
    zext_ln106_16_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_reg_824),32));
    zext_ln106_17_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_reg_809),33));
    zext_ln106_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_804),34));
    zext_ln110_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_750),64));
    zext_ln112_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_755),64));
    zext_ln123_16_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_34_reg_789),33));
    zext_ln123_17_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_374_p2),34));
    zext_ln123_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_35_reg_794),33));
    zext_ln130_16_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_835),34));
    zext_ln130_17_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_17_fu_422_p2),34));
    zext_ln130_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_36_reg_799),33));
    zext_ln206_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j),32));
    zext_ln208_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln208_fu_239_p2),32));
    zext_ln210_5_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln105_reg_840),64));
    zext_ln210_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln210_9_fu_458_p3),64));
    zext_ln211_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_23_fu_649_p2),64));
end behav;
