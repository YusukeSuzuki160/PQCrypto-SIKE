-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_26_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    temp_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    temp_1_ce0 : OUT STD_LOGIC;
    temp_1_we0 : OUT STD_LOGIC;
    temp_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    temp_2_ce0 : OUT STD_LOGIC;
    temp_2_we0 : OUT STD_LOGIC;
    temp_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_3_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    temp_3_ce0 : OUT STD_LOGIC;
    temp_3_we0 : OUT STD_LOGIC;
    temp_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_26_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3C6EF35F : STD_LOGIC_VECTOR (31 downto 0) := "00111100011011101111001101011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lcg_state : STD_LOGIC_VECTOR (31 downto 0) := "00010010001101000101011001111000";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln26_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_354_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_fu_157_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln26_reg_358 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln26_reg_358_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_362 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_362_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln28_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_367 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_367_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newFirst18_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newFirst18_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal newFirst_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newFirst_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSecond21_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSecond21_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_1_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_r_2_phi_fu_131_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_r_2_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_r_2_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_r_2_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_68 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_284_fu_151_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_283 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_72 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal temp_2_we0_local : STD_LOGIC;
    signal trunc_ln32_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_ce0_local : STD_LOGIC;
    signal temp_1_we0_local : STD_LOGIC;
    signal temp_1_ce0_local : STD_LOGIC;
    signal temp_we0_local : STD_LOGIC;
    signal temp_ce0_local : STD_LOGIC;
    signal temp_3_we0_local : STD_LOGIC;
    signal temp_3_ce0_local : STD_LOGIC;
    signal shl_ln17_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_1_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_2_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_3_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_5_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_4_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_7_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_6_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln17_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln17_8_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln17_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newFirst22_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSecond23_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newFirst20_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSecond19_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_117 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_r_2_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_117)) then
                if (((icmp_ln28_reg_367 = ap_const_lv1_1) and (icmp_ln26_reg_354 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_r_2_reg_128 <= r_1_fu_292_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_r_2_reg_128 <= ap_phi_reg_pp0_iter1_r_2_reg_128;
                end if;
            end if; 
        end if;
    end process;

    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_145_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= i_284_fu_151_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln26_reg_354 <= icmp_ln26_fu_145_p2;
                icmp_ln26_reg_354_pp0_iter1_reg <= icmp_ln26_reg_354;
                icmp_ln28_reg_367 <= icmp_ln28_fu_171_p2;
                icmp_ln28_reg_367_pp0_iter1_reg <= icmp_ln28_reg_367;
                lshr_ln_reg_362 <= ap_sig_allocacmp_i_283(4 downto 2);
                lshr_ln_reg_362_pp0_iter1_reg <= lshr_ln_reg_362;
                newFirst18_reg_371 <= newFirst18_fu_247_p2;
                newFirst_reg_376 <= newFirst_fu_265_p2;
                newSecond21_reg_381 <= newSecond21_fu_277_p2;
                trunc_ln26_reg_358 <= trunc_ln26_fu_157_p1;
                trunc_ln26_reg_358_pp0_iter1_reg <= trunc_ln26_reg_358;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_r_2_reg_128 <= ap_phi_reg_pp0_iter0_r_2_reg_128;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_367 = ap_const_lv1_1) and (icmp_ln26_reg_354 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lcg_state <= r_1_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                r_fu_72 <= ap_phi_mux_r_2_phi_fu_131_p4(31 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln17_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv32_3C6EF35F) + unsigned(lcg_state));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_117_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_117 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_145_p2)
    begin
        if (((icmp_ln26_fu_145_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_r_2_phi_fu_131_p4_assign_proc : process(icmp_ln26_reg_354_pp0_iter1_reg, icmp_ln28_reg_367_pp0_iter1_reg, ap_phi_reg_pp0_iter2_r_2_reg_128, zext_ln26_fu_306_p1)
    begin
        if (((icmp_ln28_reg_367_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln26_reg_354_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_r_2_phi_fu_131_p4 <= zext_ln26_fu_306_p1;
        else 
            ap_phi_mux_r_2_phi_fu_131_p4 <= ap_phi_reg_pp0_iter2_r_2_reg_128;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_r_2_reg_128 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_283_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_283 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_283 <= i_fu_68;
        end if; 
    end process;

    i_284_fu_151_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_283) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_145_p2 <= "1" when (ap_sig_allocacmp_i_283 = ap_const_lv5_18) else "0";
    icmp_ln28_fu_171_p2 <= "1" when (trunc_ln26_fu_157_p1 = ap_const_lv2_0) else "0";
    newFirst18_fu_247_p2 <= std_logic_vector(unsigned(shl_ln17_7_fu_241_p2) - unsigned(shl_ln17_6_fu_235_p2));
    newFirst20_fu_229_p2 <= std_logic_vector(unsigned(shl_ln17_5_fu_223_p2) - unsigned(shl_ln17_4_fu_217_p2));
    newFirst22_fu_211_p2 <= std_logic_vector(unsigned(shl_ln17_2_fu_199_p2) - unsigned(shl_ln17_3_fu_205_p2));
    newFirst_fu_265_p2 <= std_logic_vector(unsigned(add_ln17_fu_259_p2) - unsigned(shl_ln17_8_fu_253_p2));
    newSecond19_fu_288_p2 <= std_logic_vector(unsigned(newSecond21_reg_381) + unsigned(newFirst18_reg_371));
    newSecond21_fu_277_p2 <= std_logic_vector(unsigned(newSecond23_fu_271_p2) + unsigned(newFirst20_fu_229_p2));
    newSecond23_fu_271_p2 <= std_logic_vector(unsigned(sub_ln17_fu_193_p2) + unsigned(newFirst22_fu_211_p2));
    r_1_fu_292_p2 <= std_logic_vector(unsigned(newSecond19_fu_288_p2) + unsigned(newFirst_reg_376));
    shl_ln17_1_fu_187_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_13(31-1 downto 0)))));
    shl_ln17_2_fu_199_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_11(31-1 downto 0)))));
    shl_ln17_3_fu_205_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    shl_ln17_4_fu_217_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    shl_ln17_5_fu_223_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln17_6_fu_235_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_9(31-1 downto 0)))));
    shl_ln17_7_fu_241_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln17_8_fu_253_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln17_fu_181_p2 <= std_logic_vector(shift_left(unsigned(lcg_state),to_integer(unsigned('0' & ap_const_lv32_15(31-1 downto 0)))));
    sub_ln17_fu_193_p2 <= std_logic_vector(unsigned(shl_ln17_fu_181_p2) - unsigned(shl_ln17_1_fu_187_p2));
    temp_1_address0 <= zext_ln32_fu_319_p1(7 - 1 downto 0);
    temp_1_ce0 <= temp_1_ce0_local;

    temp_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_1_ce0_local <= ap_const_logic_1;
        else 
            temp_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_1_d0 <= trunc_ln32_fu_311_p1;
    temp_1_we0 <= temp_1_we0_local;

    temp_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln26_reg_358_pp0_iter1_reg)
    begin
        if (((trunc_ln26_reg_358_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_1_we0_local <= ap_const_logic_1;
        else 
            temp_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_2_address0 <= zext_ln32_fu_319_p1(7 - 1 downto 0);
    temp_2_ce0 <= temp_2_ce0_local;

    temp_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_2_ce0_local <= ap_const_logic_1;
        else 
            temp_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_2_d0 <= trunc_ln32_fu_311_p1;
    temp_2_we0 <= temp_2_we0_local;

    temp_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln26_reg_358_pp0_iter1_reg)
    begin
        if (((trunc_ln26_reg_358_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_2_we0_local <= ap_const_logic_1;
        else 
            temp_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_3_address0 <= zext_ln32_fu_319_p1(7 - 1 downto 0);
    temp_3_ce0 <= temp_3_ce0_local;

    temp_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_3_ce0_local <= ap_const_logic_1;
        else 
            temp_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_3_d0 <= trunc_ln32_fu_311_p1;
    temp_3_we0 <= temp_3_we0_local;

    temp_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln26_reg_358_pp0_iter1_reg)
    begin
        if (((trunc_ln26_reg_358_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_3_we0_local <= ap_const_logic_1;
        else 
            temp_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_address0 <= zext_ln32_fu_319_p1(7 - 1 downto 0);
    temp_ce0 <= temp_ce0_local;

    temp_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_ce0_local <= ap_const_logic_1;
        else 
            temp_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    temp_d0 <= trunc_ln32_fu_311_p1;
    temp_we0 <= temp_we0_local;

    temp_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln26_reg_358_pp0_iter1_reg)
    begin
        if (((trunc_ln26_reg_358_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            temp_we0_local <= ap_const_logic_1;
        else 
            temp_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln26_fu_157_p1 <= ap_sig_allocacmp_i_283(2 - 1 downto 0);
    trunc_ln32_fu_311_p1 <= ap_phi_mux_r_2_phi_fu_131_p4(8 - 1 downto 0);
    zext_ln26_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_72),32));
    zext_ln32_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_362_pp0_iter1_reg),32));
end behav;
