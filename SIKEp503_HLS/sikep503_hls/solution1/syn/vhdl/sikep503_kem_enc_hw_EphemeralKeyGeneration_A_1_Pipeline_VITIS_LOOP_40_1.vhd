-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_EphemeralKeyGeneration_A_1_Pipeline_VITIS_LOOP_40_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    PublicKeyA : IN STD_LOGIC_VECTOR (31 downto 0);
    t_i_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    t_i_ce0 : OUT STD_LOGIC;
    t_i_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    t_i_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    t_i_ce1 : OUT STD_LOGIC;
    t_i_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_EphemeralKeyGeneration_A_1_Pipeline_VITIS_LOOP_40_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone_grp2_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp3_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln40_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp1_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage1_grp2 : BOOLEAN;
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage1_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_grp4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp4_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp4 : BOOLEAN;
    signal i_294_reg_258 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln40_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_i_load_reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage1_subdone_grp0 : BOOLEAN;
    signal gmem0_addr_2_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001_grp2 : BOOLEAN;
    signal t_i_load_2_reg_291 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_3_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_3_reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal trunc_ln42_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_reg_301 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_addr_3_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln43_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln43_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_1_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_01001_grp2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp4 : BOOLEAN;
    signal i_fu_62 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln40_fu_171_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_294 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_i_ce1_local : STD_LOGIC;
    signal t_i_ce0_local : STD_LOGIC;
    signal lshr_ln42_fu_143_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln_fu_158_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_grp0 : BOOLEAN;
    signal zext_ln36_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal shl_ln42_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln42_2_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_fu_195_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln43_fu_216_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln43_2_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln43_fu_237_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_482 : BOOLEAN;
    signal ap_condition_486 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp1_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1)) then 
                        ap_block_pp0_stage0_subdone_grp1_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp4_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp4_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp4_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4)) then 
                        ap_block_pp0_stage0_subdone_grp4_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0)) then 
                        ap_block_pp0_stage1_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp2_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2)) then 
                        ap_block_pp0_stage1_subdone_grp2_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage1_subdone_grp3_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then 
                        ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3)) then 
                        ap_block_pp0_stage1_subdone_grp3_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_62 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_reg_266 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
                i_fu_62 <= add_ln40_fu_171_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem0_addr_2_reg_285 <= add_ln42_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem0_addr_3_reg_306 <= add_ln43_1_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_294_reg_258 <= ap_sig_allocacmp_i_294;
                icmp_ln40_reg_266 <= icmp_ln40_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then
                t_i_load_2_reg_291 <= t_i_q0;
                t_i_load_reg_280 <= t_i_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln42_reg_301 <= trunc_ln42_fu_212_p1;
                    zext_ln42_3_reg_296(5 downto 0) <= zext_ln42_3_fu_203_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln43_reg_312 <= trunc_ln43_fu_241_p1;
            end if;
        end if;
    end process;
    zext_ln42_3_reg_296(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln40_fu_171_p2 <= std_logic_vector(unsigned(i_294_reg_258) + unsigned(ap_const_lv6_1));
    add_ln42_fu_179_p2 <= std_logic_vector(unsigned(zext_ln36_fu_176_p1) + unsigned(PublicKeyA));
    add_ln43_1_fu_226_p2 <= std_logic_vector(unsigned(zext_ln43_2_fu_222_p1) + unsigned(PublicKeyA));
    add_ln43_fu_216_p2 <= std_logic_vector(unsigned(zext_ln40_fu_195_p1) + unsigned(ap_const_lv7_3F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_WREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_subdone_grp4_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp1 <= (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_grp4_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_0_WREADY, ap_block_pp0_stage0_subdone_grp4_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp4 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_WREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_subdone_grp4_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage0_subdone_grp1_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp1 <= (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_grp4_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_0_WREADY, ap_block_pp0_stage0_subdone_grp4_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp4 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1_01001_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_WREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_pp0_stage1_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0)))) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY, ap_block_pp0_stage1_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage1_11001_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage1_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage1_11001_grp3 <= (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_WREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_pp0_stage1_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0)))) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_grp2_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem0_0_WREADY, ap_block_pp0_stage1_subdone_grp2_done_reg)
    begin
                ap_block_pp0_stage1_subdone_grp2 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (m_axi_gmem0_0_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_grp3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_gmem0_0_AWREADY, m_axi_gmem0_0_BVALID, ap_block_pp0_stage1_subdone_grp3_done_reg)
    begin
                ap_block_pp0_stage1_subdone_grp3 <= (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (m_axi_gmem0_0_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_condition_482_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_11001_grp1)
    begin
                ap_condition_482 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_486_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_pp0_stage1_11001_grp3)
    begin
                ap_condition_486 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln40_reg_266)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln40_reg_266 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_294_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_294 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_294 <= i_fu_62;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_gmem0_0_AWREADY, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_pp0_stage0_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage1_grp3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, m_axi_gmem0_0_BVALID, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_pp0_stage0_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage1_grp3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem0_blk_n_B <= m_axi_gmem0_0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, m_axi_gmem0_0_WREADY, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_pp0_stage1_grp2, ap_block_pp0_stage0_grp4, ap_block_pp0_stage0_subdone_grp4_done_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            gmem0_blk_n_W <= m_axi_gmem0_0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln40_fu_137_p2 <= "1" when (ap_sig_allocacmp_i_294 = ap_const_lv6_3F) else "0";
    lshr_ln42_2_fu_207_p2 <= std_logic_vector(shift_right(unsigned(t_i_load_reg_280),to_integer(unsigned('0' & zext_ln42_3_fu_203_p1(31-1 downto 0)))));
    lshr_ln42_fu_143_p4 <= ap_sig_allocacmp_i_294(5 downto 3);
    lshr_ln43_fu_237_p2 <= std_logic_vector(shift_right(unsigned(t_i_load_2_reg_291),to_integer(unsigned('0' & zext_ln42_3_reg_296(31-1 downto 0)))));
    m_axi_gmem0_0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem0_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_ARVALID <= ap_const_logic_0;

    m_axi_gmem0_0_AWADDR_assign_proc : process(ap_enable_reg_pp0_iter1, gmem0_addr_2_reg_285, gmem0_addr_3_reg_306, ap_condition_482, ap_condition_486)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_486)) then 
                m_axi_gmem0_0_AWADDR <= gmem0_addr_3_reg_306;
            elsif ((ap_const_boolean_1 = ap_condition_482)) then 
                m_axi_gmem0_0_AWADDR <= gmem0_addr_2_reg_285;
            else 
                m_axi_gmem0_0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem0_0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv32_1;
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_11001_grp1, ap_block_pp0_stage1_11001_grp3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_gmem0_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_0_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone_grp3_done_reg, ap_block_pp0_stage0_subdone_grp1_done_reg, ap_block_pp0_stage0_11001_grp1, ap_block_pp0_stage1_11001_grp3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_gmem0_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_0_RREADY <= ap_const_logic_0;

    m_axi_gmem0_0_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_pp0_stage0_subdone_grp4_done_reg, trunc_ln42_reg_301, trunc_ln43_reg_312, ap_block_pp0_stage1_01001_grp2, ap_block_pp0_stage0_01001_grp4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001_grp4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem0_0_WDATA <= trunc_ln43_reg_312;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem0_0_WDATA <= trunc_ln42_reg_301;
        else 
            m_axi_gmem0_0_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv1_1;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone_grp2_done_reg, ap_block_pp0_stage0_subdone_grp4_done_reg, ap_block_pp0_stage0_11001_grp4, ap_block_pp0_stage1_11001_grp2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone_grp2_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_axi_gmem0_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln42_fu_198_p2 <= std_logic_vector(shift_left(unsigned(i_294_reg_258),to_integer(unsigned('0' & ap_const_lv6_3(6-1 downto 0)))));
    t_i_address0 <= zext_ln43_fu_166_p1(4 - 1 downto 0);
    t_i_address1 <= zext_ln42_fu_153_p1(4 - 1 downto 0);
    t_i_ce0 <= t_i_ce0_local;

    t_i_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_i_ce0_local <= ap_const_logic_1;
        else 
            t_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_i_ce1 <= t_i_ce1_local;

    t_i_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_i_ce1_local <= ap_const_logic_1;
        else 
            t_i_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln42_fu_212_p1 <= lshr_ln42_2_fu_207_p2(8 - 1 downto 0);
    trunc_ln43_fu_241_p1 <= lshr_ln43_fu_237_p2(8 - 1 downto 0);
    zext_ln36_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_294_reg_258),32));
    zext_ln40_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_294_reg_258),7));
    zext_ln42_3_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_fu_198_p2),64));
    zext_ln42_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_fu_143_p4),32));
    zext_ln43_2_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_216_p2),32));
    zext_ln43_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_158_p3),32));
    zext_ln_fu_158_p3 <= (ap_const_lv1_1 & lshr_ln42_fu_143_p4);
end behav;
