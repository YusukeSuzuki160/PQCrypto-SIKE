-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_141_Pipeline_VITIS_LOOP_157_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indvars_iv : IN STD_LOGIC_VECTOR (2 downto 0);
    v : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln156 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    a_offset2 : IN STD_LOGIC_VECTOR (0 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    i_25 : IN STD_LOGIC_VECTOR (3 downto 0);
    zext_ln145 : IN STD_LOGIC_VECTOR (3 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_35_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_35_out_ap_vld : OUT STD_LOGIC;
    u_34_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_34_out_o_ap_vld : OUT STD_LOGIC;
    t_33_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    t_33_out_ap_vld : OUT STD_LOGIC;
    grp_fu_490_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_490_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_490_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_490_p_ce : OUT STD_LOGIC;
    grp_fu_494_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_494_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_494_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_494_p_ce : OUT STD_LOGIC;
    grp_fu_498_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_498_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_498_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_498_p_ce : OUT STD_LOGIC;
    grp_fu_502_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_502_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_502_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_502_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_141_Pipeline_VITIS_LOOP_157_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln157_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_reg_746 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln157_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_752_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_781 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_165_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_810_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_810_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_246_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_246_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_247_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_247_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_248_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_248_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_248_reg_825_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_450_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_452_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_452_reg_836_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_453_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_453_reg_842_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_454_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_454_reg_847_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_454_reg_847_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_451_reg_852 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_857_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_455_reg_868 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_873_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_878_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_34_out_load_reg_887 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_604_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_34_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln158_35_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln156_cast_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal t_33_fu_90 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal t_fu_684_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal v_35_fu_94 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_193_fu_530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_19_fu_98 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal indvars_iv_cast_fu_204_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln157_fu_238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_ce0_local : STD_LOGIC;
    signal b_ce0_local : STD_LOGIC;
    signal tmp_s_fu_252_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln158_fu_249_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln158_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln158_fu_271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln158_12_fu_275_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln123_fu_392_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_155_fu_395_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_398_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_156_fu_404_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_389_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_408_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_437_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_212_fu_431_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_193_fu_444_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_213_fu_434_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_211_fu_428_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_194_fu_454_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_156_fu_464_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_155_fu_450_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_81_fu_474_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_s_fu_507_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln133_21_fu_500_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_524_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln125_s_fu_493_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_63_fu_536_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_64_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_13_fu_548_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_65_fu_554_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_560_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_572_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln49_fu_582_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_166_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_37_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel1_fu_632_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_49_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln160_fu_645_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln160_s_fu_648_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_25_fu_626_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln160_39_fu_661_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln160_fu_656_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln160_fu_666_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln161_fu_680_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_19_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln157_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_19_fu_98 <= add_ln157_fu_238_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_19_fu_98 <= indvars_iv_cast_fu_204_p1;
                end if;
            end if; 
        end if;
    end process;

    t_33_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_33_fu_90 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_33_fu_90 <= t_fu_684_p2;
                end if;
            end if; 
        end if;
    end process;

    v_35_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_35_fu_94 <= v;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_35_fu_94 <= v_193_fu_530_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_863 <= add_ln105_fu_468_p2;
                    add_ln133_reg_873(63 downto 32) <= add_ln133_fu_518_p2(63 downto 32);
                    add_ln133_reg_873_pp0_iter8_reg(63 downto 32) <= add_ln133_reg_873(63 downto 32);
                ah_reg_776 <= a_q0(63 downto 32);
                al_reg_766 <= al_fu_285_p1;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                bh_reg_781 <= b_q0(63 downto 32);
                bl_reg_771 <= bl_fu_289_p1;
                icmp_ln157_reg_752_pp0_iter2_reg <= icmp_ln157_reg_752_pp0_iter1_reg;
                icmp_ln157_reg_752_pp0_iter3_reg <= icmp_ln157_reg_752_pp0_iter2_reg;
                icmp_ln157_reg_752_pp0_iter4_reg <= icmp_ln157_reg_752_pp0_iter3_reg;
                icmp_ln157_reg_752_pp0_iter5_reg <= icmp_ln157_reg_752_pp0_iter4_reg;
                icmp_ln157_reg_752_pp0_iter6_reg <= icmp_ln157_reg_752_pp0_iter5_reg;
                icmp_ln157_reg_752_pp0_iter7_reg <= icmp_ln157_reg_752_pp0_iter6_reg;
                tempReg_reg_878 <= tempReg_fu_589_p2;
                tempReg_reg_878_pp0_iter8_reg <= tempReg_reg_878;
                tmp_450_reg_831 <= grp_fu_490_p_dout0(63 downto 32);
                tmp_451_reg_852 <= temp_fu_408_p2(33 downto 32);
                tmp_452_reg_836 <= grp_fu_498_p_dout0(63 downto 32);
                tmp_452_reg_836_pp0_iter5_reg <= tmp_452_reg_836;
                tmp_453_reg_842 <= grp_fu_494_p_dout0(63 downto 32);
                tmp_453_reg_842_pp0_iter5_reg <= tmp_453_reg_842;
                tmp_454_reg_847 <= grp_fu_502_p_dout0(63 downto 32);
                tmp_454_reg_847_pp0_iter5_reg <= tmp_454_reg_847;
                tmp_454_reg_847_pp0_iter6_reg <= tmp_454_reg_847_pp0_iter5_reg;
                tmp_455_reg_868 <= temp_81_fu_474_p2(33 downto 32);
                trunc_ln106_246_reg_815 <= trunc_ln106_246_fu_337_p1;
                trunc_ln106_247_reg_820 <= trunc_ln106_247_fu_341_p1;
                trunc_ln106_248_reg_825 <= trunc_ln106_248_fu_345_p1;
                trunc_ln106_248_reg_825_pp0_iter5_reg <= trunc_ln106_248_reg_825;
                trunc_ln106_reg_810 <= trunc_ln106_fu_333_p1;
                trunc_ln106_reg_810_pp0_iter5_reg <= trunc_ln106_reg_810;
                trunc_ln106_reg_810_pp0_iter6_reg <= trunc_ln106_reg_810_pp0_iter5_reg;
                trunc_ln125_reg_857 <= trunc_ln125_fu_424_p1;
                trunc_ln125_reg_857_pp0_iter6_reg <= trunc_ln125_reg_857;
                u_34_out_load_reg_887 <= u_34_out_i;
                u_reg_892 <= u_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln157_reg_752 <= icmp_ln157_fu_232_p2;
                icmp_ln157_reg_752_pp0_iter1_reg <= icmp_ln157_reg_752;
                j_reg_746 <= ap_sig_allocacmp_j;
            end if;
        end if;
    end process;
    add_ln133_reg_873(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_873_pp0_iter8_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln158_34_fu_266_p1(7 - 1 downto 0);
    a_ce0 <= a_ce0_local;

    a_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce0_local <= ap_const_logic_1;
        else 
            a_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_468_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_460_p1) + unsigned(add_ln130_fu_440_p2));
    add_ln123_fu_398_p2 <= std_logic_vector(unsigned(zext_ln123_fu_392_p1) + unsigned(zext_ln123_155_fu_395_p1));
    add_ln130_193_fu_444_p2 <= std_logic_vector(unsigned(zext_ln130_fu_437_p1) + unsigned(zext_ln106_212_fu_431_p1));
    add_ln130_194_fu_454_p2 <= std_logic_vector(unsigned(zext_ln106_213_fu_434_p1) + unsigned(zext_ln106_211_fu_428_p1));
    add_ln130_fu_440_p2 <= std_logic_vector(unsigned(trunc_ln106_248_reg_825_pp0_iter5_reg) + unsigned(tmp_452_reg_836_pp0_iter5_reg));
    add_ln133_fu_518_p2 <= std_logic_vector(unsigned(zext_ln133_fu_514_p1) + unsigned(and_ln133_21_fu_500_p3));
    add_ln157_fu_238_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j) + unsigned(ap_const_lv4_1));
    add_ln158_12_fu_275_p2 <= std_logic_vector(unsigned(zext_ln145) + unsigned(sub_ln158_fu_271_p2));
    add_ln158_fu_260_p2 <= std_logic_vector(unsigned(tmp_s_fu_252_p4) + unsigned(zext_ln158_fu_249_p1));
    al_fu_285_p1 <= a_q0(32 - 1 downto 0);
    and_ln133_21_fu_500_p3 <= (tmp_454_reg_847_pp0_iter6_reg & ap_const_lv32_0);
    and_ln133_s_fu_507_p3 <= (tmp_455_reg_868 & ap_const_lv32_0);
    and_ln160_fu_656_p2 <= (xor_ln160_s_fu_648_p3 and add_ln133_reg_873_pp0_iter8_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln157_fu_232_p2)
    begin
        if (((icmp_ln157_fu_232_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_19_fu_98, indvars_iv_cast_fu_204_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j <= indvars_iv_cast_fu_204_p1;
        else 
            ap_sig_allocacmp_j <= j_19_fu_98;
        end if; 
    end process;

    b_address0 <= zext_ln158_35_fu_280_p1(4 - 1 downto 0);
    b_ce0 <= b_ce0_local;

    b_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0_local <= ap_const_logic_1;
        else 
            b_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel1_fu_632_p3 <= tempReg_reg_878_pp0_iter8_reg(63 downto 63);
    bl_fu_289_p1 <= b_q0(32 - 1 downto 0);
    carry_fu_560_p3 <= xor_ln105_65_fu_554_p2(63 downto 63);
    grp_fu_490_p_ce <= ap_const_logic_1;
    grp_fu_490_p_din0 <= zext_ln105_165_fu_323_p1(32 - 1 downto 0);
    grp_fu_490_p_din1 <= zext_ln105_fu_313_p1(32 - 1 downto 0);
    grp_fu_494_p_ce <= ap_const_logic_1;
    grp_fu_494_p_din0 <= zext_ln112_fu_328_p1(32 - 1 downto 0);
    grp_fu_494_p_din1 <= zext_ln105_fu_313_p1(32 - 1 downto 0);
    grp_fu_498_p_ce <= ap_const_logic_1;
    grp_fu_498_p_din0 <= zext_ln105_165_fu_323_p1(32 - 1 downto 0);
    grp_fu_498_p_din1 <= zext_ln110_fu_318_p1(32 - 1 downto 0);
    grp_fu_502_p_ce <= ap_const_logic_1;
    grp_fu_502_p_din0 <= zext_ln112_fu_328_p1(32 - 1 downto 0);
    grp_fu_502_p_din1 <= zext_ln110_fu_318_p1(32 - 1 downto 0);
    icmp_ln157_fu_232_p2 <= "1" when (ap_sig_allocacmp_j = ap_const_lv4_8) else "0";
    indvars_iv_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv),4));
    or_ln105_13_fu_548_p2 <= (xor_ln105_64_fu_542_p2 or xor_ln105_63_fu_536_p2);
    or_ln160_25_fu_626_p2 <= (xor_ln160_fu_618_p2 or xor_ln160_37_fu_622_p2);
    or_ln160_fu_666_p2 <= (xor_ln160_39_fu_661_p2 or and_ln160_fu_656_p2);
    or_ln49_fu_582_p3 <= (tmp_60_fu_572_p4 & add_ln105_reg_863);
    or_ln_fu_524_p3 <= (trunc_ln125_reg_857_pp0_iter6_reg & trunc_ln106_reg_810_pp0_iter6_reg);
    shl_ln125_s_fu_493_p3 <= (trunc_ln125_reg_857_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln158_fu_271_p2 <= std_logic_vector(unsigned(i_25) - unsigned(j_reg_746));
    t_33_out <= t_33_fu_90;

    t_33_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_752_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_752_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_33_out_ap_vld <= ap_const_logic_1;
        else 
            t_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    t_fu_684_p2 <= std_logic_vector(unsigned(zext_ln161_fu_680_p1) + unsigned(t_33_fu_90));
    tempReg_fu_589_p2 <= std_logic_vector(unsigned(or_ln49_fu_582_p3) + unsigned(zext_ln105_166_fu_568_p1));
    temp_81_fu_474_p2 <= std_logic_vector(unsigned(zext_ln130_156_fu_464_p1) + unsigned(zext_ln130_155_fu_450_p1));
    temp_fu_408_p2 <= std_logic_vector(unsigned(zext_ln123_156_fu_404_p1) + unsigned(zext_ln106_fu_389_p1));
    tmp_60_fu_572_p4 <= add_ln133_fu_518_p2(63 downto 32);
    tmp_fu_672_p3 <= or_ln160_fu_666_p2(63 downto 63);
    tmp_s_fu_252_p4 <= ((a_offset & a_offset2) & ap_const_lv3_0);
    trunc_ln106_246_fu_337_p1 <= grp_fu_494_p_dout0(32 - 1 downto 0);
    trunc_ln106_247_fu_341_p1 <= grp_fu_498_p_dout0(32 - 1 downto 0);
    trunc_ln106_248_fu_345_p1 <= grp_fu_502_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_333_p1 <= grp_fu_490_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_424_p1 <= temp_fu_408_p2(32 - 1 downto 0);
    trunc_ln130_fu_460_p1 <= add_ln130_194_fu_454_p2(32 - 1 downto 0);
    trunc_ln160_fu_645_p1 <= tempReg_reg_878_pp0_iter8_reg(63 - 1 downto 0);

    u_34_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, u_34_out_i, u_fu_604_p2, ap_block_pp0_stage0, zext_ln156_cast_fu_200_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                u_34_out_o <= zext_ln156_cast_fu_200_p1;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                u_34_out_o <= u_fu_604_p2;
            else 
                u_34_out_o <= u_34_out_i;
            end if;
        else 
            u_34_out_o <= u_34_out_i;
        end if; 
    end process;


    u_34_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            u_34_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_34_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_604_p2 <= std_logic_vector(unsigned(tempReg_reg_878) + unsigned(u_34_out_i));
    v_193_fu_530_p2 <= std_logic_vector(unsigned(or_ln_fu_524_p3) + unsigned(v_35_fu_94));
    v_35_out <= v_35_fu_94;

    v_35_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln157_reg_752_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln157_reg_752_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_35_out_ap_vld <= ap_const_logic_1;
        else 
            v_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_63_fu_536_p2 <= (v_193_fu_530_p2 xor shl_ln125_s_fu_493_p3);
    xor_ln105_64_fu_542_p2 <= (v_35_fu_94 xor shl_ln125_s_fu_493_p3);
    xor_ln105_65_fu_554_p2 <= (v_193_fu_530_p2 xor or_ln105_13_fu_548_p2);
    xor_ln160_37_fu_622_p2 <= (u_34_out_load_reg_887 xor tempReg_reg_878_pp0_iter8_reg);
    xor_ln160_39_fu_661_p2 <= (u_reg_892 xor or_ln160_25_fu_626_p2);
    xor_ln160_49_fu_639_p2 <= (bit_sel1_fu_632_p3 xor ap_const_lv1_1);
    xor_ln160_fu_618_p2 <= (u_reg_892 xor tempReg_reg_878_pp0_iter8_reg);
    xor_ln160_s_fu_648_p3 <= (xor_ln160_49_fu_639_p2 & trunc_ln160_fu_645_p1);
    zext_ln105_165_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_771),64));
    zext_ln105_166_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_560_p3),64));
    zext_ln105_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_766),64));
    zext_ln106_211_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_451_reg_852),33));
    zext_ln106_212_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_452_reg_836_pp0_iter5_reg),33));
    zext_ln106_213_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_453_reg_842_pp0_iter5_reg),33));
    zext_ln106_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_450_reg_831),34));
    zext_ln110_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_776),64));
    zext_ln112_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_781),64));
    zext_ln123_155_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_246_reg_815),33));
    zext_ln123_156_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_398_p2),34));
    zext_ln123_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_247_reg_820),33));
    zext_ln130_155_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_193_fu_444_p2),34));
    zext_ln130_156_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_194_fu_454_p2),34));
    zext_ln130_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_248_reg_825_pp0_iter5_reg),33));
    zext_ln133_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_s_fu_507_p3),64));
    zext_ln156_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln156),64));
    zext_ln158_34_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_fu_260_p2),32));
    zext_ln158_35_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_12_fu_275_p2),32));
    zext_ln158_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_746),7));
    zext_ln161_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_672_p3),3));
end behav;
