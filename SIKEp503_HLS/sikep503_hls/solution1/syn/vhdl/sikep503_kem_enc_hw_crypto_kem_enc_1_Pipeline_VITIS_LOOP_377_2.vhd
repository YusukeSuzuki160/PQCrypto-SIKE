-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_377_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_80_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_80_ce0 : OUT STD_LOGIC;
    t_80_we0 : OUT STD_LOGIC;
    t_80_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_80_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_80_ce1 : OUT STD_LOGIC;
    t_80_we1 : OUT STD_LOGIC;
    t_80_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_79_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_79_ce0 : OUT STD_LOGIC;
    t_79_we0 : OUT STD_LOGIC;
    t_79_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_79_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_79_ce1 : OUT STD_LOGIC;
    t_79_we1 : OUT STD_LOGIC;
    t_79_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_78_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_78_ce0 : OUT STD_LOGIC;
    t_78_we0 : OUT STD_LOGIC;
    t_78_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_78_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_78_ce1 : OUT STD_LOGIC;
    t_78_we1 : OUT STD_LOGIC;
    t_78_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_ce0 : OUT STD_LOGIC;
    t_we0 : OUT STD_LOGIC;
    t_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    t_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    t_ce1 : OUT STD_LOGIC;
    t_we1 : OUT STD_LOGIC;
    t_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_i_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_i_ce0 : OUT STD_LOGIC;
    s_i_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_377_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln377_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_reg_338 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln379_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln38_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_2_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_257_fu_72 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln377_fu_203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal s_i_ce0_local : STD_LOGIC;
    signal t_we1_local : STD_LOGIC;
    signal trunc_ln38_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce1_local : STD_LOGIC;
    signal t_we0_local : STD_LOGIC;
    signal t_ce0_local : STD_LOGIC;
    signal t_78_we1_local : STD_LOGIC;
    signal t_78_ce1_local : STD_LOGIC;
    signal t_78_we0_local : STD_LOGIC;
    signal t_78_ce0_local : STD_LOGIC;
    signal t_79_we1_local : STD_LOGIC;
    signal t_79_ce1_local : STD_LOGIC;
    signal t_79_we0_local : STD_LOGIC;
    signal t_79_ce0_local : STD_LOGIC;
    signal t_80_we1_local : STD_LOGIC;
    signal t_80_ce1_local : STD_LOGIC;
    signal t_80_we0_local : STD_LOGIC;
    signal t_80_ce0_local : STD_LOGIC;
    signal shl_ln_fu_224_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln38_fu_283_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_257_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln377_fu_197_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_257_fu_72 <= add_ln377_fu_203_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_257_fu_72 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_338 <= ap_sig_allocacmp_i;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln377_fu_203_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln377_fu_197_p2)
    begin
        if (((icmp_ln377_fu_197_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_257_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i <= i_257_fu_72;
        end if; 
    end process;

    icmp_ln377_fu_197_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv5_11) else "0";
    or_ln38_fu_283_p3 <= (i_reg_338 & ap_const_lv1_1);
    s_i_address0 <= zext_ln379_fu_209_p1(5 - 1 downto 0);
    s_i_ce0 <= s_i_ce0_local;

    s_i_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_i_ce0_local <= ap_const_logic_1;
        else 
            s_i_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_224_p3 <= (i_reg_338 & ap_const_lv1_0);
    t_78_address0 <= zext_ln38_2_fu_290_p1(6 - 1 downto 0);
    t_78_address1 <= zext_ln38_fu_231_p1(6 - 1 downto 0);
    t_78_ce0 <= t_78_ce0_local;

    t_78_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_78_ce0_local <= ap_const_logic_1;
        else 
            t_78_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_78_ce1 <= t_78_ce1_local;

    t_78_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_78_ce1_local <= ap_const_logic_1;
        else 
            t_78_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_78_d0 <= s_i_q0(47 downto 40);
    t_78_d1 <= s_i_q0(15 downto 8);
    t_78_we0 <= t_78_we0_local;

    t_78_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_78_we0_local <= ap_const_logic_1;
        else 
            t_78_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_78_we1 <= t_78_we1_local;

    t_78_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_78_we1_local <= ap_const_logic_1;
        else 
            t_78_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_79_address0 <= zext_ln38_2_fu_290_p1(6 - 1 downto 0);
    t_79_address1 <= zext_ln38_fu_231_p1(6 - 1 downto 0);
    t_79_ce0 <= t_79_ce0_local;

    t_79_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_79_ce0_local <= ap_const_logic_1;
        else 
            t_79_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_79_ce1 <= t_79_ce1_local;

    t_79_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_79_ce1_local <= ap_const_logic_1;
        else 
            t_79_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_79_d0 <= s_i_q0(55 downto 48);
    t_79_d1 <= s_i_q0(23 downto 16);
    t_79_we0 <= t_79_we0_local;

    t_79_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_79_we0_local <= ap_const_logic_1;
        else 
            t_79_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_79_we1 <= t_79_we1_local;

    t_79_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_79_we1_local <= ap_const_logic_1;
        else 
            t_79_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_80_address0 <= zext_ln38_2_fu_290_p1(6 - 1 downto 0);
    t_80_address1 <= zext_ln38_fu_231_p1(6 - 1 downto 0);
    t_80_ce0 <= t_80_ce0_local;

    t_80_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_80_ce0_local <= ap_const_logic_1;
        else 
            t_80_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_80_ce1 <= t_80_ce1_local;

    t_80_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_80_ce1_local <= ap_const_logic_1;
        else 
            t_80_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_80_d0 <= s_i_q0(63 downto 56);
    t_80_d1 <= s_i_q0(31 downto 24);
    t_80_we0 <= t_80_we0_local;

    t_80_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_80_we0_local <= ap_const_logic_1;
        else 
            t_80_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_80_we1 <= t_80_we1_local;

    t_80_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_80_we1_local <= ap_const_logic_1;
        else 
            t_80_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_address0 <= zext_ln38_2_fu_290_p1(6 - 1 downto 0);
    t_address1 <= zext_ln38_fu_231_p1(6 - 1 downto 0);
    t_ce0 <= t_ce0_local;

    t_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_ce0_local <= ap_const_logic_1;
        else 
            t_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_ce1 <= t_ce1_local;

    t_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_ce1_local <= ap_const_logic_1;
        else 
            t_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    t_d0 <= s_i_q0(39 downto 32);
    t_d1 <= trunc_ln38_fu_219_p1;
    t_we0 <= t_we0_local;

    t_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_we0_local <= ap_const_logic_1;
        else 
            t_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    t_we1 <= t_we1_local;

    t_we1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            t_we1_local <= ap_const_logic_1;
        else 
            t_we1_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln38_fu_219_p1 <= s_i_q0(8 - 1 downto 0);
    zext_ln379_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),32));
    zext_ln38_2_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln38_fu_283_p3),32));
    zext_ln38_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_224_p3),32));
end behav;
