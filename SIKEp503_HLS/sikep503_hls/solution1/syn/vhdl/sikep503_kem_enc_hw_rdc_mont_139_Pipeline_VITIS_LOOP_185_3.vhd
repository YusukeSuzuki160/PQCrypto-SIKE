-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_rdc_mont_139_Pipeline_VITIS_LOOP_185_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_025 : IN STD_LOGIC_VECTOR (63 downto 0);
    u_024 : IN STD_LOGIC_VECTOR (63 downto 0);
    i_11 : IN STD_LOGIC_VECTOR (2 downto 0);
    add_ln185 : IN STD_LOGIC_VECTOR (3 downto 0);
    mc_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    mc_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    mc_ce0 : OUT STD_LOGIC;
    mc_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    v_77_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_77_out_ap_vld : OUT STD_LOGIC;
    u_54_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_54_out_ap_vld : OUT STD_LOGIC;
    t_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    t_out_ap_vld : OUT STD_LOGIC;
    grp_fu_901_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_901_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_901_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_901_p_ce : OUT STD_LOGIC;
    grp_fu_905_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_905_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_905_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_905_p_ce : OUT STD_LOGIC;
    grp_fu_909_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_909_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_909_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_909_p_ce : OUT STD_LOGIC;
    grp_fu_913_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_913_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_913_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_913_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_rdc_mont_139_Pipeline_VITIS_LOOP_185_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln185_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal p503p1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503p1_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln185_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_729_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_733_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_36_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_794_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_794_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_794_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_63_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_63_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_64_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_64_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_65_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_65_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_s_reg_824_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_829_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_829_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_834 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_839_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_839_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_fu_420_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_reg_845 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln105_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_reg_855 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln189_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_860 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_860_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln189_reg_860_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_20_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_20_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_20_reg_866_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln187_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln187_9_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_82 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_2_fu_674_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal u_54_fu_86 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal u_2_fu_607_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_90 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_2_fu_557_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_94 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln185_6_fu_230_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mc_ce0_local : STD_LOGIC;
    signal p503p1_1_ce0_local : STD_LOGIC;
    signal zext_ln185_fu_220_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_242_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln187_fu_255_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_378_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_33_fu_381_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_384_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_34_fu_390_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_375_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_394_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_417_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_34_fu_414_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_33_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_34_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_34_fu_437_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_33_fu_429_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_20_fu_441_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln189_8_fu_468_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln189_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_461_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln189_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln189_8_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_504_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_497_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_76_fu_510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_140_fu_522_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_528_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_141_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln105_40_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_572_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_144_fu_582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_143_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_25_fu_587_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_145_fu_593_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_142_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_27_fu_635_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln105_s_fu_638_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln105_fu_646_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_fu_651_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_41_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln190_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_28_fu_668_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503p1_1_U : component sikep503_kem_enc_hw_rdc_mont_14183_Pipeline_VITIS_LOOP_185_3_p503p1_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503p1_1_address0,
        ce0 => p503p1_1_ce0_local,
        q0 => p503p1_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    j_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln185_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_94 <= add_ln185_6_fu_230_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_94 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    t_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    t_fu_82 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    t_fu_82 <= t_2_fu_674_p3;
                end if;
            end if; 
        end if;
    end process;

    u_54_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    u_54_fu_86 <= u_024;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    u_54_fu_86 <= u_2_fu_607_p3;
                end if;
            end if; 
        end if;
    end process;

    v_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    v_fu_90 <= v_025;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    v_fu_90 <= v_2_fu_557_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln130_reg_845 <= add_ln130_fu_420_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln185_reg_729_pp0_iter2_reg <= icmp_ln185_reg_729_pp0_iter1_reg;
                icmp_ln185_reg_729_pp0_iter3_reg <= icmp_ln185_reg_729_pp0_iter2_reg;
                icmp_ln185_reg_729_pp0_iter4_reg <= icmp_ln185_reg_729_pp0_iter3_reg;
                icmp_ln185_reg_729_pp0_iter5_reg <= icmp_ln185_reg_729_pp0_iter4_reg;
                icmp_ln185_reg_729_pp0_iter6_reg <= icmp_ln185_reg_729_pp0_iter5_reg;
                icmp_ln185_reg_729_pp0_iter7_reg <= icmp_ln185_reg_729_pp0_iter6_reg;
                icmp_ln186_reg_733_pp0_iter2_reg <= icmp_ln186_reg_733_pp0_iter1_reg;
                icmp_ln186_reg_733_pp0_iter3_reg <= icmp_ln186_reg_733_pp0_iter2_reg;
                icmp_ln186_reg_733_pp0_iter4_reg <= icmp_ln186_reg_733_pp0_iter3_reg;
                icmp_ln186_reg_733_pp0_iter5_reg <= icmp_ln186_reg_733_pp0_iter4_reg;
                icmp_ln186_reg_733_pp0_iter6_reg <= icmp_ln186_reg_733_pp0_iter5_reg;
                icmp_ln186_reg_733_pp0_iter7_reg <= icmp_ln186_reg_733_pp0_iter6_reg;
                icmp_ln186_reg_733_pp0_iter8_reg <= icmp_ln186_reg_733_pp0_iter7_reg;
                tempReg_20_reg_866 <= tempReg_20_fu_552_p2;
                tempReg_20_reg_866_pp0_iter8_reg <= tempReg_20_reg_866;
                tmp_84_reg_814 <= grp_fu_901_p_dout0(63 downto 32);
                tmp_85_reg_834 <= temp_fu_394_p2(33 downto 32);
                tmp_86_reg_819 <= grp_fu_909_p_dout0(63 downto 32);
                tmp_87_reg_829 <= grp_fu_913_p_dout0(63 downto 32);
                tmp_87_reg_829_pp0_iter4_reg <= tmp_87_reg_829;
                tmp_87_reg_829_pp0_iter5_reg <= tmp_87_reg_829_pp0_iter4_reg;
                tmp_88_reg_855 <= temp_20_fu_441_p2(33 downto 32);
                tmp_90_reg_875 <= xor_ln105_145_fu_593_p2(63 downto 63);
                trunc_ln105_reg_850 <= trunc_ln105_fu_447_p1;
                trunc_ln106_63_reg_799 <= trunc_ln106_63_fu_323_p1;
                trunc_ln106_64_reg_804 <= trunc_ln106_64_fu_327_p1;
                trunc_ln106_65_reg_809 <= trunc_ln106_65_fu_331_p1;
                trunc_ln106_reg_794 <= trunc_ln106_fu_319_p1;
                trunc_ln106_reg_794_pp0_iter4_reg <= trunc_ln106_reg_794;
                trunc_ln106_reg_794_pp0_iter5_reg <= trunc_ln106_reg_794_pp0_iter4_reg;
                trunc_ln106_reg_794_pp0_iter6_reg <= trunc_ln106_reg_794_pp0_iter5_reg;
                trunc_ln106_s_reg_824 <= grp_fu_905_p_dout0(63 downto 32);
                trunc_ln106_s_reg_824_pp0_iter4_reg <= trunc_ln106_s_reg_824;
                trunc_ln125_reg_839 <= trunc_ln125_fu_410_p1;
                trunc_ln125_reg_839_pp0_iter5_reg <= trunc_ln125_reg_839;
                trunc_ln125_reg_839_pp0_iter6_reg <= trunc_ln125_reg_839_pp0_iter5_reg;
                xor_ln189_reg_860 <= xor_ln189_fu_488_p2;
                xor_ln189_reg_860_pp0_iter7_reg <= xor_ln189_reg_860;
                xor_ln189_reg_860_pp0_iter8_reg <= xor_ln189_reg_860_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_760 <= mc_q0(63 downto 32);
                al_reg_750 <= al_fu_271_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_765 <= p503p1_1_q0(63 downto 32);
                bl_reg_755 <= bl_fu_275_p1;
                icmp_ln185_reg_729 <= icmp_ln185_fu_224_p2;
                icmp_ln185_reg_729_pp0_iter1_reg <= icmp_ln185_reg_729;
                icmp_ln186_reg_733 <= icmp_ln186_fu_236_p2;
                icmp_ln186_reg_733_pp0_iter1_reg <= icmp_ln186_reg_733;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln123_fu_384_p2 <= std_logic_vector(unsigned(zext_ln123_fu_378_p1) + unsigned(zext_ln123_33_fu_381_p1));
    add_ln130_34_fu_432_p2 <= std_logic_vector(unsigned(trunc_ln106_s_reg_824_pp0_iter4_reg) + unsigned(zext_ln106_33_fu_426_p1));
    add_ln130_fu_420_p2 <= std_logic_vector(unsigned(zext_ln130_fu_417_p1) + unsigned(zext_ln106_34_fu_414_p1));
    add_ln185_6_fu_230_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_11) + unsigned(ap_const_lv3_1));
    add_ln189_fu_482_p2 <= std_logic_vector(unsigned(zext_ln189_fu_475_p1) + unsigned(and_ln_fu_461_p3));
    al_fu_271_p1 <= mc_q0(32 - 1 downto 0);
    and_ln105_fu_646_p2 <= (xor_ln189_reg_860_pp0_iter8_reg and xor_ln105_s_fu_638_p3);
    and_ln189_8_fu_468_p3 <= (tmp_88_reg_855 & ap_const_lv32_0);
    and_ln_fu_461_p3 <= (tmp_87_reg_829_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln185_fu_224_p2)
    begin
        if (((icmp_ln185_fu_224_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter8_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_11_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_11 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_11 <= j_fu_94;
        end if; 
    end process;

    bit_sel_fu_622_p3 <= tempReg_20_reg_866_pp0_iter8_reg(63 downto 63);
    bl_fu_275_p1 <= p503p1_1_q0(32 - 1 downto 0);
    carry_41_fu_659_p2 <= (tmp_90_reg_875 or tmp_89_fu_651_p3);
    carry_fu_540_p3 <= xor_ln105_141_fu_534_p2(63 downto 63);
    grp_fu_901_p_ce <= ap_const_logic_1;
    grp_fu_901_p_din0 <= zext_ln105_36_fu_309_p1(32 - 1 downto 0);
    grp_fu_901_p_din1 <= zext_ln105_fu_299_p1(32 - 1 downto 0);
    grp_fu_905_p_ce <= ap_const_logic_1;
    grp_fu_905_p_din0 <= zext_ln112_fu_314_p1(32 - 1 downto 0);
    grp_fu_905_p_din1 <= zext_ln105_fu_299_p1(32 - 1 downto 0);
    grp_fu_909_p_ce <= ap_const_logic_1;
    grp_fu_909_p_din0 <= zext_ln105_36_fu_309_p1(32 - 1 downto 0);
    grp_fu_909_p_din1 <= zext_ln110_fu_304_p1(32 - 1 downto 0);
    grp_fu_913_p_ce <= ap_const_logic_1;
    grp_fu_913_p_din0 <= zext_ln112_fu_314_p1(32 - 1 downto 0);
    grp_fu_913_p_din1 <= zext_ln110_fu_304_p1(32 - 1 downto 0);
    icmp_ln185_fu_224_p2 <= "1" when (ap_sig_allocacmp_j_11 = i_11) else "0";
    icmp_ln186_fu_236_p2 <= "1" when (unsigned(zext_ln185_fu_220_p1) < unsigned(add_ln185)) else "0";
    mc_address0 <= zext_ln187_fu_250_p1(7 - 1 downto 0);
    mc_ce0 <= mc_ce0_local;

    mc_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mc_ce0_local <= ap_const_logic_1;
        else 
            mc_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln105_25_fu_587_p2 <= (xor_ln105_144_fu_582_p2 or xor_ln105_143_fu_577_p2);
    or_ln105_fu_528_p2 <= (xor_ln105_fu_516_p2 or xor_ln105_140_fu_522_p2);
    p503p1_1_address0 <= zext_ln187_9_fu_261_p1(3 - 1 downto 0);

    p503p1_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p503p1_1_ce0_local <= ap_const_logic_1;
        else 
            p503p1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_497_p3 <= (trunc_ln125_reg_839_pp0_iter6_reg & ap_const_lv32_0);
    sub_ln187_fu_255_p2 <= std_logic_vector(unsigned(empty) - unsigned(ap_sig_allocacmp_j_11));
    t_28_fu_668_p2 <= std_logic_vector(unsigned(t_fu_82) + unsigned(zext_ln190_fu_664_p1));
    t_2_fu_674_p3 <= 
        t_28_fu_668_p2 when (icmp_ln186_reg_733_pp0_iter8_reg(0) = '1') else 
        t_fu_82;
    t_out <= t_fu_82;

    t_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_729_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_729_pp0_iter7_reg = ap_const_lv1_1))) then 
            t_out_ap_vld <= ap_const_logic_1;
        else 
            t_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempReg_20_fu_552_p2 <= std_logic_vector(unsigned(xor_ln189_reg_860) + unsigned(zext_ln105_40_fu_548_p1));
    tempReg_fu_504_p3 <= (trunc_ln125_reg_839_pp0_iter6_reg & trunc_ln106_reg_794_pp0_iter6_reg);
    temp_20_fu_441_p2 <= std_logic_vector(unsigned(zext_ln130_34_fu_437_p1) + unsigned(zext_ln130_33_fu_429_p1));
    temp_fu_394_p2 <= std_logic_vector(unsigned(zext_ln123_34_fu_390_p1) + unsigned(zext_ln106_fu_375_p1));
    tmp_89_fu_651_p3 <= and_ln105_fu_646_p2(63 downto 63);
    tmp_s_fu_242_p3 <= (mc_offset & ap_sig_allocacmp_j_11);
    trunc_ln105_27_fu_635_p1 <= tempReg_20_reg_866_pp0_iter8_reg(63 - 1 downto 0);
    trunc_ln105_fu_447_p1 <= temp_20_fu_441_p2(32 - 1 downto 0);
    trunc_ln106_63_fu_323_p1 <= grp_fu_905_p_dout0(32 - 1 downto 0);
    trunc_ln106_64_fu_327_p1 <= grp_fu_909_p_dout0(32 - 1 downto 0);
    trunc_ln106_65_fu_331_p1 <= grp_fu_913_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_319_p1 <= grp_fu_901_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_410_p1 <= temp_fu_394_p2(32 - 1 downto 0);
    u_2_fu_607_p3 <= 
        u_fu_572_p2 when (icmp_ln186_reg_733_pp0_iter7_reg(0) = '1') else 
        u_54_fu_86;
    u_54_out <= u_54_fu_86;

    u_54_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_729_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_729_pp0_iter7_reg = ap_const_lv1_1))) then 
            u_54_out_ap_vld <= ap_const_logic_1;
        else 
            u_54_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_572_p2 <= std_logic_vector(unsigned(tempReg_20_reg_866) + unsigned(u_54_fu_86));
    v_2_fu_557_p3 <= 
        v_76_fu_510_p2 when (icmp_ln186_reg_733_pp0_iter6_reg(0) = '1') else 
        v_fu_90;
    v_76_fu_510_p2 <= std_logic_vector(unsigned(tempReg_fu_504_p3) + unsigned(v_fu_90));
    v_77_out <= v_fu_90;

    v_77_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln185_reg_729_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (icmp_ln185_reg_729_pp0_iter7_reg = ap_const_lv1_1))) then 
            v_77_out_ap_vld <= ap_const_logic_1;
        else 
            v_77_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_140_fu_522_p2 <= (v_fu_90 xor shl_ln_fu_497_p3);
    xor_ln105_141_fu_534_p2 <= (v_76_fu_510_p2 xor or_ln105_fu_528_p2);
    xor_ln105_142_fu_629_p2 <= (bit_sel_fu_622_p3 xor ap_const_lv1_1);
    xor_ln105_143_fu_577_p2 <= (u_fu_572_p2 xor tempReg_20_reg_866);
    xor_ln105_144_fu_582_p2 <= (u_54_fu_86 xor tempReg_20_reg_866);
    xor_ln105_145_fu_593_p2 <= (u_fu_572_p2 xor or_ln105_25_fu_587_p2);
    xor_ln105_fu_516_p2 <= (v_76_fu_510_p2 xor shl_ln_fu_497_p3);
    xor_ln105_s_fu_638_p3 <= (xor_ln105_142_fu_629_p2 & trunc_ln105_27_fu_635_p1);
    xor_ln189_fu_488_p2 <= (zext_ln189_8_fu_479_p1 xor add_ln189_fu_482_p2);
    zext_ln105_36_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_755),64));
    zext_ln105_40_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_540_p3),64));
    zext_ln105_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_750),64));
    zext_ln106_33_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_reg_834),32));
    zext_ln106_34_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_reg_819),33));
    zext_ln106_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_reg_814),34));
    zext_ln110_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_760),64));
    zext_ln112_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_765),64));
    zext_ln123_33_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_63_reg_799),33));
    zext_ln123_34_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_384_p2),34));
    zext_ln123_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_64_reg_804),33));
    zext_ln130_33_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_845),34));
    zext_ln130_34_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_34_fu_432_p2),34));
    zext_ln130_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_65_reg_809),33));
    zext_ln185_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_11),4));
    zext_ln187_9_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln187_fu_255_p2),32));
    zext_ln187_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_242_p3),32));
    zext_ln189_8_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln105_reg_850),64));
    zext_ln189_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln189_8_fu_468_p3),64));
    zext_ln190_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_41_fu_659_p2),64));
end behav;
