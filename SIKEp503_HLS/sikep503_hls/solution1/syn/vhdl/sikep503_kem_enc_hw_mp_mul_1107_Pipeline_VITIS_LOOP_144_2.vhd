-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_mp_mul_1107_Pipeline_VITIS_LOOP_144_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    v_017 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln143 : IN STD_LOGIC_VECTOR (3 downto 0);
    indvars_iv31 : IN STD_LOGIC_VECTOR (3 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    empty : IN STD_LOGIC_VECTOR (2 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    v_114_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    v_114_out_ap_vld : OUT STD_LOGIC;
    u_95_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
    u_95_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    u_95_out_o_ap_vld : OUT STD_LOGIC;
    t_out_i : IN STD_LOGIC_VECTOR (3 downto 0);
    t_out_o : OUT STD_LOGIC_VECTOR (3 downto 0);
    t_out_o_ap_vld : OUT STD_LOGIC;
    grp_fu_431_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_431_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_431_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_431_p_ce : OUT STD_LOGIC;
    grp_fu_435_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_435_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_435_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_435_p_ce : OUT STD_LOGIC;
    grp_fu_439_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_439_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_439_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_439_p_ce : OUT STD_LOGIC;
    grp_fu_443_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_443_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_443_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_443_p_ce : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_mp_mul_1107_Pipeline_VITIS_LOOP_144_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln144_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln144_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_654_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_654_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_654_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_654_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_654_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_654_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal al_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal al_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bl_reg_673 : STD_LOGIC_VECTOR (31 downto 0);
    signal ah_reg_678 : STD_LOGIC_VECTOR (31 downto 0);
    signal bh_reg_683 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln105_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_179_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln106_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_712_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_reg_712_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_267_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_267_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_268_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_268_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_269_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_269_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln106_269_reg_727_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_491_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_493_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_493_reg_738_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_494_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_494_reg_744_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_495_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_495_reg_749_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_495_reg_749_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_492_reg_754 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln125_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_reg_759_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_496_reg_770 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln133_fu_456_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_775 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln133_reg_775_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_527_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_780_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_95_out_load_reg_789 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_reg_794 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln145_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln145_27_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln143_cast_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal u_fu_623_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_114_fu_76 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal v_206_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal j_fu_80 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln144_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_j_47 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal a_ce0_local : STD_LOGIC;
    signal b_ce0_local : STD_LOGIC;
    signal trunc_ln144_fu_198_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln145_fu_207_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_330_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_169_fu_333_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln123_fu_336_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln123_170_fu_342_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln106_fu_327_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_fu_346_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_fu_375_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_233_fu_369_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_fu_382_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_234_fu_372_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln106_232_fu_366_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln130_206_fu_392_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln130_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln130_208_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln130_170_fu_402_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln130_169_fu_388_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal temp_88_fu_412_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln133_s_fu_445_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln133_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln_fu_438_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_462_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_431_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_61_fu_480_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_62_fu_492_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_510_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln56_fu_520_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_180_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_fu_557_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_37_fu_561_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_52_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln147_fu_584_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln147_s_fu_587_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_25_fu_565_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln147_39_fu_600_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln147_fu_595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln147_fu_605_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_161_fu_611_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_fu_619_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    j_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln144_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_80 <= add_ln144_fu_192_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    v_114_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    v_114_fu_76 <= v_017;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    v_114_fu_76 <= v_206_fu_468_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln105_reg_765 <= add_ln105_fu_406_p2;
                    add_ln133_reg_775(63 downto 32) <= add_ln133_fu_456_p2(63 downto 32);
                    add_ln133_reg_775_pp0_iter7_reg(63 downto 32) <= add_ln133_reg_775(63 downto 32);
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln144_reg_654_pp0_iter2_reg <= icmp_ln144_reg_654_pp0_iter1_reg;
                icmp_ln144_reg_654_pp0_iter3_reg <= icmp_ln144_reg_654_pp0_iter2_reg;
                icmp_ln144_reg_654_pp0_iter4_reg <= icmp_ln144_reg_654_pp0_iter3_reg;
                icmp_ln144_reg_654_pp0_iter5_reg <= icmp_ln144_reg_654_pp0_iter4_reg;
                icmp_ln144_reg_654_pp0_iter6_reg <= icmp_ln144_reg_654_pp0_iter5_reg;
                tempReg_reg_780 <= tempReg_fu_527_p2;
                tempReg_reg_780_pp0_iter7_reg <= tempReg_reg_780;
                tmp_491_reg_733 <= grp_fu_431_p_dout0(63 downto 32);
                tmp_492_reg_754 <= temp_fu_346_p2(33 downto 32);
                tmp_493_reg_738 <= grp_fu_439_p_dout0(63 downto 32);
                tmp_493_reg_738_pp0_iter4_reg <= tmp_493_reg_738;
                tmp_494_reg_744 <= grp_fu_435_p_dout0(63 downto 32);
                tmp_494_reg_744_pp0_iter4_reg <= tmp_494_reg_744;
                tmp_495_reg_749 <= grp_fu_443_p_dout0(63 downto 32);
                tmp_495_reg_749_pp0_iter4_reg <= tmp_495_reg_749;
                tmp_495_reg_749_pp0_iter5_reg <= tmp_495_reg_749_pp0_iter4_reg;
                tmp_496_reg_770 <= temp_88_fu_412_p2(33 downto 32);
                trunc_ln106_267_reg_717 <= trunc_ln106_267_fu_275_p1;
                trunc_ln106_268_reg_722 <= trunc_ln106_268_fu_279_p1;
                trunc_ln106_269_reg_727 <= trunc_ln106_269_fu_283_p1;
                trunc_ln106_269_reg_727_pp0_iter4_reg <= trunc_ln106_269_reg_727;
                trunc_ln106_reg_712 <= trunc_ln106_fu_271_p1;
                trunc_ln106_reg_712_pp0_iter4_reg <= trunc_ln106_reg_712;
                trunc_ln106_reg_712_pp0_iter5_reg <= trunc_ln106_reg_712_pp0_iter4_reg;
                trunc_ln125_reg_759 <= trunc_ln125_fu_362_p1;
                trunc_ln125_reg_759_pp0_iter5_reg <= trunc_ln125_reg_759;
                u_95_out_load_reg_789 <= u_95_out_i;
                v_reg_794 <= v_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ah_reg_678 <= a_q0(63 downto 32);
                al_reg_668 <= al_fu_223_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                bh_reg_683 <= b_q0(63 downto 32);
                bl_reg_673 <= bl_fu_227_p1;
                icmp_ln144_reg_654 <= icmp_ln144_fu_186_p2;
                icmp_ln144_reg_654_pp0_iter1_reg <= icmp_ln144_reg_654;
            end if;
        end if;
    end process;
    add_ln133_reg_775(31 downto 0) <= "00000000000000000000000000000000";
    add_ln133_reg_775_pp0_iter7_reg(31 downto 0) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln145_fu_202_p1(3 - 1 downto 0);
    a_ce0 <= a_ce0_local;

    a_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_ce0_local <= ap_const_logic_1;
        else 
            a_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_406_p2 <= std_logic_vector(unsigned(trunc_ln130_fu_398_p1) + unsigned(add_ln130_208_fu_378_p2));
    add_ln123_fu_336_p2 <= std_logic_vector(unsigned(zext_ln123_fu_330_p1) + unsigned(zext_ln123_169_fu_333_p1));
    add_ln130_206_fu_392_p2 <= std_logic_vector(unsigned(zext_ln106_234_fu_372_p1) + unsigned(zext_ln106_232_fu_366_p1));
    add_ln130_208_fu_378_p2 <= std_logic_vector(unsigned(trunc_ln106_269_reg_727_pp0_iter4_reg) + unsigned(tmp_493_reg_738_pp0_iter4_reg));
    add_ln130_fu_382_p2 <= std_logic_vector(unsigned(zext_ln130_fu_375_p1) + unsigned(zext_ln106_233_fu_369_p1));
    add_ln133_fu_456_p2 <= std_logic_vector(unsigned(zext_ln133_fu_452_p1) + unsigned(and_ln_fu_438_p3));
    add_ln144_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_47) + unsigned(ap_const_lv4_1));
    al_fu_223_p1 <= a_q0(32 - 1 downto 0);
    and_ln133_s_fu_445_p3 <= (tmp_496_reg_770 & ap_const_lv32_0);
    and_ln147_fu_595_p2 <= (xor_ln147_s_fu_587_p3 and add_ln133_reg_775_pp0_iter7_reg);
    and_ln_fu_438_p3 <= (tmp_495_reg_749_pp0_iter5_reg & ap_const_lv32_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln144_fu_186_p2)
    begin
        if (((icmp_ln144_fu_186_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter7_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_47_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_47 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_47 <= j_fu_80;
        end if; 
    end process;

    b_address0 <= zext_ln145_27_fu_213_p1(3 - 1 downto 0);
    b_ce0 <= b_ce0_local;

    b_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_ce0_local <= ap_const_logic_1;
        else 
            b_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel_fu_571_p3 <= tempReg_reg_780_pp0_iter7_reg(63 downto 63);
    bl_fu_227_p1 <= b_q0(32 - 1 downto 0);
    carry_fu_498_p3 <= xor_ln105_62_fu_492_p2(63 downto 63);
    grp_fu_431_p_ce <= ap_const_logic_1;
    grp_fu_431_p_din0 <= zext_ln105_179_fu_261_p1(32 - 1 downto 0);
    grp_fu_431_p_din1 <= zext_ln105_fu_251_p1(32 - 1 downto 0);
    grp_fu_435_p_ce <= ap_const_logic_1;
    grp_fu_435_p_din0 <= zext_ln112_fu_266_p1(32 - 1 downto 0);
    grp_fu_435_p_din1 <= zext_ln105_fu_251_p1(32 - 1 downto 0);
    grp_fu_439_p_ce <= ap_const_logic_1;
    grp_fu_439_p_din0 <= zext_ln105_179_fu_261_p1(32 - 1 downto 0);
    grp_fu_439_p_din1 <= zext_ln110_fu_256_p1(32 - 1 downto 0);
    grp_fu_443_p_ce <= ap_const_logic_1;
    grp_fu_443_p_din0 <= zext_ln112_fu_266_p1(32 - 1 downto 0);
    grp_fu_443_p_din1 <= zext_ln110_fu_256_p1(32 - 1 downto 0);
    icmp_ln144_fu_186_p2 <= "1" when (ap_sig_allocacmp_j_47 = indvars_iv31) else "0";
    or_ln105_fu_486_p2 <= (xor_ln105_fu_474_p2 or xor_ln105_61_fu_480_p2);
    or_ln147_25_fu_565_p2 <= (xor_ln147_fu_557_p2 or xor_ln147_37_fu_561_p2);
    or_ln147_fu_605_p2 <= (xor_ln147_39_fu_600_p2 or and_ln147_fu_595_p2);
    or_ln56_fu_520_p3 <= (tmp_s_fu_510_p4 & add_ln105_reg_765);
    or_ln_fu_462_p3 <= (trunc_ln125_reg_759_pp0_iter5_reg & trunc_ln106_reg_712_pp0_iter5_reg);
    shl_ln_fu_431_p3 <= (trunc_ln125_reg_759_pp0_iter5_reg & ap_const_lv32_0);
    sub_ln145_fu_207_p2 <= std_logic_vector(unsigned(empty) - unsigned(trunc_ln144_fu_198_p1));

    t_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, t_out_i, ap_block_pp0_stage0, ap_loop_init, u_fu_623_p2)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                t_out_o <= ap_const_lv4_0;
            elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                t_out_o <= u_fu_623_p2;
            else 
                t_out_o <= t_out_i;
            end if;
        else 
            t_out_o <= t_out_i;
        end if; 
    end process;


    t_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            t_out_o_ap_vld <= ap_const_logic_1;
        else 
            t_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tempReg_fu_527_p2 <= std_logic_vector(unsigned(or_ln56_fu_520_p3) + unsigned(zext_ln105_180_fu_506_p1));
    temp_88_fu_412_p2 <= std_logic_vector(unsigned(zext_ln130_170_fu_402_p1) + unsigned(zext_ln130_169_fu_388_p1));
    temp_fu_346_p2 <= std_logic_vector(unsigned(zext_ln123_170_fu_342_p1) + unsigned(zext_ln106_fu_327_p1));
    tmp_161_fu_611_p3 <= or_ln147_fu_605_p2(63 downto 63);
    tmp_s_fu_510_p4 <= add_ln133_fu_456_p2(63 downto 32);
    trunc_ln106_267_fu_275_p1 <= grp_fu_435_p_dout0(32 - 1 downto 0);
    trunc_ln106_268_fu_279_p1 <= grp_fu_439_p_dout0(32 - 1 downto 0);
    trunc_ln106_269_fu_283_p1 <= grp_fu_443_p_dout0(32 - 1 downto 0);
    trunc_ln106_fu_271_p1 <= grp_fu_431_p_dout0(32 - 1 downto 0);
    trunc_ln125_fu_362_p1 <= temp_fu_346_p2(32 - 1 downto 0);
    trunc_ln130_fu_398_p1 <= add_ln130_206_fu_392_p2(32 - 1 downto 0);
    trunc_ln144_fu_198_p1 <= ap_sig_allocacmp_j_47(3 - 1 downto 0);
    trunc_ln147_fu_584_p1 <= tempReg_reg_780_pp0_iter7_reg(63 - 1 downto 0);

    u_95_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, u_95_out_i, v_fu_542_p2, ap_block_pp0_stage0, zext_ln143_cast_fu_157_p1, ap_loop_init)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                u_95_out_o <= zext_ln143_cast_fu_157_p1;
            elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                u_95_out_o <= v_fu_542_p2;
            else 
                u_95_out_o <= u_95_out_i;
            end if;
        else 
            u_95_out_o <= u_95_out_i;
        end if; 
    end process;


    u_95_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
            u_95_out_o_ap_vld <= ap_const_logic_1;
        else 
            u_95_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    u_fu_623_p2 <= std_logic_vector(unsigned(zext_ln148_fu_619_p1) + unsigned(t_out_i));
    v_114_out <= v_114_fu_76;

    v_114_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln144_reg_654_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1) and (icmp_ln144_reg_654_pp0_iter6_reg = ap_const_lv1_1))) then 
            v_114_out_ap_vld <= ap_const_logic_1;
        else 
            v_114_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    v_206_fu_468_p2 <= std_logic_vector(unsigned(or_ln_fu_462_p3) + unsigned(v_114_fu_76));
    v_fu_542_p2 <= std_logic_vector(unsigned(tempReg_reg_780) + unsigned(u_95_out_i));
    xor_ln105_61_fu_480_p2 <= (v_114_fu_76 xor shl_ln_fu_431_p3);
    xor_ln105_62_fu_492_p2 <= (v_206_fu_468_p2 xor or_ln105_fu_486_p2);
    xor_ln105_fu_474_p2 <= (v_206_fu_468_p2 xor shl_ln_fu_431_p3);
    xor_ln147_37_fu_561_p2 <= (u_95_out_load_reg_789 xor tempReg_reg_780_pp0_iter7_reg);
    xor_ln147_39_fu_600_p2 <= (v_reg_794 xor or_ln147_25_fu_565_p2);
    xor_ln147_52_fu_578_p2 <= (bit_sel_fu_571_p3 xor ap_const_lv1_1);
    xor_ln147_fu_557_p2 <= (v_reg_794 xor tempReg_reg_780_pp0_iter7_reg);
    xor_ln147_s_fu_587_p3 <= (xor_ln147_52_fu_578_p2 & trunc_ln147_fu_584_p1);
    zext_ln105_179_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bl_reg_673),64));
    zext_ln105_180_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_fu_498_p3),64));
    zext_ln105_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(al_reg_668),64));
    zext_ln106_232_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_492_reg_754),33));
    zext_ln106_233_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_493_reg_738_pp0_iter4_reg),33));
    zext_ln106_234_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_494_reg_744_pp0_iter4_reg),33));
    zext_ln106_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_491_reg_733),34));
    zext_ln110_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ah_reg_678),64));
    zext_ln112_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bh_reg_683),64));
    zext_ln123_169_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_267_reg_717),33));
    zext_ln123_170_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_336_p2),34));
    zext_ln123_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_268_reg_722),33));
    zext_ln130_169_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_fu_382_p2),34));
    zext_ln130_170_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_206_fu_392_p2),34));
    zext_ln130_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln106_269_reg_727_pp0_iter4_reg),33));
    zext_ln133_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln133_s_fu_445_p3),64));
    zext_ln143_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln143),64));
    zext_ln145_27_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln145_fu_207_p2),32));
    zext_ln145_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln144_fu_198_p1),32));
    zext_ln148_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_fu_611_p3),4));
end behav;
