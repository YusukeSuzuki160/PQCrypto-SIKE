-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_fpadd503_1_Pipeline_VITIS_LOOP_34_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    coeff_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    coeff_ce0 : OUT STD_LOGIC;
    coeff_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    coeff_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    coeff_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln21 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of sikep503_kem_enc_hw_fpadd503_1_Pipeline_VITIS_LOOP_34_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln34_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p503x2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p503x2_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal carry_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln21_cast_fu_105_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln21_cast_reg_255 : STD_LOGIC_VECTOR (63 downto 0);
    signal coeff_addr_reg_263 : STD_LOGIC_VECTOR (5 downto 0);
    signal coeff_load_reg_273 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tempReg_fu_168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln35_fu_174_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln35_reg_287 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln35_21_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_23_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_152_fu_58 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln34_fu_127_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal coeff_ce0_local : STD_LOGIC;
    signal coeff_address0_local : STD_LOGIC_VECTOR (5 downto 0);
    signal coeff_we0_local : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln35_fu_179_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p503x2_1_ce0_local : STD_LOGIC;
    signal trunc_ln35_fu_133_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_137_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_s_fu_141_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_22_fu_164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln35_fu_184_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln35_35_fu_189_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bit_sel1_fu_199_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_36_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_11_fu_212_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln35_s_fu_215_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln35_fu_193_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln35_37_fu_228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln35_12_fu_223_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln35_12_fu_234_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_fpadd503_149_3_Pipeline_VITIS_LOOP_28_2_p503x2_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    p503x2_1_U : component sikep503_kem_enc_hw_fpadd503_149_3_Pipeline_VITIS_LOOP_28_2_p503x2_1_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p503x2_1_address0,
        ce0 => p503x2_1_ce0_local,
        q0 => p503x2_1_q0);

    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    carry_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                carry_reg_94 <= or_ln35_12_fu_234_p2(63 downto 63);
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                carry_reg_94 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_152_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln34_fu_121_p2 = ap_const_lv1_0)) then 
                    i_152_fu_58 <= add_ln34_fu_127_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_152_fu_58 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln35_reg_287 <= and_ln35_fu_174_p2;
                coeff_load_reg_273 <= coeff_q0;
                tempReg_reg_278 <= tempReg_fu_168_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    coeff_addr_reg_263(2 downto 0) <= zext_ln35_21_fu_149_p1(6 - 1 downto 0)(2 downto 0);
                sext_ln21_cast_reg_255 <= sext_ln21_cast_fu_105_p3;
            end if;
        end if;
    end process;
    coeff_addr_reg_263(5 downto 3) <= "100";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln34_fu_121_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln34_fu_121_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln34_fu_127_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln35_fu_179_p2 <= std_logic_vector(unsigned(and_ln35_reg_287) + unsigned(tempReg_reg_278));
    and_ln35_12_fu_223_p2 <= (xor_ln35_s_fu_215_p3 and coeff_load_reg_273);
    and_ln35_fu_174_p2 <= (sext_ln21_cast_reg_255 and p503x2_1_q0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln34_fu_121_p2)
    begin
        if (((icmp_ln34_fu_121_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_152_fu_58)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_152_fu_58;
        end if; 
    end process;

    bit_sel1_fu_199_p3 <= tempReg_reg_278(63 downto 63);
    coeff_address0 <= coeff_address0_local;

    coeff_address0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln34_fu_121_p2, ap_CS_fsm_state3, coeff_addr_reg_263, zext_ln35_21_fu_149_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            coeff_address0_local <= coeff_addr_reg_263;
        elsif (((icmp_ln34_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            coeff_address0_local <= zext_ln35_21_fu_149_p1(6 - 1 downto 0);
        else 
            coeff_address0_local <= "XXXXXX";
        end if; 
    end process;

    coeff_ce0 <= coeff_ce0_local;

    coeff_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln34_fu_121_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln34_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            coeff_ce0_local <= ap_const_logic_1;
        else 
            coeff_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    coeff_d0 <= add_ln35_fu_179_p2;
    coeff_we0 <= coeff_we0_local;

    coeff_we0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            coeff_we0_local <= ap_const_lv8_FF;
        else 
            coeff_we0_local <= ap_const_lv8_0;
        end if; 
    end process;

    icmp_ln34_fu_121_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_8) else "0";
    or_ln35_12_fu_234_p2 <= (xor_ln35_37_fu_228_p2 or and_ln35_12_fu_223_p2);
    or_ln35_fu_193_p2 <= (xor_ln35_fu_184_p2 or xor_ln35_35_fu_189_p2);
    p503x2_1_address0 <= zext_ln35_23_fu_154_p1(3 - 1 downto 0);

    p503x2_1_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p503x2_1_ce0_local <= ap_const_logic_1;
        else 
            p503x2_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln21_cast_fu_105_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (sext_ln21(0) = '1') else 
        ap_const_lv64_0;
    tempReg_fu_168_p2 <= std_logic_vector(unsigned(coeff_q0) + unsigned(zext_ln35_22_fu_164_p1));
    trunc_ln35_11_fu_212_p1 <= tempReg_reg_278(63 - 1 downto 0);
    trunc_ln35_fu_133_p1 <= ap_sig_allocacmp_i(3 - 1 downto 0);
    xor_ln35_35_fu_189_p2 <= (tempReg_reg_278 xor and_ln35_reg_287);
    xor_ln35_36_fu_206_p2 <= (bit_sel1_fu_199_p3 xor ap_const_lv1_1);
    xor_ln35_37_fu_228_p2 <= (or_ln35_fu_193_p2 xor add_ln35_fu_179_p2);
    xor_ln35_fu_184_p2 <= (tempReg_reg_278 xor add_ln35_fu_179_p2);
    xor_ln35_s_fu_215_p3 <= (xor_ln35_36_fu_206_p2 & trunc_ln35_11_fu_212_p1);
    zext_ln35_21_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln35_s_fu_141_p3),32));
    zext_ln35_22_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(carry_reg_94),64));
    zext_ln35_23_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_fu_133_p1),32));
    zext_ln35_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_fu_133_p1),5));
    zext_ln35_s_fu_141_p3 <= (ap_const_lv1_1 & zext_ln35_fu_137_p1);
end behav;
