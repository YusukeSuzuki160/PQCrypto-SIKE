-- ==============================================================
-- Generated by Vitis HLS v2024.2.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sikep503_kem_enc_hw_fp2mul503_mont_133_2_Pipeline_VITIS_LOOP_169_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tt1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tt1_ce0 : OUT STD_LOGIC;
    tt1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tt2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tt2_ce0 : OUT STD_LOGIC;
    tt2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    tt3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tt3_ce0 : OUT STD_LOGIC;
    tt3_we0 : OUT STD_LOGIC;
    tt3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    borrow_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    borrow_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sikep503_kem_enc_hw_fp2mul503_mont_133_2_Pipeline_VITIS_LOOP_169_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln169_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal borrow_reg_94 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln169_reg_228_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln170_18_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln170_18_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln170_18_reg_232_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tt1_load_reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal tt2_load_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_fu_142_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempReg_reg_259 : STD_LOGIC_VECTOR (63 downto 0);
    signal borrowReg_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_232_fu_44 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln169_fu_121_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tt1_ce0_local : STD_LOGIC;
    signal tt2_ce0_local : STD_LOGIC;
    signal tt3_we0_local : STD_LOGIC;
    signal sub_ln170_fu_215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tt3_ce0_local : STD_LOGIC;
    signal trunc_ln170_fu_127_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln105_187_fu_152_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_fu_148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln105_fu_156_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln105_188_fu_162_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln95_fu_175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln95_fu_180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_281_fu_185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln170_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_167_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln170_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    borrow_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                borrow_reg_94 <= ap_const_lv1_0;
            elsif (((icmp_ln169_reg_228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                borrow_reg_94 <= borrowReg_fu_205_p2;
            end if; 
        end if;
    end process;

    i_232_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln169_fu_115_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_232_fu_44 <= add_ln169_fu_121_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_232_fu_44 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln169_reg_228 <= icmp_ln169_fu_115_p2;
                icmp_ln169_reg_228_pp0_iter1_reg <= icmp_ln169_reg_228;
                tempReg_reg_259 <= tempReg_fu_142_p2;
                tt1_load_reg_247 <= tt1_q0;
                tt2_load_reg_253 <= tt2_q0;
                    zext_ln170_18_reg_232(3 downto 0) <= zext_ln170_18_fu_131_p1(3 downto 0);
                    zext_ln170_18_reg_232_pp0_iter1_reg(3 downto 0) <= zext_ln170_18_reg_232(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln170_18_reg_232(31 downto 4) <= "0000000000000000000000000000";
    zext_ln170_18_reg_232_pp0_iter1_reg(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln169_fu_121_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv5_1));
    and_ln170_fu_199_p2 <= (xor_ln170_fu_193_p2 and borrow_reg_94);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln169_fu_115_p2)
    begin
        if (((icmp_ln169_fu_115_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln169_reg_228)
    begin
        if (((icmp_ln169_reg_228 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_232_fu_44)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i <= i_232_fu_44;
        end if; 
    end process;

    borrowReg_fu_205_p2 <= (tmp_fu_167_p3 or and_ln170_fu_199_p2);
    borrow_out <= borrow_reg_94;

    borrow_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln169_reg_228, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((icmp_ln169_reg_228 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            borrow_out_ap_vld <= ap_const_logic_1;
        else 
            borrow_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln169_fu_115_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv5_10) else "0";
    or_ln105_fu_156_p2 <= (xor_ln105_fu_148_p2 or xor_ln105_187_fu_152_p2);
    or_ln95_fu_180_p2 <= (tempReg_reg_259 or sub_ln95_fu_175_p2);
    sub_ln170_fu_215_p2 <= std_logic_vector(unsigned(tempReg_reg_259) - unsigned(zext_ln170_fu_211_p1));
    sub_ln95_fu_175_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(tempReg_reg_259));
    tempReg_fu_142_p2 <= std_logic_vector(unsigned(tt1_q0) - unsigned(tt2_q0));
    tmp_281_fu_185_p3 <= or_ln95_fu_180_p2(63 downto 63);
    tmp_fu_167_p3 <= xor_ln105_188_fu_162_p2(63 downto 63);
    trunc_ln170_fu_127_p1 <= ap_sig_allocacmp_i(4 - 1 downto 0);
    tt1_address0 <= zext_ln170_18_fu_131_p1(4 - 1 downto 0);
    tt1_ce0 <= tt1_ce0_local;

    tt1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tt1_ce0_local <= ap_const_logic_1;
        else 
            tt1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    tt2_address0 <= zext_ln170_18_fu_131_p1(4 - 1 downto 0);
    tt2_ce0 <= tt2_ce0_local;

    tt2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tt2_ce0_local <= ap_const_logic_1;
        else 
            tt2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    tt3_address0 <= zext_ln170_18_reg_232_pp0_iter1_reg(4 - 1 downto 0);
    tt3_ce0 <= tt3_ce0_local;

    tt3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tt3_ce0_local <= ap_const_logic_1;
        else 
            tt3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    tt3_d0 <= sub_ln170_fu_215_p2;
    tt3_we0 <= tt3_we0_local;

    tt3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln169_reg_228_pp0_iter1_reg)
    begin
        if (((icmp_ln169_reg_228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            tt3_we0_local <= ap_const_logic_1;
        else 
            tt3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln105_187_fu_152_p2 <= (tt2_load_reg_253 xor tempReg_reg_259);
    xor_ln105_188_fu_162_p2 <= (tt1_load_reg_247 xor or_ln105_fu_156_p2);
    xor_ln105_fu_148_p2 <= (tt2_load_reg_253 xor tt1_load_reg_247);
    xor_ln170_fu_193_p2 <= (tmp_281_fu_185_p3 xor ap_const_lv1_1);
    zext_ln170_18_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln170_fu_127_p1),32));
    zext_ln170_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(borrow_reg_94),64));
end behav;
