// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fpadd503_149_3_Pipeline_VITIS_LOOP_23_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_offset,
        b_address0,
        b_ce0,
        b_q0,
        c_offset,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] b_offset;
output  [3:0] b_address0;
output   b_ce0;
input  [63:0] b_q0;
input  [0:0] c_offset;
output  [3:0] c_address0;
output   c_ce0;
output   c_we0;
output  [63:0] c_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln23_reg_247;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] carry_reg_92;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln23_fu_111_p2;
wire   [2:0] trunc_ln24_fu_123_p1;
reg   [2:0] trunc_ln24_reg_251;
reg   [63:0] b_load_reg_261;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] tempReg_fu_149_p2;
reg   [63:0] tempReg_reg_268;
wire    ap_block_pp0_stage0_subdone;
wire    ap_loop_init;
wire   [31:0] zext_ln24_fu_135_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln24_31_fu_161_p1;
reg   [3:0] i_fu_50;
wire   [3:0] add_ln23_fu_117_p2;
reg   [3:0] ap_sig_allocacmp_i_227;
reg    b_ce0_local;
reg    c_we0_local;
wire   [63:0] add_ln24_fu_166_p2;
reg    c_ce0_local;
wire   [3:0] tmp_fu_127_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln24_30_fu_145_p1;
wire   [3:0] tmp_s_fu_155_p3;
wire   [63:0] xor_ln24_fu_171_p2;
wire   [63:0] xor_ln24_46_fu_176_p2;
wire   [0:0] bit_sel_fu_186_p3;
wire   [0:0] xor_ln24_49_fu_193_p2;
wire   [62:0] trunc_ln24_15_fu_199_p1;
wire   [63:0] xor_ln24_s_fu_202_p3;
wire   [63:0] or_ln24_fu_180_p2;
wire   [63:0] xor_ln24_48_fu_215_p2;
wire   [63:0] and_ln24_fu_210_p2;
wire   [63:0] or_ln24_16_fu_221_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_263;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_50 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_263)) begin
            carry_reg_92 <= or_ln24_16_fu_221_p2[32'd63];
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            carry_reg_92 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_111_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= add_ln23_fu_117_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_load_reg_261 <= b_q0;
        tempReg_reg_268 <= tempReg_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln23_reg_247 <= icmp_ln23_fu_111_p2;
        trunc_ln24_reg_251 <= trunc_ln24_fu_123_p1;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_247 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_227 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_227 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0_local = 1'b1;
    end else begin
        b_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_ce0_local = 1'b1;
    end else begin
        c_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_247 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_we0_local = 1'b1;
    end else begin
        c_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_117_p2 = (ap_sig_allocacmp_i_227 + 4'd1);

assign add_ln24_fu_166_p2 = (b_load_reg_261 + tempReg_reg_268);

assign and_ln24_fu_210_p2 = (xor_ln24_s_fu_202_p3 & b_load_reg_261);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_263 = ((icmp_ln23_reg_247 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign b_address0 = zext_ln24_fu_135_p1;

assign b_ce0 = b_ce0_local;

assign bit_sel_fu_186_p3 = tempReg_reg_268[64'd63];

assign c_address0 = zext_ln24_31_fu_161_p1;

assign c_ce0 = c_ce0_local;

assign c_d0 = add_ln24_fu_166_p2;

assign c_we0 = c_we0_local;

assign icmp_ln23_fu_111_p2 = ((ap_sig_allocacmp_i_227 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln24_16_fu_221_p2 = (xor_ln24_48_fu_215_p2 | and_ln24_fu_210_p2);

assign or_ln24_fu_180_p2 = (xor_ln24_fu_171_p2 | xor_ln24_46_fu_176_p2);

assign tempReg_fu_149_p2 = (b_q0 + zext_ln24_30_fu_145_p1);

assign tmp_fu_127_p3 = {{b_offset}, {trunc_ln24_fu_123_p1}};

assign tmp_s_fu_155_p3 = {{c_offset}, {trunc_ln24_reg_251}};

assign trunc_ln24_15_fu_199_p1 = tempReg_reg_268[62:0];

assign trunc_ln24_fu_123_p1 = ap_sig_allocacmp_i_227[2:0];

assign xor_ln24_46_fu_176_p2 = (tempReg_reg_268 ^ b_load_reg_261);

assign xor_ln24_48_fu_215_p2 = (or_ln24_fu_180_p2 ^ add_ln24_fu_166_p2);

assign xor_ln24_49_fu_193_p2 = (bit_sel_fu_186_p3 ^ 1'd1);

assign xor_ln24_fu_171_p2 = (tempReg_reg_268 ^ add_ln24_fu_166_p2);

assign xor_ln24_s_fu_202_p3 = {{xor_ln24_49_fu_193_p2}, {trunc_ln24_15_fu_199_p1}};

assign zext_ln24_30_fu_145_p1 = carry_reg_92;

assign zext_ln24_31_fu_161_p1 = tmp_s_fu_155_p3;

assign zext_ln24_fu_135_p1 = tmp_fu_127_p3;

endmodule //sikep503_kem_enc_hw_fpadd503_149_3_Pipeline_VITIS_LOOP_23_1
