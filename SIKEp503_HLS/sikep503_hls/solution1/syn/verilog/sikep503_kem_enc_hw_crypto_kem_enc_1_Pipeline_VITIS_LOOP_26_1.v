// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_26_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp_address0,
        temp_ce0,
        temp_we0,
        temp_d0,
        temp_1_address0,
        temp_1_ce0,
        temp_1_we0,
        temp_1_d0,
        temp_2_address0,
        temp_2_ce0,
        temp_2_we0,
        temp_2_d0,
        temp_3_address0,
        temp_3_ce0,
        temp_3_we0,
        temp_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] temp_address0;
output   temp_ce0;
output   temp_we0;
output  [7:0] temp_d0;
output  [6:0] temp_1_address0;
output   temp_1_ce0;
output   temp_1_we0;
output  [7:0] temp_1_d0;
output  [6:0] temp_2_address0;
output   temp_2_ce0;
output   temp_2_we0;
output  [7:0] temp_2_d0;
output  [6:0] temp_3_address0;
output   temp_3_ce0;
output   temp_3_we0;
output  [7:0] temp_3_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_145_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] lcg_state;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln26_reg_354;
reg   [0:0] icmp_ln26_reg_354_pp0_iter1_reg;
wire   [1:0] trunc_ln26_fu_157_p1;
reg   [1:0] trunc_ln26_reg_358;
reg   [1:0] trunc_ln26_reg_358_pp0_iter1_reg;
reg   [2:0] lshr_ln_reg_362;
reg   [2:0] lshr_ln_reg_362_pp0_iter1_reg;
wire   [0:0] icmp_ln28_fu_171_p2;
reg   [0:0] icmp_ln28_reg_367;
reg   [0:0] icmp_ln28_reg_367_pp0_iter1_reg;
wire   [31:0] newFirst18_fu_247_p2;
reg   [31:0] newFirst18_reg_371;
wire   [31:0] newFirst_fu_265_p2;
reg   [31:0] newFirst_reg_376;
wire   [31:0] newSecond21_fu_277_p2;
reg   [31:0] newSecond21_reg_381;
wire   [31:0] r_1_fu_292_p2;
reg   [31:0] ap_phi_mux_r_2_phi_fu_131_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_r_2_reg_128;
reg   [31:0] ap_phi_reg_pp0_iter1_r_2_reg_128;
reg   [31:0] ap_phi_reg_pp0_iter2_r_2_reg_128;
wire   [31:0] zext_ln26_fu_306_p1;
wire   [31:0] zext_ln32_fu_319_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] i_fu_68;
wire   [4:0] i_284_fu_151_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_283;
reg   [23:0] r_fu_72;
reg    temp_2_we0_local;
wire   [7:0] trunc_ln32_fu_311_p1;
reg    temp_2_ce0_local;
reg    temp_1_we0_local;
reg    temp_1_ce0_local;
reg    temp_we0_local;
reg    temp_ce0_local;
reg    temp_3_we0_local;
reg    temp_3_ce0_local;
wire   [31:0] shl_ln17_fu_181_p2;
wire   [31:0] shl_ln17_1_fu_187_p2;
wire   [31:0] shl_ln17_2_fu_199_p2;
wire   [31:0] shl_ln17_3_fu_205_p2;
wire   [31:0] shl_ln17_5_fu_223_p2;
wire   [31:0] shl_ln17_4_fu_217_p2;
wire   [31:0] shl_ln17_7_fu_241_p2;
wire   [31:0] shl_ln17_6_fu_235_p2;
wire   [31:0] add_ln17_fu_259_p2;
wire   [31:0] shl_ln17_8_fu_253_p2;
wire   [31:0] sub_ln17_fu_193_p2;
wire   [31:0] newFirst22_fu_211_p2;
wire   [31:0] newSecond23_fu_271_p2;
wire   [31:0] newFirst20_fu_229_p2;
wire   [31:0] newSecond19_fu_288_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_117;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 lcg_state = 32'd305419896;
#0 i_fu_68 = 5'd0;
#0 r_fu_72 = 24'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_117)) begin
        if (((icmp_ln28_reg_367 == 1'd1) & (icmp_ln26_reg_354 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_r_2_reg_128 <= r_1_fu_292_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_r_2_reg_128 <= ap_phi_reg_pp0_iter1_r_2_reg_128;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_145_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= i_284_fu_151_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln26_reg_354 <= icmp_ln26_fu_145_p2;
        icmp_ln26_reg_354_pp0_iter1_reg <= icmp_ln26_reg_354;
        icmp_ln28_reg_367 <= icmp_ln28_fu_171_p2;
        icmp_ln28_reg_367_pp0_iter1_reg <= icmp_ln28_reg_367;
        lshr_ln_reg_362 <= {{ap_sig_allocacmp_i_283[4:2]}};
        lshr_ln_reg_362_pp0_iter1_reg <= lshr_ln_reg_362;
        newFirst18_reg_371 <= newFirst18_fu_247_p2;
        newFirst_reg_376 <= newFirst_fu_265_p2;
        newSecond21_reg_381 <= newSecond21_fu_277_p2;
        trunc_ln26_reg_358 <= trunc_ln26_fu_157_p1;
        trunc_ln26_reg_358_pp0_iter1_reg <= trunc_ln26_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_r_2_reg_128 <= ap_phi_reg_pp0_iter0_r_2_reg_128;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_reg_367 == 1'd1) & (icmp_ln26_reg_354 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lcg_state <= r_1_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_fu_72 <= {{ap_phi_mux_r_2_phi_fu_131_p4[31:8]}};
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_145_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_367_pp0_iter1_reg == 1'd0) & (icmp_ln26_reg_354_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_r_2_phi_fu_131_p4 = zext_ln26_fu_306_p1;
    end else begin
        ap_phi_mux_r_2_phi_fu_131_p4 = ap_phi_reg_pp0_iter2_r_2_reg_128;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_283 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_283 = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_1_ce0_local = 1'b1;
    end else begin
        temp_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln26_reg_358_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_1_we0_local = 1'b1;
    end else begin
        temp_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_2_ce0_local = 1'b1;
    end else begin
        temp_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln26_reg_358_pp0_iter1_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_2_we0_local = 1'b1;
    end else begin
        temp_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_3_ce0_local = 1'b1;
    end else begin
        temp_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln26_reg_358_pp0_iter1_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_3_we0_local = 1'b1;
    end else begin
        temp_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_ce0_local = 1'b1;
    end else begin
        temp_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln26_reg_358_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_we0_local = 1'b1;
    end else begin
        temp_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_259_p2 = (32'd1013904223 + lcg_state);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_117 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_r_2_reg_128 = 'bx;

assign ap_ready = ap_ready_sig;

assign i_284_fu_151_p2 = (ap_sig_allocacmp_i_283 + 5'd1);

assign icmp_ln26_fu_145_p2 = ((ap_sig_allocacmp_i_283 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_171_p2 = ((trunc_ln26_fu_157_p1 == 2'd0) ? 1'b1 : 1'b0);

assign newFirst18_fu_247_p2 = (shl_ln17_7_fu_241_p2 - shl_ln17_6_fu_235_p2);

assign newFirst20_fu_229_p2 = (shl_ln17_5_fu_223_p2 - shl_ln17_4_fu_217_p2);

assign newFirst22_fu_211_p2 = (shl_ln17_2_fu_199_p2 - shl_ln17_3_fu_205_p2);

assign newFirst_fu_265_p2 = (add_ln17_fu_259_p2 - shl_ln17_8_fu_253_p2);

assign newSecond19_fu_288_p2 = (newSecond21_reg_381 + newFirst18_reg_371);

assign newSecond21_fu_277_p2 = (newSecond23_fu_271_p2 + newFirst20_fu_229_p2);

assign newSecond23_fu_271_p2 = (sub_ln17_fu_193_p2 + newFirst22_fu_211_p2);

assign r_1_fu_292_p2 = (newSecond19_fu_288_p2 + newFirst_reg_376);

assign shl_ln17_1_fu_187_p2 = lcg_state << 32'd19;

assign shl_ln17_2_fu_199_p2 = lcg_state << 32'd17;

assign shl_ln17_3_fu_205_p2 = lcg_state << 32'd15;

assign shl_ln17_4_fu_217_p2 = lcg_state << 32'd13;

assign shl_ln17_5_fu_223_p2 = lcg_state << 32'd11;

assign shl_ln17_6_fu_235_p2 = lcg_state << 32'd9;

assign shl_ln17_7_fu_241_p2 = lcg_state << 32'd4;

assign shl_ln17_8_fu_253_p2 = lcg_state << 32'd2;

assign shl_ln17_fu_181_p2 = lcg_state << 32'd21;

assign sub_ln17_fu_193_p2 = (shl_ln17_fu_181_p2 - shl_ln17_1_fu_187_p2);

assign temp_1_address0 = zext_ln32_fu_319_p1;

assign temp_1_ce0 = temp_1_ce0_local;

assign temp_1_d0 = trunc_ln32_fu_311_p1;

assign temp_1_we0 = temp_1_we0_local;

assign temp_2_address0 = zext_ln32_fu_319_p1;

assign temp_2_ce0 = temp_2_ce0_local;

assign temp_2_d0 = trunc_ln32_fu_311_p1;

assign temp_2_we0 = temp_2_we0_local;

assign temp_3_address0 = zext_ln32_fu_319_p1;

assign temp_3_ce0 = temp_3_ce0_local;

assign temp_3_d0 = trunc_ln32_fu_311_p1;

assign temp_3_we0 = temp_3_we0_local;

assign temp_address0 = zext_ln32_fu_319_p1;

assign temp_ce0 = temp_ce0_local;

assign temp_d0 = trunc_ln32_fu_311_p1;

assign temp_we0 = temp_we0_local;

assign trunc_ln26_fu_157_p1 = ap_sig_allocacmp_i_283[1:0];

assign trunc_ln32_fu_311_p1 = ap_phi_mux_r_2_phi_fu_131_p4[7:0];

assign zext_ln26_fu_306_p1 = r_fu_72;

assign zext_ln32_fu_319_p1 = lshr_ln_reg_362_pp0_iter1_reg;

endmodule //sikep503_kem_enc_hw_crypto_kem_enc_1_Pipeline_VITIS_LOOP_26_1
