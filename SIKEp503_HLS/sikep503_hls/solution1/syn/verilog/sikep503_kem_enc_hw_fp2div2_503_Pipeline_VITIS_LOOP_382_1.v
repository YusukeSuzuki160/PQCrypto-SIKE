// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_382_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_1_address0,
        c_1_ce0,
        c_1_we0,
        c_1_d0,
        c_1_q0,
        c_1_address1,
        c_1_ce1,
        c_1_q1,
        c_0_address0,
        c_0_ce0,
        c_0_we0,
        c_0_d0,
        c_0_q0,
        c_0_address1,
        c_0_ce1,
        c_0_q1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] c_1_address0;
output   c_1_ce0;
output   c_1_we0;
output  [63:0] c_1_d0;
input  [63:0] c_1_q0;
output  [2:0] c_1_address1;
output   c_1_ce1;
input  [63:0] c_1_q1;
output  [2:0] c_0_address0;
output   c_0_ce0;
output   c_0_we0;
output  [63:0] c_0_d0;
input  [63:0] c_0_q0;
output  [2:0] c_0_address1;
output   c_0_ce1;
input  [63:0] c_0_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln382_fu_100_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln383_fu_106_p2;
reg   [2:0] add_ln383_reg_214;
wire   [0:0] trunc_ln382_fu_112_p1;
reg   [0:0] trunc_ln382_reg_219;
reg   [2:0] c_0_addr_reg_225;
reg   [2:0] c_1_addr_reg_231;
wire   [31:0] zext_ln383_fu_126_p1;
wire   [31:0] zext_ln383_1_fu_142_p1;
reg   [2:0] i_240_fu_38;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
reg    c_0_ce1_local;
reg    c_0_ce0_local;
reg   [2:0] c_0_address0_local;
reg    c_0_we0_local;
wire   [63:0] or_ln_fu_190_p3;
reg    c_1_ce1_local;
reg    c_1_ce0_local;
reg   [2:0] c_1_address0_local;
reg    c_1_we0_local;
wire   [1:0] lshr_ln_fu_116_p4;
wire   [1:0] lshr_ln383_1_fu_132_p4;
wire   [62:0] tmp_fu_148_p4;
wire   [62:0] tmp_s_fu_158_p4;
wire   [0:0] trunc_ln383_fu_175_p1;
wire   [0:0] trunc_ln383_2_fu_179_p1;
wire   [0:0] select_ln383_2_fu_183_p3;
wire   [62:0] select_ln383_fu_168_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 i_240_fu_38 = 3'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_240_fu_38 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_240_fu_38 <= add_ln383_reg_214;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln383_reg_214 <= add_ln383_fu_106_p2;
        c_0_addr_reg_225[1 : 0] <= zext_ln383_fu_126_p1[1 : 0];
        c_1_addr_reg_231[1 : 0] <= zext_ln383_fu_126_p1[1 : 0];
        trunc_ln382_reg_219 <= trunc_ln382_fu_112_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln382_fu_100_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_240_fu_38;
    end
end

always @ (*) begin
    if (((trunc_ln382_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_address0_local = c_0_addr_reg_225;
    end else if (((icmp_ln382_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_address0_local = zext_ln383_1_fu_142_p1;
    end else begin
        c_0_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln382_fu_100_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)) | ((trunc_ln382_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        c_0_ce0_local = 1'b1;
    end else begin
        c_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_ce1_local = 1'b1;
    end else begin
        c_0_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln382_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_we0_local = 1'b1;
    end else begin
        c_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln382_reg_219 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_1_address0_local = c_1_addr_reg_231;
    end else if (((icmp_ln382_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        c_1_address0_local = zext_ln383_1_fu_142_p1;
    end else begin
        c_1_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln382_fu_100_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)) | ((trunc_ln382_reg_219 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        c_1_ce0_local = 1'b1;
    end else begin
        c_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        c_1_ce1_local = 1'b1;
    end else begin
        c_1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln382_reg_219 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        c_1_we0_local = 1'b1;
    end else begin
        c_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln382_fu_100_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln383_fu_106_p2 = (ap_sig_allocacmp_i + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign c_0_address0 = c_0_address0_local;

assign c_0_address1 = zext_ln383_fu_126_p1;

assign c_0_ce0 = c_0_ce0_local;

assign c_0_ce1 = c_0_ce1_local;

assign c_0_d0 = or_ln_fu_190_p3;

assign c_0_we0 = c_0_we0_local;

assign c_1_address0 = c_1_address0_local;

assign c_1_address1 = zext_ln383_fu_126_p1;

assign c_1_ce0 = c_1_ce0_local;

assign c_1_ce1 = c_1_ce1_local;

assign c_1_d0 = or_ln_fu_190_p3;

assign c_1_we0 = c_1_we0_local;

assign icmp_ln382_fu_100_p2 = ((ap_sig_allocacmp_i == 3'd7) ? 1'b1 : 1'b0);

assign lshr_ln383_1_fu_132_p4 = {{add_ln383_fu_106_p2[2:1]}};

assign lshr_ln_fu_116_p4 = {{ap_sig_allocacmp_i[2:1]}};

assign or_ln_fu_190_p3 = {{select_ln383_2_fu_183_p3}, {select_ln383_fu_168_p3}};

assign select_ln383_2_fu_183_p3 = ((trunc_ln382_reg_219[0:0] == 1'b1) ? trunc_ln383_fu_175_p1 : trunc_ln383_2_fu_179_p1);

assign select_ln383_fu_168_p3 = ((trunc_ln382_reg_219[0:0] == 1'b1) ? tmp_fu_148_p4 : tmp_s_fu_158_p4);

assign tmp_fu_148_p4 = {{c_1_q1[63:1]}};

assign tmp_s_fu_158_p4 = {{c_0_q1[63:1]}};

assign trunc_ln382_fu_112_p1 = ap_sig_allocacmp_i[0:0];

assign trunc_ln383_2_fu_179_p1 = c_1_q0[0:0];

assign trunc_ln383_fu_175_p1 = c_0_q0[0:0];

assign zext_ln383_1_fu_142_p1 = lshr_ln383_1_fu_132_p4;

assign zext_ln383_fu_126_p1 = lshr_ln_fu_116_p4;

always @ (posedge ap_clk) begin
    c_0_addr_reg_225[2] <= 1'b0;
    c_1_addr_reg_231[2] <= 1'b0;
end

endmodule //sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_382_1
