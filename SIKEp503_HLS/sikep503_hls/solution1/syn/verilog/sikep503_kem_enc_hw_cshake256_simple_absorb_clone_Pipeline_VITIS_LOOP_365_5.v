// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_cshake256_simple_absorb_clone_Pipeline_VITIS_LOOP_365_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_address0,
        t_ce0,
        t_q0,
        t_address1,
        t_ce1,
        t_q1,
        t_60_address0,
        t_60_ce0,
        t_60_q0,
        t_60_address1,
        t_60_ce1,
        t_60_q1,
        t_61_address0,
        t_61_ce0,
        t_61_q0,
        t_61_address1,
        t_61_ce1,
        t_61_q1,
        t_62_address0,
        t_62_ce0,
        t_62_q0,
        t_62_address1,
        t_62_ce1,
        t_62_q1,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_address1,
        s_ce1,
        s_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] t_address0;
output   t_ce0;
input  [7:0] t_q0;
output  [5:0] t_address1;
output   t_ce1;
input  [7:0] t_q1;
output  [5:0] t_60_address0;
output   t_60_ce0;
input  [7:0] t_60_q0;
output  [5:0] t_60_address1;
output   t_60_ce1;
input  [7:0] t_60_q1;
output  [5:0] t_61_address0;
output   t_61_ce0;
input  [7:0] t_61_q0;
output  [5:0] t_61_address1;
output   t_61_ce1;
input  [7:0] t_61_q1;
output  [5:0] t_62_address0;
output   t_62_ce0;
input  [7:0] t_62_q0;
output  [5:0] t_62_address1;
output   t_62_ce1;
input  [7:0] t_62_q1;
output  [4:0] s_address0;
output   s_ce0;
output  [7:0] s_we0;
output  [63:0] s_d0;
output  [4:0] s_address1;
output   s_ce1;
input  [63:0] s_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln365_fu_177_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] i_reg_262;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] s_addr_reg_272;
reg   [4:0] s_addr_reg_272_pp0_iter1_reg;
reg   [63:0] s_load_reg_318;
wire   [31:0] zext_ln27_fu_189_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln27_1_fu_206_p1;
wire   [31:0] zext_ln27_2_fu_221_p1;
reg   [4:0] i_248_fu_48;
wire   [4:0] i_278_fu_183_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
reg    s_ce1_local;
reg    s_ce0_local;
reg   [7:0] s_we0_local;
wire   [63:0] xor_ln366_fu_249_p2;
reg    t_ce1_local;
reg    t_ce0_local;
reg    t_60_ce1_local;
reg    t_60_ce0_local;
reg    t_61_ce1_local;
reg    t_61_ce0_local;
reg    t_62_ce1_local;
reg    t_62_ce0_local;
wire   [5:0] shl_ln_fu_199_p3;
wire   [5:0] or_ln27_fu_214_p3;
wire   [63:0] or_ln366_6_fu_229_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_248_fu_48 = 5'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln365_fu_177_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_248_fu_48 <= i_278_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_248_fu_48 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_reg_262 <= ap_sig_allocacmp_i;
        s_addr_reg_272 <= zext_ln27_fu_189_p1;
        s_addr_reg_272_pp0_iter1_reg <= s_addr_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_load_reg_318 <= s_q1;
    end
end

always @ (*) begin
    if (((icmp_ln365_fu_177_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_248_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_ce0_local = 1'b1;
    end else begin
        s_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_ce1_local = 1'b1;
    end else begin
        s_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        s_we0_local = 8'd255;
    end else begin
        s_we0_local = 8'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_60_ce0_local = 1'b1;
    end else begin
        t_60_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_60_ce1_local = 1'b1;
    end else begin
        t_60_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_61_ce0_local = 1'b1;
    end else begin
        t_61_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_61_ce1_local = 1'b1;
    end else begin
        t_61_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_62_ce0_local = 1'b1;
    end else begin
        t_62_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_62_ce1_local = 1'b1;
    end else begin
        t_62_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce0_local = 1'b1;
    end else begin
        t_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_ce1_local = 1'b1;
    end else begin
        t_ce1_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign i_278_fu_183_p2 = (ap_sig_allocacmp_i + 5'd1);

assign icmp_ln365_fu_177_p2 = ((ap_sig_allocacmp_i == 5'd17) ? 1'b1 : 1'b0);

assign or_ln27_fu_214_p3 = {{i_reg_262}, {1'd1}};

assign or_ln366_6_fu_229_p9 = {{{{{{{{t_62_q0}, {t_61_q0}}, {t_60_q0}}, {t_q0}}, {t_62_q1}}, {t_61_q1}}, {t_60_q1}}, {t_q1}};

assign s_address0 = s_addr_reg_272_pp0_iter1_reg;

assign s_address1 = zext_ln27_fu_189_p1;

assign s_ce0 = s_ce0_local;

assign s_ce1 = s_ce1_local;

assign s_d0 = xor_ln366_fu_249_p2;

assign s_we0 = s_we0_local;

assign shl_ln_fu_199_p3 = {{i_reg_262}, {1'd0}};

assign t_60_address0 = zext_ln27_2_fu_221_p1;

assign t_60_address1 = zext_ln27_1_fu_206_p1;

assign t_60_ce0 = t_60_ce0_local;

assign t_60_ce1 = t_60_ce1_local;

assign t_61_address0 = zext_ln27_2_fu_221_p1;

assign t_61_address1 = zext_ln27_1_fu_206_p1;

assign t_61_ce0 = t_61_ce0_local;

assign t_61_ce1 = t_61_ce1_local;

assign t_62_address0 = zext_ln27_2_fu_221_p1;

assign t_62_address1 = zext_ln27_1_fu_206_p1;

assign t_62_ce0 = t_62_ce0_local;

assign t_62_ce1 = t_62_ce1_local;

assign t_address0 = zext_ln27_2_fu_221_p1;

assign t_address1 = zext_ln27_1_fu_206_p1;

assign t_ce0 = t_ce0_local;

assign t_ce1 = t_ce1_local;

assign xor_ln366_fu_249_p2 = (s_load_reg_318 ^ or_ln366_6_fu_229_p9);

assign zext_ln27_1_fu_206_p1 = shl_ln_fu_199_p3;

assign zext_ln27_2_fu_221_p1 = or_ln27_fu_214_p3;

assign zext_ln27_fu_189_p1 = ap_sig_allocacmp_i;

endmodule //sikep503_kem_enc_hw_cshake256_simple_absorb_clone_Pipeline_VITIS_LOOP_365_5
