// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_78_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        c_0_address0,
        c_0_ce0,
        c_0_we0,
        c_0_d0,
        c_0_q0,
        c_1_address0,
        c_1_ce0,
        c_1_we0,
        c_1_d0,
        c_1_q0,
        sext_ln75
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] c_0_address0;
output   c_0_ce0;
output   c_0_we0;
output  [63:0] c_0_d0;
input  [63:0] c_0_q0;
output  [2:0] c_1_address0;
output   c_1_ce0;
output   c_1_we0;
output  [63:0] c_1_d0;
input  [63:0] c_1_q0;
input  [0:0] sext_ln75;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln78_reg_283;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] p503_1_address0;
wire   [63:0] p503_1_q0;
reg   [0:0] carry_reg_105;
wire   [63:0] sext_ln75_cast_fu_116_p3;
reg   [63:0] sext_ln75_cast_reg_272;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_272_reg_277;
wire   [0:0] icmp_ln78_fu_132_p2;
reg   [0:0] icmp_ln78_reg_283_pp0_iter1_reg;
reg   [2:0] c_0_addr_reg_287;
reg   [2:0] c_0_addr_reg_287_pp0_iter1_reg;
reg   [2:0] c_1_addr_reg_292;
reg   [2:0] c_1_addr_reg_292_pp0_iter1_reg;
wire   [0:0] trunc_ln78_fu_168_p1;
reg   [0:0] trunc_ln78_reg_302;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] select_ln79_fu_171_p3;
reg   [63:0] select_ln79_reg_306;
wire   [63:0] and_ln79_fu_179_p2;
reg   [63:0] and_ln79_reg_312;
wire   [63:0] tempReg_fu_193_p2;
reg   [63:0] tempReg_reg_318;
wire   [63:0] add_ln79_fu_198_p2;
reg   [63:0] add_ln79_reg_326;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
wire   [31:0] zext_ln79_2_fu_152_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln79_3_fu_158_p1;
reg   [3:0] i_fu_56;
wire   [3:0] add_ln78_fu_163_p2;
reg   [3:0] ap_sig_allocacmp_i_272;
reg    c_0_ce0_local;
reg   [2:0] c_0_address0_local;
reg    c_0_we0_local;
wire    ap_block_pp0_stage1;
reg    c_1_ce0_local;
reg   [2:0] c_1_address0_local;
reg    c_1_we0_local;
reg    p503_1_ce0_local;
wire   [1:0] lshr_ln_fu_142_p4;
wire   [2:0] trunc_ln78_2_fu_138_p1;
wire   [63:0] zext_ln79_fu_189_p1;
wire   [63:0] xor_ln79_fu_203_p2;
wire   [63:0] xor_ln79_1_fu_207_p2;
wire   [0:0] bit_sel_fu_217_p3;
wire   [0:0] xor_ln79_4_fu_224_p2;
wire   [62:0] trunc_ln79_fu_230_p1;
wire   [63:0] xor_ln79_2_fu_233_p3;
wire   [63:0] or_ln79_fu_211_p2;
wire   [63:0] xor_ln79_3_fu_246_p2;
wire   [63:0] and_ln79_1_fu_241_p2;
wire   [63:0] or_ln79_1_fu_251_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_56 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_78_1_p503_1_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
p503_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p503_1_address0),
    .ce0(p503_1_ce0_local),
    .q0(p503_1_q0)
);

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_reg_283_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        carry_reg_105 <= or_ln79_1_fu_251_p2[32'd63];
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        carry_reg_105 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_56 <= 4'd0;
    end else if (((icmp_ln78_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_56 <= add_ln78_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln79_reg_326 <= add_ln79_fu_198_p2;
        c_0_addr_reg_287[1 : 0] <= zext_ln79_2_fu_152_p1[1 : 0];
        c_0_addr_reg_287_pp0_iter1_reg[1 : 0] <= c_0_addr_reg_287[1 : 0];
        c_1_addr_reg_292[1 : 0] <= zext_ln79_2_fu_152_p1[1 : 0];
        c_1_addr_reg_292_pp0_iter1_reg[1 : 0] <= c_1_addr_reg_292[1 : 0];
        i_272_reg_277 <= ap_sig_allocacmp_i_272;
        icmp_ln78_reg_283 <= icmp_ln78_fu_132_p2;
        icmp_ln78_reg_283_pp0_iter1_reg <= icmp_ln78_reg_283;
        sext_ln75_cast_reg_272 <= sext_ln75_cast_fu_116_p3;
        tempReg_reg_318 <= tempReg_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln79_reg_312 <= and_ln79_fu_179_p2;
        select_ln79_reg_306 <= select_ln79_fu_171_p3;
        trunc_ln78_reg_302 <= trunc_ln78_fu_168_p1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_283 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_283 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_272 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_272 = i_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_0_address0_local = c_0_addr_reg_287_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_address0_local = zext_ln79_2_fu_152_p1;
    end else begin
        c_0_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        c_0_ce0_local = 1'b1;
    end else begin
        c_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln78_reg_302 == 1'd0) & (icmp_ln78_reg_283_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_0_we0_local = 1'b1;
    end else begin
        c_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_1_address0_local = c_1_addr_reg_292_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_1_address0_local = zext_ln79_2_fu_152_p1;
    end else begin
        c_1_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        c_1_ce0_local = 1'b1;
    end else begin
        c_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln78_reg_302 == 1'd1) & (icmp_ln78_reg_283_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_1_we0_local = 1'b1;
    end else begin
        c_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p503_1_ce0_local = 1'b1;
    end else begin
        p503_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_163_p2 = (i_272_reg_277 + 4'd1);

assign add_ln79_fu_198_p2 = (and_ln79_reg_312 + tempReg_fu_193_p2);

assign and_ln79_1_fu_241_p2 = (xor_ln79_2_fu_233_p3 & select_ln79_reg_306);

assign and_ln79_fu_179_p2 = (sext_ln75_cast_reg_272 & p503_1_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_ready = ap_ready_sig;

assign bit_sel_fu_217_p3 = tempReg_reg_318[64'd63];

assign c_0_address0 = c_0_address0_local;

assign c_0_ce0 = c_0_ce0_local;

assign c_0_d0 = add_ln79_reg_326;

assign c_0_we0 = c_0_we0_local;

assign c_1_address0 = c_1_address0_local;

assign c_1_ce0 = c_1_ce0_local;

assign c_1_d0 = add_ln79_reg_326;

assign c_1_we0 = c_1_we0_local;

assign icmp_ln78_fu_132_p2 = ((ap_sig_allocacmp_i_272 == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln_fu_142_p4 = {{ap_sig_allocacmp_i_272[2:1]}};

assign or_ln79_1_fu_251_p2 = (xor_ln79_3_fu_246_p2 | and_ln79_1_fu_241_p2);

assign or_ln79_fu_211_p2 = (xor_ln79_fu_203_p2 | xor_ln79_1_fu_207_p2);

assign p503_1_address0 = zext_ln79_3_fu_158_p1;

assign select_ln79_fu_171_p3 = ((trunc_ln78_fu_168_p1[0:0] == 1'b1) ? c_1_q0 : c_0_q0);

assign sext_ln75_cast_fu_116_p3 = ((sext_ln75[0:0] == 1'b1) ? 64'd18446744073709551615 : 64'd0);

assign tempReg_fu_193_p2 = (select_ln79_reg_306 + zext_ln79_fu_189_p1);

assign trunc_ln78_2_fu_138_p1 = ap_sig_allocacmp_i_272[2:0];

assign trunc_ln78_fu_168_p1 = i_272_reg_277[0:0];

assign trunc_ln79_fu_230_p1 = tempReg_reg_318[62:0];

assign xor_ln79_1_fu_207_p2 = (tempReg_reg_318 ^ and_ln79_reg_312);

assign xor_ln79_2_fu_233_p3 = {{xor_ln79_4_fu_224_p2}, {trunc_ln79_fu_230_p1}};

assign xor_ln79_3_fu_246_p2 = (or_ln79_fu_211_p2 ^ add_ln79_reg_326);

assign xor_ln79_4_fu_224_p2 = (bit_sel_fu_217_p3 ^ 1'd1);

assign xor_ln79_fu_203_p2 = (tempReg_reg_318 ^ add_ln79_reg_326);

assign zext_ln79_2_fu_152_p1 = lshr_ln_fu_142_p4;

assign zext_ln79_3_fu_158_p1 = trunc_ln78_2_fu_138_p1;

assign zext_ln79_fu_189_p1 = carry_reg_105;

always @ (posedge ap_clk) begin
    c_0_addr_reg_287[2] <= 1'b0;
    c_0_addr_reg_287_pp0_iter1_reg[2] <= 1'b0;
    c_1_addr_reg_292[2] <= 1'b0;
    c_1_addr_reg_292_pp0_iter1_reg[2] <= 1'b0;
end

endmodule //sikep503_kem_enc_hw_fp2div2_503_Pipeline_VITIS_LOOP_78_1
