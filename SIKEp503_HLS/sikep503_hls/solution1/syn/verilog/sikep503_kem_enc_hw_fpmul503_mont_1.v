// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fpmul503_mont_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ma_address0,
        ma_ce0,
        ma_q0,
        ma_offset,
        mc_address0,
        mc_ce0,
        mc_we0,
        mc_d0,
        mc_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] ma_address0;
output   ma_ce0;
input  [63:0] ma_q0;
input  [3:0] ma_offset;
output  [2:0] mc_address0;
output   mc_ce0;
output   mc_we0;
output  [63:0] mc_d0;
input  [63:0] mc_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] mc_address0;
reg mc_ce0;
reg mc_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [63:0] temp_d0;
wire   [63:0] temp_q0;
wire    grp_mp_mul_143_fu_63_ap_start;
wire    grp_mp_mul_143_fu_63_ap_done;
wire    grp_mp_mul_143_fu_63_ap_idle;
wire    grp_mp_mul_143_fu_63_ap_ready;
wire   [6:0] grp_mp_mul_143_fu_63_a_address0;
wire    grp_mp_mul_143_fu_63_a_ce0;
wire   [2:0] grp_mp_mul_143_fu_63_b_address0;
wire    grp_mp_mul_143_fu_63_b_ce0;
wire   [3:0] grp_mp_mul_143_fu_63_c_address0;
wire    grp_mp_mul_143_fu_63_c_ce0;
wire    grp_mp_mul_143_fu_63_c_we0;
wire   [63:0] grp_mp_mul_143_fu_63_c_d0;
wire    grp_rdc_mont_142_fu_73_ap_start;
wire    grp_rdc_mont_142_fu_73_ap_done;
wire    grp_rdc_mont_142_fu_73_ap_idle;
wire    grp_rdc_mont_142_fu_73_ap_ready;
wire   [3:0] grp_rdc_mont_142_fu_73_ma_address0;
wire    grp_rdc_mont_142_fu_73_ma_ce0;
wire   [2:0] grp_rdc_mont_142_fu_73_mc_address0;
wire    grp_rdc_mont_142_fu_73_mc_ce0;
wire    grp_rdc_mont_142_fu_73_mc_we0;
wire   [63:0] grp_rdc_mont_142_fu_73_mc_d0;
reg    grp_mp_mul_143_fu_63_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    temp_we0_out;
reg    grp_rdc_mont_142_fu_73_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] p_cast_cast_fu_106_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_90_p2;
reg   [4:0] empty_fu_36;
wire   [4:0] empty_144_fu_96_p2;
reg    temp_we0_local;
reg    temp_ce0_local;
wire   [3:0] empty_145_fu_102_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_mp_mul_143_fu_63_ap_start_reg = 1'b0;
#0 grp_rdc_mont_142_fu_73_ap_start_reg = 1'b0;
#0 empty_fu_36 = 5'd0;
end

sikep503_kem_enc_hw_fpsqr503_mont_1_temp_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

sikep503_kem_enc_hw_mp_mul_143 grp_mp_mul_143_fu_63(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mp_mul_143_fu_63_ap_start),
    .ap_done(grp_mp_mul_143_fu_63_ap_done),
    .ap_idle(grp_mp_mul_143_fu_63_ap_idle),
    .ap_ready(grp_mp_mul_143_fu_63_ap_ready),
    .a_address0(grp_mp_mul_143_fu_63_a_address0),
    .a_ce0(grp_mp_mul_143_fu_63_a_ce0),
    .a_q0(ma_q0),
    .a_offset(ma_offset),
    .b_address0(grp_mp_mul_143_fu_63_b_address0),
    .b_ce0(grp_mp_mul_143_fu_63_b_ce0),
    .b_q0(mc_q0),
    .c_address0(grp_mp_mul_143_fu_63_c_address0),
    .c_ce0(grp_mp_mul_143_fu_63_c_ce0),
    .c_we0(grp_mp_mul_143_fu_63_c_we0),
    .c_d0(grp_mp_mul_143_fu_63_c_d0)
);

sikep503_kem_enc_hw_rdc_mont_142 grp_rdc_mont_142_fu_73(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_rdc_mont_142_fu_73_ap_start),
    .ap_done(grp_rdc_mont_142_fu_73_ap_done),
    .ap_idle(grp_rdc_mont_142_fu_73_ap_idle),
    .ap_ready(grp_rdc_mont_142_fu_73_ap_ready),
    .ma_address0(grp_rdc_mont_142_fu_73_ma_address0),
    .ma_ce0(grp_rdc_mont_142_fu_73_ma_ce0),
    .ma_q0(temp_q0),
    .mc_address0(grp_rdc_mont_142_fu_73_mc_address0),
    .mc_ce0(grp_rdc_mont_142_fu_73_mc_ce0),
    .mc_we0(grp_rdc_mont_142_fu_73_mc_we0),
    .mc_d0(grp_rdc_mont_142_fu_73_mc_d0),
    .mc_q0(mc_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mp_mul_143_fu_63_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_mp_mul_143_fu_63_ap_start_reg <= 1'b1;
        end else if ((grp_mp_mul_143_fu_63_ap_ready == 1'b1)) begin
            grp_mp_mul_143_fu_63_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_rdc_mont_142_fu_73_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_rdc_mont_142_fu_73_ap_start_reg <= 1'b1;
        end else if ((grp_rdc_mont_142_fu_73_ap_ready == 1'b1)) begin
            grp_rdc_mont_142_fu_73_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_fu_36 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_90_p2 == 1'd0))) begin
        empty_fu_36 <= empty_144_fu_96_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_mp_mul_143_fu_63_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_rdc_mont_142_fu_73_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((grp_rdc_mont_142_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_rdc_mont_142_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mc_address0 = grp_rdc_mont_142_fu_73_mc_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mc_address0 = grp_mp_mul_143_fu_63_b_address0;
    end else begin
        mc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mc_ce0 = grp_rdc_mont_142_fu_73_mc_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        mc_ce0 = grp_mp_mul_143_fu_63_b_ce0;
    end else begin
        mc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mc_we0 = grp_rdc_mont_142_fu_73_mc_we0;
    end else begin
        mc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_address0 = grp_rdc_mont_142_fu_73_ma_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_address0 = grp_mp_mul_143_fu_63_c_address0;
    end else begin
        temp_address0 = p_cast_cast_fu_106_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_ce0 = grp_rdc_mont_142_fu_73_ma_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_ce0 = grp_mp_mul_143_fu_63_c_ce0;
    end else begin
        temp_ce0 = temp_ce0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_ce0_local = 1'b1;
    end else begin
        temp_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_d0 = grp_mp_mul_143_fu_63_c_d0;
    end else begin
        temp_d0 = 64'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_we0 = grp_mp_mul_143_fu_63_c_we0;
    end else begin
        temp_we0 = (temp_we0_out | 1'b0);
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_90_p2 == 1'd0))) begin
        temp_we0_local = 1'b1;
    end else begin
        temp_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_90_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_mp_mul_143_fu_63_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_rdc_mont_142_fu_73_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign empty_144_fu_96_p2 = (empty_fu_36 + 5'd1);

assign empty_145_fu_102_p1 = empty_fu_36[3:0];

assign exitcond1_fu_90_p2 = ((empty_fu_36 == 5'd16) ? 1'b1 : 1'b0);

assign grp_mp_mul_143_fu_63_ap_start = grp_mp_mul_143_fu_63_ap_start_reg;

assign grp_rdc_mont_142_fu_73_ap_start = grp_rdc_mont_142_fu_73_ap_start_reg;

assign ma_address0 = grp_mp_mul_143_fu_63_a_address0;

assign ma_ce0 = grp_mp_mul_143_fu_63_a_ce0;

assign mc_d0 = grp_rdc_mont_142_fu_73_mc_d0;

assign p_cast_cast_fu_106_p1 = empty_145_fu_102_p1;

assign temp_we0_out = temp_we0_local;

endmodule //sikep503_kem_enc_hw_fpmul503_mont_1
