// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fpsub503_143_Pipeline_VITIS_LOOP_47_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        c_offset,
        c_address0,
        c_ce0,
        c_we0,
        c_d0,
        borrow_out,
        borrow_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_address0;
output   a_ce0;
input  [63:0] a_q0;
output  [2:0] b_address0;
output   b_ce0;
input  [63:0] b_q0;
input  [0:0] c_offset;
output  [3:0] c_address0;
output   c_ce0;
output   c_we0;
output  [63:0] c_d0;
output  [0:0] borrow_out;
output   borrow_out_ap_vld;

reg ap_idle;
reg borrow_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln47_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] borrow_reg_106;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln47_reg_260;
reg   [0:0] icmp_ln47_reg_260_pp0_iter1_reg;
wire   [2:0] trunc_ln48_fu_139_p1;
reg   [2:0] trunc_ln48_reg_264;
reg   [2:0] trunc_ln48_reg_264_pp0_iter1_reg;
wire   [63:0] tempReg_fu_154_p2;
reg   [63:0] tempReg_reg_279;
reg   [0:0] tmp_191_reg_286;
wire   [0:0] borrowReg_fu_233_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
wire   [31:0] zext_ln48_19_fu_143_p1;
wire   [31:0] zext_ln48_24_fu_198_p1;
reg   [3:0] i_fu_50;
wire   [3:0] add_ln47_fu_133_p2;
reg   [3:0] ap_sig_allocacmp_i_112;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire    ap_block_pp0_stage0_01001;
reg    a_ce0_local;
reg    b_ce0_local;
reg    c_we0_local;
wire   [63:0] sub_ln48_fu_242_p2;
reg    c_ce0_local;
wire   [63:0] xor_ln105_82_fu_166_p2;
wire   [63:0] xor_ln105_fu_160_p2;
wire   [63:0] or_ln105_fu_172_p2;
wire   [63:0] xor_ln105_83_fu_178_p2;
wire   [3:0] tmp_fu_192_p3;
wire   [63:0] sub_ln95_fu_203_p2;
wire   [63:0] or_ln95_fu_208_p2;
wire   [0:0] tmp_192_fu_213_p3;
wire   [0:0] xor_ln48_fu_221_p2;
wire   [0:0] and_ln48_fu_227_p2;
wire   [63:0] zext_ln48_fu_238_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_50 = 4'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln47_reg_260_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        borrow_reg_106 <= borrowReg_fu_233_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        borrow_reg_106 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln47_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= add_ln47_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln47_reg_260 <= icmp_ln47_fu_127_p2;
        icmp_ln47_reg_260_pp0_iter1_reg <= icmp_ln47_reg_260;
        tempReg_reg_279 <= tempReg_fu_154_p2;
        tmp_191_reg_286 <= xor_ln105_83_fu_178_p2[32'd63];
        trunc_ln48_reg_264 <= trunc_ln48_fu_139_p1;
        trunc_ln48_reg_264_pp0_iter1_reg <= trunc_ln48_reg_264;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0_local = 1'b1;
    end else begin
        a_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_260 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_112 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_112 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0_local = 1'b1;
    end else begin
        b_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_260 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        borrow_out_ap_vld = 1'b1;
    end else begin
        borrow_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_ce0_local = 1'b1;
    end else begin
        c_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_reg_260_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_we0_local = 1'b1;
    end else begin
        c_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln48_19_fu_143_p1;

assign a_ce0 = a_ce0_local;

assign add_ln47_fu_133_p2 = (ap_sig_allocacmp_i_112 + 4'd1);

assign and_ln48_fu_227_p2 = (xor_ln48_fu_221_p2 & borrow_reg_106);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign b_address0 = zext_ln48_19_fu_143_p1;

assign b_ce0 = b_ce0_local;

assign borrowReg_fu_233_p2 = (tmp_191_reg_286 | and_ln48_fu_227_p2);

assign borrow_out = borrow_reg_106;

assign c_address0 = zext_ln48_24_fu_198_p1;

assign c_ce0 = c_ce0_local;

assign c_d0 = sub_ln48_fu_242_p2;

assign c_we0 = c_we0_local;

assign icmp_ln47_fu_127_p2 = ((ap_sig_allocacmp_i_112 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln105_fu_172_p2 = (xor_ln105_fu_160_p2 | xor_ln105_82_fu_166_p2);

assign or_ln95_fu_208_p2 = (tempReg_reg_279 | sub_ln95_fu_203_p2);

assign sub_ln48_fu_242_p2 = (tempReg_reg_279 - zext_ln48_fu_238_p1);

assign sub_ln95_fu_203_p2 = (64'd0 - tempReg_reg_279);

assign tempReg_fu_154_p2 = (a_q0 - b_q0);

assign tmp_192_fu_213_p3 = or_ln95_fu_208_p2[32'd63];

assign tmp_fu_192_p3 = {{c_offset}, {trunc_ln48_reg_264_pp0_iter1_reg}};

assign trunc_ln48_fu_139_p1 = ap_sig_allocacmp_i_112[2:0];

assign xor_ln105_82_fu_166_p2 = (tempReg_fu_154_p2 ^ b_q0);

assign xor_ln105_83_fu_178_p2 = (or_ln105_fu_172_p2 ^ a_q0);

assign xor_ln105_fu_160_p2 = (b_q0 ^ a_q0);

assign xor_ln48_fu_221_p2 = (tmp_192_fu_213_p3 ^ 1'd1);

assign zext_ln48_19_fu_143_p1 = trunc_ln48_fu_139_p1;

assign zext_ln48_24_fu_198_p1 = tmp_fu_192_p3;

assign zext_ln48_fu_238_p1 = borrow_reg_106;

endmodule //sikep503_kem_enc_hw_fpsub503_143_Pipeline_VITIS_LOOP_47_1
