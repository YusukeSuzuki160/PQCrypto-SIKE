// ==============================================================
// Generated by Vitis HLS v2024.2.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sikep503_kem_enc_hw_fp2mul503_mont_128_Pipeline_VITIS_LOOP_169_1202 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tt2_address0,
        tt2_ce0,
        tt2_we0,
        tt2_d0,
        tt2_address1,
        tt2_ce1,
        tt2_q1,
        tt1_address0,
        tt1_ce0,
        tt1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] tt2_address0;
output   tt2_ce0;
output   tt2_we0;
output  [63:0] tt2_d0;
output  [3:0] tt2_address1;
output   tt2_ce1;
input  [63:0] tt2_q1;
output  [3:0] tt1_address0;
output   tt1_ce0;
input  [63:0] tt1_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln169_fu_92_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] borrow_reg_72;
reg   [0:0] icmp_ln169_reg_205;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln169_reg_205_pp0_iter1_reg;
reg   [3:0] tt2_addr_reg_209;
reg   [3:0] tt2_addr_reg_209_pp0_iter1_reg;
reg   [63:0] tt2_load_reg_220;
reg   [63:0] tt1_load_reg_226;
wire   [63:0] tempReg_fu_119_p2;
reg   [63:0] tempReg_reg_232;
wire   [0:0] borrowReg_fu_182_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
wire   [31:0] zext_ln170_fu_108_p1;
wire    ap_block_pp0_stage0;
reg   [4:0] i_235_fu_38;
wire   [4:0] add_ln169_fu_98_p2;
reg   [4:0] ap_sig_allocacmp_i;
reg    tt2_ce1_local;
reg    tt2_we0_local;
wire   [63:0] sub_ln170_fu_192_p2;
reg    tt2_ce0_local;
reg    tt1_ce0_local;
wire   [3:0] trunc_ln170_fu_104_p1;
wire   [63:0] xor_ln105_190_fu_129_p2;
wire   [63:0] xor_ln105_189_fu_125_p2;
wire   [63:0] or_ln105_25_fu_133_p2;
wire   [63:0] xor_ln105_fu_139_p2;
wire   [63:0] sub_ln95_fu_152_p2;
wire   [63:0] or_ln95_fu_157_p2;
wire   [0:0] tmp_292_fu_162_p3;
wire   [0:0] xor_ln170_fu_170_p2;
wire   [0:0] and_ln170_fu_176_p2;
wire   [0:0] tmp_fu_144_p3;
wire   [63:0] zext_ln170_12_fu_188_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_235_fu_38 = 5'd0;
#0 ap_done_reg = 1'b0;
end

sikep503_kem_enc_hw_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln169_reg_205_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        borrow_reg_72 <= borrowReg_fu_182_p2;
    end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        borrow_reg_72 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln169_fu_92_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_235_fu_38 <= add_ln169_fu_98_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_235_fu_38 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln169_reg_205 <= icmp_ln169_fu_92_p2;
        icmp_ln169_reg_205_pp0_iter1_reg <= icmp_ln169_reg_205;
        tempReg_reg_232 <= tempReg_fu_119_p2;
        tt1_load_reg_226 <= tt1_q0;
        tt2_addr_reg_209 <= zext_ln170_fu_108_p1;
        tt2_addr_reg_209_pp0_iter1_reg <= tt2_addr_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt2_load_reg_220 <= tt2_q1;
    end
end

always @ (*) begin
    if (((icmp_ln169_fu_92_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln169_reg_205 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_235_fu_38;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt1_ce0_local = 1'b1;
    end else begin
        tt1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tt2_ce0_local = 1'b1;
    end else begin
        tt2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt2_ce1_local = 1'b1;
    end else begin
        tt2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln169_reg_205_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tt2_we0_local = 1'b1;
    end else begin
        tt2_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln169_fu_98_p2 = (ap_sig_allocacmp_i + 5'd1);

assign and_ln170_fu_176_p2 = (xor_ln170_fu_170_p2 & borrow_reg_72);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign borrowReg_fu_182_p2 = (tmp_fu_144_p3 | and_ln170_fu_176_p2);

assign icmp_ln169_fu_92_p2 = ((ap_sig_allocacmp_i == 5'd16) ? 1'b1 : 1'b0);

assign or_ln105_25_fu_133_p2 = (xor_ln105_190_fu_129_p2 | xor_ln105_189_fu_125_p2);

assign or_ln95_fu_157_p2 = (tempReg_reg_232 | sub_ln95_fu_152_p2);

assign sub_ln170_fu_192_p2 = (tempReg_reg_232 - zext_ln170_12_fu_188_p1);

assign sub_ln95_fu_152_p2 = (64'd0 - tempReg_reg_232);

assign tempReg_fu_119_p2 = (tt2_q1 - tt1_q0);

assign tmp_292_fu_162_p3 = or_ln95_fu_157_p2[32'd63];

assign tmp_fu_144_p3 = xor_ln105_fu_139_p2[32'd63];

assign trunc_ln170_fu_104_p1 = ap_sig_allocacmp_i[3:0];

assign tt1_address0 = zext_ln170_fu_108_p1;

assign tt1_ce0 = tt1_ce0_local;

assign tt2_address0 = tt2_addr_reg_209_pp0_iter1_reg;

assign tt2_address1 = zext_ln170_fu_108_p1;

assign tt2_ce0 = tt2_ce0_local;

assign tt2_ce1 = tt2_ce1_local;

assign tt2_d0 = sub_ln170_fu_192_p2;

assign tt2_we0 = tt2_we0_local;

assign xor_ln105_189_fu_125_p2 = (tt2_load_reg_220 ^ tt1_load_reg_226);

assign xor_ln105_190_fu_129_p2 = (tt1_load_reg_226 ^ tempReg_reg_232);

assign xor_ln105_fu_139_p2 = (tt2_load_reg_220 ^ or_ln105_25_fu_133_p2);

assign xor_ln170_fu_170_p2 = (tmp_292_fu_162_p3 ^ 1'd1);

assign zext_ln170_12_fu_188_p1 = borrow_reg_72;

assign zext_ln170_fu_108_p1 = trunc_ln170_fu_104_p1;

endmodule //sikep503_kem_enc_hw_fp2mul503_mont_128_Pipeline_VITIS_LOOP_169_1202
